{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-selection'), require('d3-dispatch'), require('d3-transition'), require('d3-timer'), require('d3-interpolate'), require('d3-zoom'), require('@hpcc-js/wasm'), require('d3-format'), require('d3-path')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-selection', 'd3-dispatch', 'd3-transition', 'd3-timer', 'd3-interpolate', 'd3-zoom', '@hpcc-js/wasm', 'd3-format', 'd3-path'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global[\"d3-graphviz\"] = {}, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global[\"@hpcc-js/wasm\"], global.d3, global.d3));\n})(this, function (exports, d3, d3Dispatch, d3Transition, d3Timer, d3Interpolate, d3Zoom, wasm, d3Format, d3Path) {\n  'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () {\n              return e[k];\n            }\n          });\n        }\n      });\n    }\n\n    n[\"default\"] = e;\n    return Object.freeze(n);\n  }\n\n  var d3__namespace =\n  /*#__PURE__*/\n  _interopNamespace(d3);\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  function extractElementData(element) {\n    var datum = {};\n    var tag = element.node().nodeName;\n    datum.tag = tag;\n\n    if (tag == '#text') {\n      datum.text = element.text();\n    } else if (tag == '#comment') {\n      datum.comment = element.text();\n    }\n\n    datum.attributes = {};\n    var attributes = element.node().attributes;\n\n    if (attributes) {\n      for (var i = 0; i < attributes.length; i++) {\n        var attribute = attributes[i];\n        var name = attribute.name;\n        var value = attribute.value;\n        datum.attributes[name] = value;\n      }\n    }\n\n    var transform = element.node().transform;\n\n    if (transform && transform.baseVal.numberOfItems != 0) {\n      var matrix = transform.baseVal.consolidate().matrix;\n      datum.translation = {\n        x: matrix.e,\n        y: matrix.f\n      };\n      datum.scale = matrix.a;\n    }\n\n    if (tag == 'ellipse') {\n      datum.center = {\n        x: datum.attributes.cx,\n        y: datum.attributes.cy\n      };\n    }\n\n    if (tag == 'polygon') {\n      var points = element.attr('points').split(' ');\n      var x = points.map(function (p) {\n        return p.split(',')[0];\n      });\n      var y = points.map(function (p) {\n        return p.split(',')[1];\n      });\n      var xmin = Math.min.apply(null, x);\n      var xmax = Math.max.apply(null, x);\n      var ymin = Math.min.apply(null, y);\n      var ymax = Math.max.apply(null, y);\n      var bbox = {\n        x: xmin,\n        y: ymin,\n        width: xmax - xmin,\n        height: ymax - ymin\n      };\n      datum.bbox = bbox;\n      datum.center = {\n        x: (xmin + xmax) / 2,\n        y: (ymin + ymax) / 2\n      };\n    }\n\n    if (tag == 'path') {\n      var d = element.attr('d');\n      var points = d.split(/[A-Z ]/);\n      points.shift();\n      var x = points.map(function (p) {\n        return +p.split(',')[0];\n      });\n      var y = points.map(function (p) {\n        return +p.split(',')[1];\n      });\n      var xmin = Math.min.apply(null, x);\n      var xmax = Math.max.apply(null, x);\n      var ymin = Math.min.apply(null, y);\n      var ymax = Math.max.apply(null, y);\n      var bbox = {\n        x: xmin,\n        y: ymin,\n        width: xmax - xmin,\n        height: ymax - ymin\n      };\n      datum.bbox = bbox;\n      datum.center = {\n        x: (xmin + xmax) / 2,\n        y: (ymin + ymax) / 2\n      };\n      datum.totalLength = element.node().getTotalLength();\n    }\n\n    if (tag == 'text') {\n      datum.center = {\n        x: element.attr('x'),\n        y: element.attr('y')\n      };\n    }\n\n    if (tag == '#text') {\n      datum.text = element.text();\n    } else if (tag == '#comment') {\n      datum.comment = element.text();\n    }\n\n    return datum;\n  }\n\n  function extractAllElementsData(element) {\n    var datum = extractElementData(element);\n    datum.children = [];\n    var children = d3__namespace.selectAll(element.node().childNodes);\n    children.each(function () {\n      var childData = extractAllElementsData(d3__namespace.select(this));\n      childData.parent = datum;\n      datum.children.push(childData);\n    });\n    return datum;\n  }\n\n  function createElement(data) {\n    if (data.tag == '#text') {\n      return document.createTextNode(\"\");\n    } else if (data.tag == '#comment') {\n      return document.createComment(data.comment);\n    } else {\n      return document.createElementNS('http://www.w3.org/2000/svg', data.tag);\n    }\n  }\n\n  function createElementWithAttributes(data) {\n    var elementNode = createElement(data);\n    var element = d3__namespace.select(elementNode);\n    var attributes = data.attributes;\n\n    for (var _i = 0, _Object$keys = Object.keys(attributes); _i < _Object$keys.length; _i++) {\n      var attributeName = _Object$keys[_i];\n      var attributeValue = attributes[attributeName];\n      element.attr(attributeName, attributeValue);\n    }\n\n    return elementNode;\n  }\n\n  function replaceElement(element, data) {\n    var parent = d3__namespace.select(element.node().parentNode);\n    var newElementNode = createElementWithAttributes(data);\n    var newElement = parent.insert(function () {\n      return newElementNode;\n    }, function () {\n      return element.node();\n    });\n    element.remove();\n    return newElement;\n  }\n\n  function insertElementData(element, datum) {\n    element.datum(datum);\n    element.data([datum], function (d) {\n      return d.key;\n    });\n  }\n\n  function insertAllElementsData(element, datum) {\n    insertElementData(element, datum);\n    var children = d3__namespace.selectAll(element.node().childNodes);\n    children.each(function (d, i) {\n      insertAllElementsData(d3__namespace.select(this), datum.children[i]);\n    });\n  }\n\n  function insertChildren(element, index) {\n    var children = element.selectAll(function () {\n      return element.node().childNodes;\n    });\n    children = children.data(function (d) {\n      return d.children;\n    }, function (d) {\n      return d.tag + '-' + index;\n    });\n    var childrenEnter = children.enter().append(function (d) {\n      return createElement(d);\n    });\n    var childrenExit = children.exit();\n    childrenExit = childrenExit.remove();\n    children = childrenEnter.merge(children);\n    var childTagIndexes = {};\n    children.each(function (childData) {\n      var childTag = childData.tag;\n\n      if (childTagIndexes[childTag] == null) {\n        childTagIndexes[childTag] = 0;\n      }\n\n      var childIndex = childTagIndexes[childTag]++;\n      attributeElement.call(this, childData, childIndex);\n    });\n  }\n\n  function attributeElement(data) {\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var element = d3__namespace.select(this);\n    data.tag;\n    var attributes = data.attributes;\n    var currentAttributes = element.node().attributes;\n\n    if (currentAttributes) {\n      for (var i = 0; i < currentAttributes.length; i++) {\n        var currentAttribute = currentAttributes[i];\n        var name = currentAttribute.name;\n\n        if (name.split(':')[0] != 'xmlns' && currentAttribute.namespaceURI) {\n          var namespaceURIParts = currentAttribute.namespaceURI.split('/');\n          var namespace = namespaceURIParts[namespaceURIParts.length - 1];\n          name = namespace + ':' + name;\n        }\n\n        if (!(name in attributes)) {\n          attributes[name] = null;\n        }\n      }\n    }\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(attributes); _i2 < _Object$keys2.length; _i2++) {\n      var attributeName = _Object$keys2[_i2];\n      element.attr(attributeName, attributes[attributeName]);\n    }\n\n    if (data.text) {\n      element.text(data.text);\n    }\n\n    insertChildren(element, index);\n  }\n\n  function shallowCopyObject(obj) {\n    return Object.assign({}, obj);\n  }\n\n  function roundTo2Decimals(x) {\n    return Math.round(x * 100.0) / 100.0;\n  }\n\n  function zoom(enable) {\n    this._options.zoom = enable;\n\n    if (this._options.zoom && !this._zoomBehavior) {\n      createZoomBehavior.call(this);\n    } else if (!this._options.zoom && this._zoomBehavior) {\n      this._zoomSelection.on(\".zoom\", null);\n\n      this._zoomBehavior = null;\n    }\n\n    return this;\n  }\n\n  function createZoomBehavior() {\n    var graphvizInstance = this;\n\n    function zoomed(event) {\n      var g = d3__namespace.select(svg.node().querySelector(\"g\"));\n      g.attr('transform', event.transform);\n\n      graphvizInstance._dispatch.call('zoom', graphvizInstance);\n    }\n\n    var root = this._selection;\n    var svg = d3__namespace.select(root.node().querySelector(\"svg\"));\n\n    if (svg.size() == 0) {\n      return this;\n    }\n\n    this._zoomSelection = svg;\n    var zoomBehavior = d3Zoom.zoom().scaleExtent(this._options.zoomScaleExtent).translateExtent(this._options.zoomTranslateExtent).interpolate(d3Interpolate.interpolate).on(\"zoom\", zoomed);\n    this._zoomBehavior = zoomBehavior;\n    var g = d3__namespace.select(svg.node().querySelector(\"g\"));\n    svg.call(zoomBehavior);\n\n    if (!this._active) {\n      translateZoomBehaviorTransform.call(this, g);\n    }\n\n    this._originalTransform = d3Zoom.zoomTransform(svg.node());\n    return this;\n  }\n\n  function getTranslatedZoomTransform(selection) {\n    // Get the current zoom transform for the top level svg and\n    // translate it uniformly with the given selection, using the\n    // difference between the translation specified in the selection's\n    // data and it's saved previous translation. The selection is\n    // normally the top level g element of the graph.\n    var oldTranslation = this._translation;\n    var oldScale = this._scale;\n    var newTranslation = selection.datum().translation;\n    var newScale = selection.datum().scale;\n    var t = d3Zoom.zoomTransform(this._zoomSelection.node());\n\n    if (oldTranslation) {\n      t = t.scale(1 / oldScale);\n      t = t.translate(-oldTranslation.x, -oldTranslation.y);\n    }\n\n    t = t.translate(newTranslation.x, newTranslation.y);\n    t = t.scale(newScale);\n    return t;\n  }\n\n  function translateZoomBehaviorTransform(selection) {\n    // Translate the current zoom transform for the top level svg\n    // uniformly with the given selection, using the difference\n    // between the translation specified in the selection's data and\n    // it's saved previous translation. The selection is normally the\n    // top level g element of the graph.\n    this._zoomBehavior.transform(this._zoomSelection, getTranslatedZoomTransform.call(this, selection)); // Save the selections's new translation and scale.\n\n\n    this._translation = selection.datum().translation;\n    this._scale = selection.datum().scale; // Set the original zoom transform to the translation and scale specified in\n    // the selection's data.\n\n    this._originalTransform = d3Zoom.zoomIdentity.translate(selection.datum().translation.x, selection.datum().translation.y).scale(selection.datum().scale);\n  }\n\n  function resetZoom(transition) {\n    // Reset the zoom transform to the original zoom transform.\n    var selection = this._zoomSelection;\n\n    if (transition) {\n      selection = selection.transition(transition);\n    }\n\n    selection.call(this._zoomBehavior.transform, this._originalTransform);\n    return this;\n  }\n\n  function zoomScaleExtent(extent) {\n    this._options.zoomScaleExtent = extent;\n    return this;\n  }\n\n  function zoomTranslateExtent(extent) {\n    this._options.zoomTranslateExtent = extent;\n    return this;\n  }\n\n  function zoomBehavior() {\n    return this._zoomBehavior || null;\n  }\n\n  function zoomSelection() {\n    return this._zoomSelection || null;\n  }\n\n  function pathTween(points, d1) {\n    return function () {\n      var pointInterpolators = points.map(function (p) {\n        return d3Interpolate.interpolate([p[0][0], p[0][1]], [p[1][0], p[1][1]]);\n      });\n      return function (t) {\n        return t < 1 ? \"M\" + pointInterpolators.map(function (p) {\n          return p(t);\n        }).join(\"L\") : d1;\n      };\n    };\n  }\n\n  function pathTweenPoints(node, d1, precision, precisionIsRelative) {\n    var path0 = node;\n    var path1 = path0.cloneNode();\n    var n0 = path0.getTotalLength();\n    var n1 = (path1.setAttribute(\"d\", d1), path1).getTotalLength(); // Uniform sampling of distance based on specified precision.\n\n    var distances = [0];\n    var i = 0;\n    var dt = precisionIsRelative ? precision : precision / Math.max(n0, n1);\n\n    while ((i += dt) < 1) {\n      distances.push(i);\n    }\n\n    distances.push(1); // Compute point-interpolators at each distance.\n\n    var points = distances.map(function (t) {\n      var p0 = path0.getPointAtLength(t * n0);\n      var p1 = path1.getPointAtLength(t * n1);\n      return [[p0.x, p0.y], [p1.x, p1.y]];\n    });\n    return points;\n  }\n\n  function data() {\n    return this._data || null;\n  }\n\n  function isEdgeElementParent(datum) {\n    return datum.attributes[\"class\"] == 'edge' || datum.tag == 'a' && datum.parent.tag == 'g' && datum.parent.parent.attributes[\"class\"] == 'edge';\n  }\n\n  function isEdgeElement(datum) {\n    return datum.parent && isEdgeElementParent(datum.parent);\n  }\n\n  function getEdgeGroup(datum) {\n    if (datum.parent.attributes[\"class\"] == 'edge') {\n      return datum.parent;\n    } else {\n      // datum.parent.tag == 'g' && datum.parent.parent.tag == 'g' && datum.parent.parent.parent.attributes.class == 'edge'\n      return datum.parent.parent.parent;\n    }\n  }\n\n  function getEdgeTitle(datum) {\n    return getEdgeGroup(datum).children.find(function (e) {\n      return e.tag == 'title';\n    });\n  }\n\n  function render(callback) {\n    if (this._busy) {\n      this._queue.push(this.render.bind(this, callback));\n\n      return this;\n    }\n\n    this._dispatch.call('renderStart', this);\n\n    if (this._transitionFactory) {\n      d3Timer.timeout(function () {\n        // Decouple from time spent. See https://github.com/d3/d3-timer/issues/27\n        this._transition = d3Transition.transition(this._transitionFactory());\n\n        _render.call(this, callback);\n      }.bind(this), 0);\n    } else {\n      _render.call(this, callback);\n    }\n\n    return this;\n  }\n\n  function _render(callback) {\n    var transitionInstance = this._transition;\n    var fade = this._options.fade && transitionInstance != null;\n    var tweenPaths = this._options.tweenPaths;\n    var tweenShapes = this._options.tweenShapes;\n    var convertEqualSidedPolygons = this._options.convertEqualSidedPolygons;\n    var growEnteringEdges = this._options.growEnteringEdges && transitionInstance != null;\n    var attributer = this._attributer;\n    var graphvizInstance = this;\n\n    function insertChildren(element) {\n      var children = element.selectAll(function () {\n        return element.node().childNodes;\n      });\n      children = children.data(function (d) {\n        return d.children;\n      }, function (d) {\n        return d.key;\n      });\n      var childrenEnter = children.enter().append(function (d) {\n        var element = createElement(d);\n\n        if (d.tag == '#text' && fade) {\n          element.nodeValue = d.text;\n        }\n\n        return element;\n      });\n\n      if (fade || growEnteringEdges && isEdgeElementParent(element.datum())) {\n        var childElementsEnter = childrenEnter.filter(function (d) {\n          return d.tag[0] == '#' ? null : this;\n        }).each(function (d) {\n          var childEnter = d3__namespace.select(this);\n\n          for (var _i = 0, _Object$keys = Object.keys(d.attributes); _i < _Object$keys.length; _i++) {\n            var attributeName = _Object$keys[_i];\n            var attributeValue = d.attributes[attributeName];\n            childEnter.attr(attributeName, attributeValue);\n          }\n        });\n        childElementsEnter.filter(function (d) {\n          return d.tag == 'svg' || d.tag == 'g' ? null : this;\n        }).style(\"opacity\", 0.0);\n      }\n\n      var childrenExit = children.exit();\n\n      if (attributer) {\n        childrenExit.each(attributer);\n      }\n\n      if (transitionInstance) {\n        childrenExit = childrenExit.transition(transitionInstance);\n\n        if (fade) {\n          childrenExit.filter(function (d) {\n            return d.tag[0] == '#' ? null : this;\n          }).style(\"opacity\", 0.0);\n        }\n      }\n\n      childrenExit = childrenExit.remove();\n      children = childrenEnter.merge(children);\n      children.each(attributeElement);\n    }\n\n    function attributeElement(data) {\n      var element = d3__namespace.select(this);\n\n      if (data.tag == \"svg\") {\n        var options = graphvizInstance._options;\n\n        if (options.width != null || options.height != null) {\n          var width = options.width;\n          var height = options.height;\n\n          if (width == null) {\n            width = data.attributes.width.replace('pt', '') * 4 / 3;\n          } else {\n            element.attr(\"width\", width);\n            data.attributes.width = width;\n          }\n\n          if (height == null) {\n            height = data.attributes.height.replace('pt', '') * 4 / 3;\n          } else {\n            element.attr(\"height\", height);\n            data.attributes.height = height;\n          }\n\n          if (!options.fit) {\n            element.attr(\"viewBox\", \"0 0 \".concat(width * 3 / 4 / options.scale, \" \").concat(height * 3 / 4 / options.scale));\n            data.attributes.viewBox = \"0 0 \".concat(width * 3 / 4 / options.scale, \" \").concat(height * 3 / 4 / options.scale);\n          }\n        }\n\n        if (options.scale != 1 && (options.fit || options.width == null && options.height == null)) {\n          width = data.attributes.viewBox.split(' ')[2];\n          height = data.attributes.viewBox.split(' ')[3];\n          element.attr(\"viewBox\", \"0 0 \".concat(width / options.scale, \" \").concat(height / options.scale));\n          data.attributes.viewBox = \"0 0 \".concat(width / options.scale, \" \").concat(height / options.scale);\n        }\n      }\n\n      if (attributer) {\n        element.each(attributer);\n      }\n\n      var tag = data.tag;\n      var attributes = data.attributes;\n      var currentAttributes = element.node().attributes;\n\n      if (currentAttributes) {\n        for (var i = 0; i < currentAttributes.length; i++) {\n          var currentAttribute = currentAttributes[i];\n          var name = currentAttribute.name;\n\n          if (name.split(':')[0] != 'xmlns' && currentAttribute.namespaceURI) {\n            var namespaceURIParts = currentAttribute.namespaceURI.split('/');\n            var namespace = namespaceURIParts[namespaceURIParts.length - 1];\n            name = namespace + ':' + name;\n          }\n\n          if (!(name in attributes)) {\n            attributes[name] = null;\n          }\n        }\n      }\n\n      var convertShape = false;\n      var convertPrevShape = false;\n\n      if (tweenShapes && transitionInstance) {\n        if ((this.nodeName == 'polygon' || this.nodeName == 'ellipse') && data.alternativeOld) {\n          convertPrevShape = true;\n        }\n\n        if ((tag == 'polygon' || tag == 'ellipse') && data.alternativeNew) {\n          convertShape = true;\n        }\n\n        if (this.nodeName == 'polygon' && tag == 'polygon' && data.alternativeOld) {\n          var prevData = extractElementData(element);\n          var prevPoints = prevData.attributes.points;\n\n          if (!convertEqualSidedPolygons) {\n            var nPrevPoints = prevPoints.split(' ').length;\n            var points = data.attributes.points;\n            var nPoints = points.split(' ').length;\n\n            if (nPoints == nPrevPoints) {\n              convertShape = false;\n              convertPrevShape = false;\n            }\n          }\n        }\n\n        if (convertPrevShape) {\n          var prevPathData = data.alternativeOld;\n          var pathElement = replaceElement(element, prevPathData);\n          pathElement.data([data], function () {\n            return data.key;\n          });\n          element = pathElement;\n        }\n\n        if (convertShape) {\n          var newPathData = data.alternativeNew;\n          tag = 'path';\n          attributes = newPathData.attributes;\n        }\n      }\n\n      var elementTransition = element;\n\n      if (transitionInstance) {\n        elementTransition = elementTransition.transition(transitionInstance);\n\n        if (fade) {\n          elementTransition.filter(function (d) {\n            return d.tag[0] == '#' ? null : this;\n          }).style(\"opacity\", 1.0);\n        }\n\n        elementTransition.filter(function (d) {\n          return d.tag[0] == '#' ? null : this;\n        }).on(\"end\", function (d) {\n          d3__namespace.select(this).attr('style', d && d.attributes && d.attributes.style || null);\n        });\n      }\n\n      var growThisPath = growEnteringEdges && tag == 'path' && data.offset;\n\n      if (growThisPath) {\n        var totalLength = data.totalLength;\n        element.attr(\"stroke-dasharray\", totalLength + \" \" + totalLength).attr(\"stroke-dashoffset\", totalLength).attr('transform', 'translate(' + data.offset.x + ',' + data.offset.y + ')');\n        attributes[\"stroke-dashoffset\"] = 0;\n        attributes['transform'] = 'translate(0,0)';\n        elementTransition.attr(\"stroke-dashoffset\", attributes[\"stroke-dashoffset\"]).attr('transform', attributes['transform']).on(\"start\", function () {\n          d3__namespace.select(this).style('opacity', null);\n        }).on(\"end\", function () {\n          d3__namespace.select(this).attr('stroke-dashoffset', null).attr('stroke-dasharray', null).attr('transform', null);\n        });\n      }\n\n      var moveThisPolygon = growEnteringEdges && tag == 'polygon' && isEdgeElement(data) && data.offset && data.parent.children[3].tag == 'path';\n\n      if (moveThisPolygon) {\n        var edgePath = d3__namespace.select(element.node().parentNode.querySelector(\"path\"));\n        var p0 = edgePath.node().getPointAtLength(0);\n        var p1 = edgePath.node().getPointAtLength(data.totalLength);\n        var p2 = edgePath.node().getPointAtLength(data.totalLength - 1);\n        var angle1 = Math.atan2(p1.y - p2.y, p1.x - p2.x) * 180 / Math.PI;\n        var x = p0.x - p1.x + data.offset.x;\n        var y = p0.y - p1.y + data.offset.y;\n        element.attr('transform', 'translate(' + x + ',' + y + ')');\n        elementTransition.attrTween(\"transform\", function () {\n          return function (t) {\n            var p = edgePath.node().getPointAtLength(data.totalLength * t);\n            var p2 = edgePath.node().getPointAtLength(data.totalLength * t + 1);\n            var angle = Math.atan2(p2.y - p.y, p2.x - p.x) * 180 / Math.PI - angle1;\n            x = p.x - p1.x + data.offset.x * (1 - t);\n            y = p.y - p1.y + data.offset.y * (1 - t);\n            return 'translate(' + x + ',' + y + ') rotate(' + angle + ' ' + p1.x + ' ' + p1.y + ')';\n          };\n        }).on(\"start\", function () {\n          d3__namespace.select(this).style('opacity', null);\n        }).on(\"end\", function () {\n          d3__namespace.select(this).attr('transform', null);\n        });\n      }\n\n      var tweenThisPath = tweenPaths && transitionInstance && tag == 'path' && element.attr('d') != null;\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(attributes); _i2 < _Object$keys2.length; _i2++) {\n        var attributeName = _Object$keys2[_i2];\n        var attributeValue = attributes[attributeName];\n\n        if (tweenThisPath && attributeName == 'd') {\n          var points = (data.alternativeOld || data).points;\n\n          if (points) {\n            elementTransition.attrTween(\"d\", pathTween(points, attributeValue));\n          }\n        } else {\n          if (attributeName == 'transform' && data.translation) {\n            if (transitionInstance) {\n              var onEnd = elementTransition.on(\"end\");\n              elementTransition.on(\"start\", function () {\n                if (graphvizInstance._zoomBehavior) {\n                  // Update the transform to transition to, just before the transition starts\n                  // in order to catch changes between the transition scheduling to its start.\n                  elementTransition.tween(\"attr.transform\", function () {\n                    var node = this;\n                    return function (t) {\n                      node.setAttribute(\"transform\", d3Interpolate.interpolateTransformSvg(d3Zoom.zoomTransform(graphvizInstance._zoomSelection.node()).toString(), getTranslatedZoomTransform.call(graphvizInstance, element).toString())(t));\n                    };\n                  });\n                }\n              }).on(\"end\", function () {\n                onEnd.call(this); // Update the zoom transform to the new translated transform\n\n                if (graphvizInstance._zoomBehavior) {\n                  translateZoomBehaviorTransform.call(graphvizInstance, element);\n                }\n              });\n            } else {\n              if (graphvizInstance._zoomBehavior) {\n                // Update the transform attribute to set with the current pan translation\n                translateZoomBehaviorTransform.call(graphvizInstance, element);\n                attributeValue = getTranslatedZoomTransform.call(graphvizInstance, element).toString();\n              }\n            }\n          }\n\n          elementTransition.attr(attributeName, attributeValue);\n        }\n      }\n\n      if (convertShape) {\n        elementTransition.on(\"end\", function (d, i, nodes) {\n          pathElement = d3__namespace.select(this);\n          var newElement = replaceElement(pathElement, d);\n          newElement.data([d], function () {\n            return d.key;\n          });\n        });\n      }\n\n      if (data.text) {\n        elementTransition.text(data.text);\n      }\n\n      insertChildren(element);\n    }\n\n    var root = this._selection;\n\n    if (transitionInstance != null) {\n      // Ensure original SVG shape elements are restored after transition before rendering new graph\n      var jobs = this._jobs;\n\n      if (graphvizInstance._active) {\n        jobs.push(null);\n        return this;\n      } else {\n        root.transition(transitionInstance).transition().duration(0).on(\"end\", function () {\n          graphvizInstance._active = false;\n\n          if (jobs.length != 0) {\n            jobs.shift();\n            graphvizInstance.render();\n          }\n        });\n        this._active = true;\n      }\n    }\n\n    if (transitionInstance != null) {\n      root.transition(transitionInstance).on(\"start\", function () {\n        graphvizInstance._dispatch.call('transitionStart', graphvizInstance);\n      }).on(\"end\", function () {\n        graphvizInstance._dispatch.call('transitionEnd', graphvizInstance);\n      }).transition().duration(0).on(\"start\", function () {\n        graphvizInstance._dispatch.call('restoreEnd', graphvizInstance);\n\n        graphvizInstance._dispatch.call('end', graphvizInstance);\n\n        if (callback) {\n          callback.call(graphvizInstance);\n        }\n      });\n    }\n\n    var data = this._data;\n    var svg = root.selectAll(\"svg\").data([data], function (d) {\n      return d.key;\n    });\n    svg = svg.enter().append(\"svg\").merge(svg);\n    attributeElement.call(svg.node(), data);\n\n    if (this._options.zoom && !this._zoomBehavior) {\n      createZoomBehavior.call(this);\n    }\n\n    graphvizInstance._dispatch.call('renderEnd', graphvizInstance);\n\n    if (transitionInstance == null) {\n      this._dispatch.call('end', this);\n\n      if (callback) {\n        callback.call(this);\n      }\n    }\n\n    return this;\n  }\n\n  function graphvizVersion() {\n    return this._graphvizVersion;\n  }\n\n  function convertToPathData(originalData, guideData) {\n    if (originalData.tag == 'polygon') {\n      var newData = shallowCopyObject(originalData);\n      newData.tag = 'path';\n      var originalAttributes = originalData.attributes;\n      var newAttributes = shallowCopyObject(originalAttributes);\n      var newPointsString = originalAttributes.points;\n\n      if (guideData.tag == 'polygon') {\n        var bbox = originalData.bbox;\n        bbox.cx = bbox.x + bbox.width / 2;\n        bbox.cy = bbox.y + bbox.height / 2;\n        var pointsString = originalAttributes.points;\n        var pointStrings = pointsString.split(' ');\n        var normPoints = pointStrings.map(function (p) {\n          var xy = p.split(',');\n          return [xy[0] - bbox.cx, xy[1] - bbox.cy];\n        });\n        var x0 = normPoints[normPoints.length - 1][0];\n        var y0 = normPoints[normPoints.length - 1][1];\n\n        for (var i = 0; i < normPoints.length; i++, x0 = x1, y0 = y1) {\n          var x1 = normPoints[i][0];\n          var y1 = normPoints[i][1];\n          var dx = x1 - x0;\n          var dy = y1 - y0;\n\n          if (dy == 0) {\n            continue;\n          } else {\n            var x2 = x0 - y0 * dx / dy;\n          }\n\n          if (0 <= x2 && x2 < Infinity && (x0 <= x2 && x2 <= x1 || x1 <= x2 && x2 <= x0)) {\n            break;\n          }\n        }\n\n        var newPointStrings = [[bbox.cx + x2, bbox.cy + 0].join(',')];\n        newPointStrings = newPointStrings.concat(pointStrings.slice(i));\n        newPointStrings = newPointStrings.concat(pointStrings.slice(0, i));\n        newPointsString = newPointStrings.join(' ');\n      }\n\n      newAttributes['d'] = 'M' + newPointsString + 'z';\n      delete newAttributes.points;\n      newData.attributes = newAttributes;\n    } else\n      /* if (originalData.tag == 'ellipse') */\n      {\n        var newData = shallowCopyObject(originalData);\n        newData.tag = 'path';\n        var originalAttributes = originalData.attributes;\n        var newAttributes = shallowCopyObject(originalAttributes);\n        var cx = originalAttributes.cx;\n        var cy = originalAttributes.cy;\n        var rx = originalAttributes.rx;\n        var ry = originalAttributes.ry;\n\n        if (guideData.tag == 'polygon') {\n          var bbox = guideData.bbox;\n          bbox.cx = bbox.x + bbox.width / 2;\n          bbox.cy = bbox.y + bbox.height / 2;\n          var p = guideData.attributes.points.split(' ')[0].split(',');\n          var sx = p[0];\n          var sy = p[1];\n          var dx = sx - bbox.cx;\n          var dy = sy - bbox.cy;\n          var l = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n          var cosA = dx / l;\n          var sinA = -dy / l;\n        } else {\n          // if (guideData.tag == 'path') {\n          // FIXME: add support for getting start position from path\n          var cosA = 1;\n          var sinA = 0;\n        }\n\n        var x1 = rx * cosA;\n        var y1 = -ry * sinA;\n        var x2 = rx * -cosA;\n        var y2 = -ry * -sinA;\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        newAttributes['d'] = 'M ' + cx + ' ' + cy + ' m ' + x1 + ',' + y1 + ' a ' + rx + ',' + ry + ' 0 1,0 ' + dx + ',' + dy + ' a ' + rx + ',' + ry + ' 0 1,0 ' + -dx + ',' + -dy + 'z';\n        delete newAttributes.cx;\n        delete newAttributes.cy;\n        delete newAttributes.rx;\n        delete newAttributes.ry;\n        newData.attributes = newAttributes;\n      }\n\n    return newData;\n  }\n\n  function translatePointsAttribute(pointsString, x, y) {\n    var pointStrings = pointsString.split(' ');\n    var points = pointStrings.map(function (p) {\n      return p.split(',');\n    });\n    var points = pointStrings.map(function (p) {\n      return [roundTo2Decimals(+x + +p.split(',')[0]), roundTo2Decimals(+y + +p.split(',')[1])];\n    });\n    var pointStrings = points.map(function (p) {\n      return p.join(',');\n    });\n    var pointsString = pointStrings.join(' ');\n    return pointsString;\n  }\n\n  function translateDAttribute(d, x, y) {\n    var pointStrings = d.split(/[A-Z ]/);\n    pointStrings.shift();\n    var commands = d.split(/[^[A-Z ]+/);\n    var points = pointStrings.map(function (p) {\n      return p.split(',');\n    });\n    var points = pointStrings.map(function (p) {\n      return [roundTo2Decimals(+x + +p.split(',')[0]), roundTo2Decimals(+y + +p.split(',')[1])];\n    });\n    var pointStrings = points.map(function (p) {\n      return p.join(',');\n    });\n    d = commands.reduce(function (arr, v, i) {\n      return arr.concat(v, pointStrings[i]);\n    }, []).join('');\n    return d;\n  }\n\n  function initViz() {\n    var _this = this; // force JIT compilation of @hpcc-js/wasm\n\n\n    try {\n      wasm.graphviz.layout(\"\", \"svg\", \"dot\").then(function () {\n        wasm.graphvizSync().then(function (graphviz1) {\n          _this.layoutSync = graphviz1.layout.bind(graphviz1);\n\n          if (_this._worker == null) {\n            _this._dispatch.call(\"initEnd\", _this);\n          }\n\n          if (_this._afterInit) {\n            _this._afterInit();\n          }\n        });\n      });\n    } catch (error) {}\n\n    if (this._worker != null) {\n      var vizURL = this._vizURL;\n      var graphvizInstance = this;\n\n      this._workerPort.onmessage = function (event) {\n        var callback = graphvizInstance._workerCallbacks.shift();\n\n        callback.call(graphvizInstance, event);\n      };\n\n      if (!vizURL.match(/^https?:\\/\\/|^\\/\\//i)) {\n        // Local URL. Prepend with local domain to be usable in web worker\n        vizURL = new window.URL(vizURL, document.location.href).href;\n      }\n\n      postMessage.call(this, {\n        dot: \"\",\n        engine: 'dot',\n        vizURL: vizURL\n      }, function (event) {\n        switch (event.data.type) {\n          case \"init\":\n            graphvizInstance._dispatch.call(\"initEnd\", this);\n\n            break;\n        }\n      });\n    }\n  }\n\n  function postMessage(message, callback) {\n    this._workerCallbacks.push(callback);\n\n    this._workerPort.postMessage(message);\n  }\n\n  function layout(src, engine, vizOptions, callback) {\n    if (this._worker) {\n      postMessage.call(this, {\n        dot: src,\n        engine: engine,\n        options: vizOptions\n      }, function (event) {\n        callback.call(this, event.data);\n      });\n    } else {\n      try {\n        var svgDoc = this.layoutSync(src, \"svg\", engine, vizOptions);\n        callback.call(this, {\n          type: 'done',\n          svg: svgDoc\n        });\n      } catch (error) {\n        callback.call(this, {\n          type: 'error',\n          error: error.message\n        });\n      }\n    }\n  }\n\n  function dot(src, callback) {\n    var graphvizInstance = this;\n    this._worker;\n    var engine = this._options.engine;\n    var images = this._images;\n\n    this._dispatch.call(\"start\", this);\n\n    this._busy = true;\n\n    this._dispatch.call(\"layoutStart\", this);\n\n    var vizOptions = {\n      images: images\n    };\n\n    if (!this._worker && this.layoutSync == null) {\n      this._afterInit = this.dot.bind(this, src, callback);\n      return this;\n    }\n\n    this.layout(src, engine, vizOptions, function (data) {\n      switch (data.type) {\n        case \"error\":\n          if (graphvizInstance._onerror) {\n            graphvizInstance._onerror(data.error);\n          } else {\n            throw data.error.message;\n          }\n\n          break;\n\n        case \"done\":\n          var svgDoc = data.svg;\n          layoutDone.call(this, svgDoc, callback);\n          break;\n      }\n    });\n    return this;\n  }\n\n  function layoutDone(svgDoc, callback) {\n    var keyMode = this._options.keyMode;\n    var tweenPaths = this._options.tweenPaths;\n    var tweenShapes = this._options.tweenShapes;\n\n    if (typeof this._options.tweenPrecision == 'string' && this._options.tweenPrecision.includes('%')) {\n      var tweenPrecision = +this._options.tweenPrecision.split('%')[0] / 100;\n\n      var tweenPrecisionIsRelative = this._options.tweenPrecision.includes('%');\n    } else {\n      var tweenPrecision = this._options.tweenPrecision;\n      var tweenPrecisionIsRelative = false;\n    }\n\n    var growEnteringEdges = this._options.growEnteringEdges;\n    var dictionary = {};\n    var prevDictionary = this._dictionary || {};\n    var nodeDictionary = {};\n    var prevNodeDictionary = this._nodeDictionary || {};\n\n    function setKey(datum, index) {\n      var tag = datum.tag;\n\n      if (keyMode == 'index') {\n        datum.key = index;\n      } else if (tag[0] != '#') {\n        if (keyMode == 'id') {\n          datum.key = datum.attributes.id;\n        } else if (keyMode == 'title') {\n          var title = datum.children.find(function (childData) {\n            return childData.tag == 'title';\n          });\n\n          if (title) {\n            if (title.children.length > 0) {\n              datum.key = title.children[0].text;\n            } else {\n              datum.key = '';\n            }\n          }\n        }\n      }\n\n      if (datum.key == null) {\n        if (tweenShapes) {\n          if (tag == 'ellipse' || tag == 'polygon') {\n            tag = 'path';\n          }\n        }\n\n        datum.key = tag + '-' + index;\n      }\n    }\n\n    function setId(datum, parentData) {\n      var id = (parentData ? parentData.id + '.' : '') + datum.key;\n      datum.id = id;\n    }\n\n    function addToDictionary(datum) {\n      dictionary[datum.id] = datum;\n    }\n\n    function calculateAlternativeShapeData(datum, prevDatum) {\n      if (tweenShapes && datum.id in prevDictionary) {\n        if ((prevDatum.tag == 'polygon' || prevDatum.tag == 'ellipse' || prevDatum.tag == 'path') && (prevDatum.tag != datum.tag || datum.tag == 'polygon')) {\n          if (prevDatum.tag != 'path') {\n            datum.alternativeOld = convertToPathData(prevDatum, datum);\n          }\n\n          if (datum.tag != 'path') {\n            datum.alternativeNew = convertToPathData(datum, prevDatum);\n          }\n        }\n      }\n    }\n\n    function calculatePathTweenPoints(datum, prevDatum) {\n      if (tweenPaths && prevDatum && (prevDatum.tag == 'path' || datum.alternativeOld && datum.alternativeOld.tag == 'path')) {\n        var attribute_d = (datum.alternativeNew || datum).attributes.d;\n\n        if (datum.alternativeOld) {\n          var oldNode = createElementWithAttributes(datum.alternativeOld);\n        } else {\n          var oldNode = createElementWithAttributes(prevDatum);\n        }\n\n        (datum.alternativeOld || (datum.alternativeOld = {})).points = pathTweenPoints(oldNode, attribute_d, tweenPrecision, tweenPrecisionIsRelative);\n      }\n    }\n\n    function postProcessDataPass1Local(datum) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parentData = arguments.length > 2 ? arguments[2] : undefined;\n      setKey(datum, index);\n      setId(datum, parentData);\n      var id = datum.id;\n      var prevDatum = prevDictionary[id];\n      addToDictionary(datum);\n      calculateAlternativeShapeData(datum, prevDatum);\n      calculatePathTweenPoints(datum, prevDatum);\n      var childTagIndexes = {};\n      datum.children.forEach(function (childData) {\n        var childTag = childData.tag;\n\n        if (childTag == 'ellipse' || childTag == 'polygon') {\n          childTag = 'path';\n        }\n\n        if (childTagIndexes[childTag] == null) {\n          childTagIndexes[childTag] = 0;\n        }\n\n        var childIndex = childTagIndexes[childTag]++;\n        postProcessDataPass1Local(childData, childIndex, datum);\n      });\n    }\n\n    function addToNodeDictionary(datum) {\n      var tag = datum.tag;\n\n      if (growEnteringEdges && datum.parent) {\n        if (datum.parent.attributes[\"class\"] == 'node') {\n          if (tag == 'title') {\n            if (datum.children.length > 0) {\n              var child = datum.children[0];\n              var nodeId = child.text;\n            } else {\n              var nodeId = '';\n            }\n\n            nodeDictionary[nodeId] = datum.parent;\n          }\n        }\n      }\n    }\n\n    function extractGrowingEdgesData(datum) {\n      var id = datum.id;\n      var tag = datum.tag;\n      var prevDatum = prevDictionary[id];\n\n      if (growEnteringEdges && !prevDatum && datum.parent) {\n        if (isEdgeElement(datum)) {\n          if (tag == 'path' || tag == 'polygon') {\n            if (tag == 'polygon') {\n              var path = datum.parent.children.find(function (e) {\n                return e.tag == 'path';\n              });\n\n              if (path) {\n                datum.totalLength = path.totalLength;\n              }\n            }\n\n            var title = getEdgeTitle(datum);\n            var child = title.children[0];\n            var nodeIds = child.text.split('->');\n\n            if (nodeIds.length != 2) {\n              nodeIds = child.text.split('--');\n            }\n\n            var startNodeId = nodeIds[0];\n            var startNode = nodeDictionary[startNodeId];\n            var prevStartNode = prevNodeDictionary[startNodeId];\n\n            if (prevStartNode) {\n              var i = startNode.children.findIndex(function (element, index) {\n                return element.tag == 'g';\n              });\n\n              if (i >= 0) {\n                var j = startNode.children[i].children.findIndex(function (element, index) {\n                  return element.tag == 'a';\n                });\n                startNode = startNode.children[i].children[j];\n              }\n\n              var i = prevStartNode.children.findIndex(function (element, index) {\n                return element.tag == 'g';\n              });\n\n              if (i >= 0) {\n                var j = prevStartNode.children[i].children.findIndex(function (element, index) {\n                  return element.tag == 'a';\n                });\n                prevStartNode = prevStartNode.children[i].children[j];\n              }\n\n              var startShapes = startNode.children;\n\n              for (var i = 0; i < startShapes.length; i++) {\n                if (startShapes[i].tag == 'polygon' || startShapes[i].tag == 'ellipse' || startShapes[i].tag == 'path' || startShapes[i].tag == 'text') {\n                  var startShape = startShapes[i];\n                  break;\n                }\n              }\n\n              var prevStartShapes = prevStartNode.children;\n\n              for (var i = 0; i < prevStartShapes.length; i++) {\n                if (prevStartShapes[i].tag == 'polygon' || prevStartShapes[i].tag == 'ellipse' || prevStartShapes[i].tag == 'path' || prevStartShapes[i].tag == 'text') {\n                  var prevStartShape = prevStartShapes[i];\n                  break;\n                }\n              }\n\n              if (prevStartShape && startShape) {\n                datum.offset = {\n                  x: prevStartShape.center.x - startShape.center.x,\n                  y: prevStartShape.center.y - startShape.center.y\n                };\n              } else {\n                datum.offset = {\n                  x: 0,\n                  y: 0\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    function postProcessDataPass2Global(datum) {\n      addToNodeDictionary(datum);\n      extractGrowingEdgesData(datum);\n      datum.children.forEach(function (childData) {\n        postProcessDataPass2Global(childData);\n      });\n    }\n\n    this._dispatch.call(\"layoutEnd\", this);\n\n    var newDoc = d3__namespace.select(document.createDocumentFragment()).append('div');\n    var parser = new window.DOMParser();\n    var doc = parser.parseFromString(svgDoc, \"image/svg+xml\");\n    newDoc.append(function () {\n      return doc.documentElement;\n    });\n    var newSvg = newDoc.select('svg');\n    var data = extractAllElementsData(newSvg);\n\n    this._dispatch.call('dataExtractEnd', this);\n\n    postProcessDataPass1Local(data);\n\n    this._dispatch.call('dataProcessPass1End', this);\n\n    postProcessDataPass2Global(data);\n\n    this._dispatch.call('dataProcessPass2End', this);\n\n    this._data = data;\n    this._dictionary = dictionary;\n    this._nodeDictionary = nodeDictionary;\n\n    this._extractData = function (element, childIndex, parentData) {\n      var data = extractAllElementsData(element);\n      postProcessDataPass1Local(data, childIndex, parentData);\n      postProcessDataPass2Global(data);\n      return data;\n    };\n\n    this._busy = false;\n\n    this._dispatch.call('dataProcessEnd', this);\n\n    if (callback) {\n      callback.call(this);\n    }\n\n    if (this._queue.length > 0) {\n      var job = this._queue.shift();\n\n      job.call(this);\n    }\n  }\n\n  function renderDot(src, callback) {\n    var graphvizInstance = this;\n    this.dot(src, render);\n\n    function render() {\n      graphvizInstance.render(callback);\n    }\n\n    return this;\n  }\n\n  function transition(name) {\n    if (name instanceof Function) {\n      this._transitionFactory = name;\n    } else {\n      this._transition = d3Transition.transition(name);\n    }\n\n    return this;\n  }\n\n  function active(name) {\n    var root = this._selection;\n    var svg = root.selectWithoutDataPropagation(\"svg\");\n\n    if (svg.size() != 0) {\n      return d3Transition.active(svg.node(), name);\n    } else {\n      return null;\n    }\n  }\n\n  function options(options) {\n    if (typeof options == 'undefined') {\n      return Object.assign({}, this._options);\n    } else {\n      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n        var option = _Object$keys[_i];\n        this._options[option] = options[option];\n      }\n\n      return this;\n    }\n  }\n\n  function width(width) {\n    this._options.width = width;\n    return this;\n  }\n\n  function height(height) {\n    this._options.height = height;\n    return this;\n  }\n\n  function scale(scale) {\n    this._options.scale = scale;\n    return this;\n  }\n\n  function fit(fit) {\n    this._options.fit = fit;\n    return this;\n  }\n\n  function attributer(callback) {\n    this._attributer = callback;\n    return this;\n  }\n\n  function engine(engine) {\n    this._options.engine = engine;\n    return this;\n  }\n\n  function images(path, width, height) {\n    this._images.push({\n      path: path,\n      width: width,\n      height: height\n    });\n\n    return this;\n  }\n\n  function keyMode(keyMode) {\n    if (!this._keyModes.has(keyMode)) {\n      throw Error('Illegal keyMode: ' + keyMode);\n    }\n\n    if (keyMode != this._options.keyMode && this._data != null) {\n      throw Error('Too late to change keyMode');\n    }\n\n    this._options.keyMode = keyMode;\n    return this;\n  }\n\n  function fade(enable) {\n    this._options.fade = enable;\n    return this;\n  }\n\n  function tweenPaths(enable) {\n    this._options.tweenPaths = enable;\n    return this;\n  }\n\n  function tweenShapes(enable) {\n    this._options.tweenShapes = enable;\n\n    if (enable) {\n      this._options.tweenPaths = true;\n    }\n\n    return this;\n  }\n\n  function convertEqualSidedPolygons(enable) {\n    this._options.convertEqualSidedPolygons = enable;\n    return this;\n  }\n\n  function tweenPrecision(precision) {\n    this._options.tweenPrecision = precision;\n    return this;\n  }\n\n  function growEnteringEdges(enable) {\n    this._options.growEnteringEdges = enable;\n    return this;\n  }\n\n  function on(typenames, callback) {\n    this._dispatch.on(typenames, callback);\n\n    return this;\n  }\n\n  function onerror(callback) {\n    this._onerror = callback;\n    return this;\n  }\n\n  function logEvents(enable) {\n    var _this = this;\n\n    var t0 = Date.now();\n    var times = {};\n    var eventTypes = this._eventTypes;\n    var maxEventTypeLength = Math.max.apply(Math, _toConsumableArray(eventTypes.map(function (eventType) {\n      return eventType.length;\n    })));\n\n    var _loop = function _loop(i) {\n      var eventType = eventTypes[i];\n      times[eventType] = [];\n      graphvizInstance = _this;\n\n      _this.on(eventType + '.log', enable ? function () {\n        var t = Date.now();\n        var seqNo = times[eventType].length;\n        times[eventType].push(t);\n        var string = '';\n        string += 'Event ';\n        string += d3Format.format(' >2')(i) + ' ';\n        string += eventType + ' '.repeat(maxEventTypeLength - eventType.length);\n        string += d3Format.format(' >5')(t - t0) + ' ';\n\n        if (eventType != 'initEnd') {\n          string += d3Format.format(' >5')(t - times['start'][seqNo]);\n        }\n\n        if (eventType == 'dataProcessEnd') {\n          string += ' prepare                 ' + d3Format.format(' >5')(t - times['layoutEnd'][seqNo]);\n        }\n\n        if (eventType == 'renderEnd' && graphvizInstance._transition) {\n          string += ' transition start margin ' + d3Format.format(' >5')(graphvizInstance._transition.delay() - (t - times['renderStart'][seqNo]));\n          expectedDelay = graphvizInstance._transition.delay();\n          expectedDuration = graphvizInstance._transition.duration();\n        }\n\n        if (eventType == 'transitionStart') {\n          var actualDelay = t - times['renderStart'][seqNo];\n          string += ' transition delay        ' + d3Format.format(' >5')(t - times['renderStart'][seqNo]);\n          string += ' expected ' + d3Format.format(' >5')(expectedDelay);\n          string += ' diff ' + d3Format.format(' >5')(actualDelay - expectedDelay);\n        }\n\n        if (eventType == 'transitionEnd') {\n          var actualDuration = t - times['transitionStart'][seqNo];\n          string += ' transition duration     ' + d3Format.format(' >5')(actualDuration);\n          string += ' expected ' + d3Format.format(' >5')(expectedDuration);\n          string += ' diff ' + d3Format.format(' >5')(actualDuration - expectedDuration);\n        }\n\n        console.log(string);\n        t0 = t;\n      } : null);\n    };\n\n    for (var i = 0; i < eventTypes.length; i++) {\n      var graphvizInstance;\n      var expectedDelay;\n      var expectedDuration;\n\n      _loop(i);\n    }\n\n    return this;\n  }\n\n  function destroy() {\n    delete this._selection.node().__graphviz__;\n\n    if (this._worker) {\n      this._workerPortClose();\n    }\n\n    return this;\n  }\n\n  function rotate(x, y, cosA, sinA) {\n    // (x + j * y) * (cosA + j * sinA) = x * cosA - y * sinA + j * (x * sinA + y * cosA)\n    y = -y;\n    sinA = -sinA;\n    var _ref = [x * cosA - y * sinA, x * sinA + y * cosA];\n    x = _ref[0];\n    y = _ref[1];\n    y = -y;\n    return [x, y];\n  }\n\n  function drawEdge(x1, y1, x2, y2, attributes) {\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    attributes = Object.assign({}, attributes);\n\n    if (attributes.style && attributes.style.includes('invis')) {\n      var newEdge = d3__namespace.select(null);\n    } else {\n      var root = this._selection;\n      var svg = root.selectWithoutDataPropagation(\"svg\");\n      var graph0 = svg.selectWithoutDataPropagation(\"g\");\n      var newEdge0 = createEdge.call(this, attributes);\n      var edgeData = extractAllElementsData(newEdge0);\n      var newEdge = graph0.append('g').data([edgeData]);\n      attributeElement.call(newEdge.node(), edgeData);\n\n      _updateEdge.call(this, newEdge, x1, y1, x2, y2, attributes, options);\n    }\n\n    this._drawnEdge = {\n      g: newEdge,\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      attributes: attributes\n    };\n    return this;\n  }\n\n  function updateDrawnEdge(x1, y1, x2, y2) {\n    var attributes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n    if (!this._drawnEdge) {\n      throw Error('No edge has been drawn');\n    }\n\n    var edge = this._drawnEdge.g;\n    attributes = Object.assign(this._drawnEdge.attributes, attributes);\n    this._drawnEdge.x1 = x1;\n    this._drawnEdge.y1 = y1;\n    this._drawnEdge.x2 = x2;\n    this._drawnEdge.y2 = y2;\n\n    if (edge.empty() && !(attributes.style && attributes.style.includes('invis'))) {\n      var root = this._selection;\n      var svg = root.selectWithoutDataPropagation(\"svg\");\n      var graph0 = svg.selectWithoutDataPropagation(\"g\");\n      var edge = graph0.append('g');\n      this._drawnEdge.g = edge;\n    }\n\n    if (!edge.empty()) {\n      _updateEdge.call(this, edge, x1, y1, x2, y2, attributes, options);\n    }\n\n    return this;\n  }\n\n  function _updateEdge(edge, x1, y1, x2, y2, attributes, options) {\n    var newEdge = createEdge.call(this, attributes);\n    var edgeData = extractAllElementsData(newEdge);\n    edge.data([edgeData]);\n    attributeElement.call(edge.node(), edgeData);\n\n    _moveEdge(edge, x1, y1, x2, y2, attributes, options);\n  }\n\n  function _moveEdge(edge, x1, y1, x2, y2, attributes, options) {\n    var shortening = options.shortening || 0;\n    var arrowHeadLength = 10;\n    var arrowHeadWidth = 7;\n    var margin = 0.1;\n    var arrowHeadPoints = [[0, -arrowHeadWidth / 2], [arrowHeadLength, 0], [0, arrowHeadWidth / 2], [0, -arrowHeadWidth / 2]];\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    var length = Math.sqrt(dx * dx + dy * dy);\n\n    if (length == 0) {\n      var cosA = 1;\n      var sinA = 0;\n    } else {\n      var cosA = dx / length;\n      var sinA = dy / length;\n    }\n\n    x2 = x1 + (length - shortening - arrowHeadLength - margin) * cosA;\n    y2 = y1 + (length - shortening - arrowHeadLength - margin) * sinA;\n\n    if (attributes.URL || attributes.tooltip) {\n      var a = edge.selectWithoutDataPropagation(\"g\").selectWithoutDataPropagation(\"a\");\n      var line = a.selectWithoutDataPropagation(\"path\");\n      var arrowHead = a.selectWithoutDataPropagation(\"polygon\");\n    } else {\n      var line = edge.selectWithoutDataPropagation(\"path\");\n      var arrowHead = edge.selectWithoutDataPropagation(\"polygon\");\n    }\n\n    var path1 = d3Path.path();\n    path1.moveTo(x1, y1);\n    path1.lineTo(x2, y2);\n    line.attr(\"d\", path1);\n    x2 = x1 + (length - shortening - arrowHeadLength) * cosA;\n    y2 = y1 + (length - shortening - arrowHeadLength) * sinA;\n\n    for (var i = 0; i < arrowHeadPoints.length; i++) {\n      var point = arrowHeadPoints[i];\n      arrowHeadPoints[i] = rotate(point[0], point[1], cosA, sinA);\n    }\n\n    for (var i = 0; i < arrowHeadPoints.length; i++) {\n      var point = arrowHeadPoints[i];\n      arrowHeadPoints[i] = [x2 + point[0], y2 + point[1]];\n    }\n\n    var allPoints = [];\n\n    for (var i = 0; i < arrowHeadPoints.length; i++) {\n      var point = arrowHeadPoints[i];\n      allPoints.push(point.join(','));\n    }\n\n    var pointsAttr = allPoints.join(' ');\n    arrowHead.attr(\"points\", pointsAttr);\n    return this;\n  }\n\n  function moveDrawnEdgeEndPoint(x2, y2) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!this._drawnEdge) {\n      throw Error('No edge has been drawn');\n    }\n\n    var edge = this._drawnEdge.g;\n    var x1 = this._drawnEdge.x1;\n    var y1 = this._drawnEdge.y1;\n    var attributes = this._drawnEdge.attributes;\n    this._drawnEdge.x2 = x2;\n    this._drawnEdge.y2 = y2;\n\n    _moveEdge(edge, x1, y1, x2, y2, attributes, options);\n\n    return this;\n  }\n\n  function removeDrawnEdge() {\n    if (!this._drawnEdge) {\n      return this;\n    }\n\n    var edge = this._drawnEdge.g;\n    edge.remove();\n    this._drawnEdge = null;\n    return this;\n  }\n\n  function insertDrawnEdge(name) {\n    if (!this._drawnEdge) {\n      throw Error('No edge has been drawn');\n    }\n\n    var edge = this._drawnEdge.g;\n\n    if (edge.empty()) {\n      return this;\n    }\n\n    this._drawnEdge.attributes;\n    var title = edge.selectWithoutDataPropagation(\"title\");\n    title.text(name);\n    var root = this._selection;\n    var svg = root.selectWithoutDataPropagation(\"svg\");\n    var graph0 = svg.selectWithoutDataPropagation(\"g\");\n    var graph0Datum = graph0.datum();\n\n    var edgeData = this._extractData(edge, graph0Datum.children.length, graph0.datum());\n\n    graph0Datum.children.push(edgeData);\n    insertAllElementsData(edge, edgeData);\n    this._drawnEdge = null;\n    return this;\n  }\n\n  function drawnEdgeSelection() {\n    if (this._drawnEdge) {\n      return this._drawnEdge.g;\n    } else {\n      return d3__namespace.select(null);\n    }\n  }\n\n  function createEdge(attributes) {\n    var attributesString = '';\n\n    for (var _i = 0, _Object$keys = Object.keys(attributes); _i < _Object$keys.length; _i++) {\n      var name = _Object$keys[_i];\n\n      if (attributes[name] != null) {\n        attributesString += ' \"' + name + '\"=\"' + attributes[name] + '\"';\n      }\n    }\n\n    var dotSrc = 'digraph {a -> b [' + attributesString + ']}';\n    var svgDoc = this.layoutSync(dotSrc, 'svg', 'dot');\n    var parser = new window.DOMParser();\n    var doc = parser.parseFromString(svgDoc, \"image/svg+xml\");\n    var newDoc = d3__namespace.select(document.createDocumentFragment()).append(function () {\n      return doc.documentElement;\n    });\n    var edge = newDoc.select('.edge');\n    return edge;\n  }\n\n  function drawNode(x, y, nodeId) {\n    var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    attributes = Object.assign({}, attributes);\n\n    if (attributes.style && attributes.style.includes('invis')) {\n      var newNode = d3__namespace.select(null);\n    } else {\n      var root = this._selection;\n      var svg = root.selectWithoutDataPropagation(\"svg\");\n      var graph0 = svg.selectWithoutDataPropagation(\"g\");\n      var newNode0 = createNode.call(this, nodeId, attributes);\n      var nodeData = extractAllElementsData(newNode0);\n      var newNode = graph0.append('g').data([nodeData]);\n      attributeElement.call(newNode.node(), nodeData);\n\n      _updateNode.call(this, newNode, x, y, nodeId, attributes, options);\n    }\n\n    this._drawnNode = {\n      g: newNode,\n      nodeId: nodeId,\n      x: x,\n      y: y,\n      attributes: attributes\n    };\n    return this;\n  }\n\n  function updateDrawnNode(x, y, nodeId) {\n    var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    if (!this._drawnNode) {\n      throw Error('No node has been drawn');\n    }\n\n    var node = this._drawnNode.g;\n\n    if (nodeId == null) {\n      nodeId = this._drawnNode.nodeId;\n    }\n\n    attributes = Object.assign(this._drawnNode.attributes, attributes);\n    this._drawnNode.nodeId = nodeId;\n    this._drawnNode.x = x;\n    this._drawnNode.y = y;\n\n    if (node.empty() && !(attributes.style && attributes.style.includes('invis'))) {\n      var root = this._selection;\n      var svg = root.selectWithoutDataPropagation(\"svg\");\n      var graph0 = svg.selectWithoutDataPropagation(\"g\");\n      var node = graph0.append('g');\n      this._drawnNode.g = node;\n    }\n\n    if (!node.empty()) {\n      _updateNode.call(this, node, x, y, nodeId, attributes, options);\n    }\n\n    return this;\n  }\n\n  function _updateNode(node, x, y, nodeId, attributes, options) {\n    var newNode = createNode.call(this, nodeId, attributes);\n    var nodeData = extractAllElementsData(newNode);\n    node.data([nodeData]);\n    attributeElement.call(node.node(), nodeData);\n\n    _moveNode(node, x, y, attributes);\n\n    return this;\n  }\n\n  function _moveNode(node, x, y, attributes, options) {\n    if (attributes.URL || attributes.tooltip) {\n      var subParent = node.selectWithoutDataPropagation(\"g\").selectWithoutDataPropagation(\"a\");\n    } else {\n      var subParent = node;\n    }\n\n    var svgElements = subParent.selectAll('ellipse,polygon,path,polyline');\n    var text = node.selectWithoutDataPropagation(\"text\");\n\n    if (svgElements.size() != 0) {\n      var bbox = svgElements.node().getBBox();\n      bbox.cx = bbox.x + bbox.width / 2;\n      bbox.cy = bbox.y + bbox.height / 2;\n    } else if (text.size() != 0) {\n      bbox = {\n        x: +text.attr('x'),\n        y: +text.attr('y'),\n        width: 0,\n        height: 0,\n        cx: +text.attr('x'),\n        cy: +text.attr('y')\n      };\n    }\n\n    svgElements.each(function (data, index) {\n      var svgElement = d3__namespace.select(this);\n\n      if (svgElement.attr(\"cx\")) {\n        svgElement.attr(\"cx\", roundTo2Decimals(x)).attr(\"cy\", roundTo2Decimals(y));\n      } else if (svgElement.attr(\"points\")) {\n        var pointsString = svgElement.attr('points').trim();\n        svgElement.attr(\"points\", translatePointsAttribute(pointsString, x - bbox.cx, y - bbox.cy));\n      } else {\n        var d = svgElement.attr('d');\n        svgElement.attr(\"d\", translateDAttribute(d, x - bbox.cx, y - bbox.cy));\n      }\n    });\n\n    if (text.size() != 0) {\n      text.attr(\"x\", roundTo2Decimals(+text.attr(\"x\") + x - bbox.cx)).attr(\"y\", roundTo2Decimals(+text.attr(\"y\") + y - bbox.cy));\n    }\n\n    return this;\n  }\n\n  function moveDrawnNode(x, y) {\n    if (!this._drawnNode) {\n      throw Error('No node has been drawn');\n    }\n\n    var node = this._drawnNode.g;\n    var attributes = this._drawnNode.attributes;\n    this._drawnNode.x = x;\n    this._drawnNode.y = y;\n\n    if (!node.empty()) {\n      _moveNode(node, x, y, attributes);\n    }\n\n    return this;\n  }\n\n  function removeDrawnNode() {\n    if (!this._drawnNode) {\n      return this;\n    }\n\n    var node = this._drawnNode.g;\n\n    if (!node.empty()) {\n      node.remove();\n    }\n\n    this._drawnNode = null;\n    return this;\n  }\n\n  function insertDrawnNode(nodeId) {\n    if (!this._drawnNode) {\n      throw Error('No node has been drawn');\n    }\n\n    if (nodeId == null) {\n      nodeId = this._drawnNode.nodeId;\n    }\n\n    var node = this._drawnNode.g;\n\n    if (node.empty()) {\n      return this;\n    }\n\n    var attributes = this._drawnNode.attributes;\n    var title = node.selectWithoutDataPropagation(\"title\");\n    title.text(nodeId);\n\n    if (attributes.URL || attributes.tooltip) {\n      var ga = node.selectWithoutDataPropagation(\"g\");\n      var a = ga.selectWithoutDataPropagation(\"a\");\n      a.selectWithoutDataPropagation('ellipse,polygon,path,polyline');\n      var text = a.selectWithoutDataPropagation('text');\n    } else {\n      node.selectWithoutDataPropagation('ellipse,polygon,path,polyline');\n      var text = node.selectWithoutDataPropagation('text');\n    }\n\n    text.text(attributes.label || nodeId);\n    var root = this._selection;\n    var svg = root.selectWithoutDataPropagation(\"svg\");\n    var graph0 = svg.selectWithoutDataPropagation(\"g\");\n    var graph0Datum = graph0.datum();\n\n    var nodeData = this._extractData(node, graph0Datum.children.length, graph0.datum());\n\n    graph0Datum.children.push(nodeData);\n    insertAllElementsData(node, nodeData);\n    this._drawnNode = null;\n    return this;\n  }\n\n  function drawnNodeSelection() {\n    if (this._drawnNode) {\n      return this._drawnNode.g;\n    } else {\n      return d3__namespace.select(null);\n    }\n  }\n\n  function createNode(nodeId, attributes) {\n    var attributesString = '';\n\n    for (var _i = 0, _Object$keys = Object.keys(attributes); _i < _Object$keys.length; _i++) {\n      var name = _Object$keys[_i];\n\n      if (attributes[name] != null) {\n        attributesString += ' \"' + name + '\"=\"' + attributes[name] + '\"';\n      }\n    }\n\n    var dotSrc = 'graph {\"' + nodeId + '\" [' + attributesString + ']}';\n    var svgDoc = this.layoutSync(dotSrc, 'svg', 'dot');\n    var parser = new window.DOMParser();\n    var doc = parser.parseFromString(svgDoc, \"image/svg+xml\");\n    var newDoc = d3__namespace.select(document.createDocumentFragment()).append(function () {\n      return doc.documentElement;\n    });\n    var node = newDoc.select('.node');\n    return node;\n  }\n  /* This file is excluded from coverage because the intrumented code\n   * translates \"self\" which gives a reference error.\n   */\n\n  /* istanbul ignore next */\n\n\n  function workerCodeBody(port) {\n    self.document = {}; // Workaround for \"ReferenceError: document is not defined\" in hpccWasm\n\n    port.addEventListener('message', function (event) {\n      var hpccWasm = self[\"@hpcc-js/wasm\"];\n\n      if (hpccWasm == undefined && event.data.vizURL) {\n        importScripts(event.data.vizURL);\n        hpccWasm = self[\"@hpcc-js/wasm\"];\n        hpccWasm.wasmFolder(event.data.vizURL.match(/.*\\//)[0]); // This is an alternative workaround where wasmFolder() is not needed\n        //                                    document = {currentScript: {src: event.data.vizURL}};\n      }\n\n      hpccWasm.graphviz.layout(event.data.dot, \"svg\", event.data.engine, event.data.options).then(function (svg) {\n        if (svg) {\n          port.postMessage({\n            type: \"done\",\n            svg: svg\n          });\n        } else if (event.data.vizURL) {\n          port.postMessage({\n            type: \"init\"\n          });\n        } else {\n          port.postMessage({\n            type: \"skip\"\n          });\n        }\n      })[\"catch\"](function (error) {\n        port.postMessage({\n          type: \"error\",\n          error: error.message\n        });\n      });\n    });\n  }\n  /* istanbul ignore next */\n\n\n  function workerCode() {\n    var port = self;\n    workerCodeBody(port);\n  }\n  /* istanbul ignore next */\n\n\n  function sharedWorkerCode() {\n    self.onconnect = function (e) {\n      var port = e.ports[0];\n      workerCodeBody(port);\n      port.start();\n    };\n  }\n\n  var _graphviz$prototype;\n\n  function Graphviz(selection, options) {\n    var _this = this;\n\n    this._options = {\n      useWorker: true,\n      useSharedWorker: false,\n      engine: 'dot',\n      keyMode: 'title',\n      fade: true,\n      tweenPaths: true,\n      tweenShapes: true,\n      convertEqualSidedPolygons: true,\n      tweenPrecision: 1,\n      growEnteringEdges: true,\n      zoom: true,\n      zoomScaleExtent: [0.1, 10],\n      zoomTranslateExtent: [[-Infinity, -Infinity], [+Infinity, +Infinity]],\n      width: null,\n      height: null,\n      scale: 1,\n      fit: false\n    };\n\n    if (options instanceof Object) {\n      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n        var option = _Object$keys[_i];\n        this._options[option] = options[option];\n      }\n    } else if (typeof options == 'boolean') {\n      this._options.useWorker = options;\n    }\n\n    var useWorker = this._options.useWorker;\n    var useSharedWorker = this._options.useSharedWorker;\n\n    if (typeof Worker == 'undefined') {\n      useWorker = false;\n    }\n\n    if (typeof SharedWorker == 'undefined') {\n      useSharedWorker = false;\n    }\n\n    if (useWorker || useSharedWorker) {\n      var scripts = d3__namespace.selectAll('script');\n      var vizScript = scripts.filter(function () {\n        return d3__namespace.select(this).attr('type') == 'javascript/worker' || d3__namespace.select(this).attr('src') && d3__namespace.select(this).attr('src').match(/.*\\/@hpcc-js\\/wasm/);\n      });\n\n      if (vizScript.size() == 0) {\n        console.warn('No script tag of type \"javascript/worker\" was found and \"useWorker\" is true. Not using web worker.');\n        useWorker = false;\n        useSharedWorker = false;\n      } else {\n        this._vizURL = vizScript.attr('src');\n\n        if (!this._vizURL) {\n          console.warn('No \"src\" attribute of was found on the \"javascript/worker\" script tag and \"useWorker\" is true. Not using web worker.');\n          useWorker = false;\n          useSharedWorker = false;\n        }\n      }\n    }\n\n    if (useSharedWorker) {\n      var url = 'data:application/javascript;base64,' + btoa(workerCodeBody.toString() + '(' + sharedWorkerCode.toString() + ')()');\n      this._worker = this._worker = new SharedWorker(url);\n      this._workerPort = this._worker.port;\n      this._workerPortClose = this._worker.port.close.bind(this._workerPort);\n\n      this._worker.port.start();\n\n      this._workerCallbacks = [];\n    } else if (useWorker) {\n      var blob = new Blob([workerCodeBody.toString() + '(' + workerCode.toString() + ')()']);\n      var blobURL = window.URL.createObjectURL(blob);\n      this._worker = new Worker(blobURL);\n      this._workerPort = this._worker;\n      this._workerPortClose = this._worker.terminate.bind(this._worker);\n      this._workerCallbacks = [];\n    }\n\n    wasm.graphvizVersion().then(function (version) {\n      _this._graphvizVersion = version;\n    }.bind(this));\n    this._selection = selection;\n    this._active = false;\n    this._busy = false;\n    this._jobs = [];\n    this._queue = [];\n    this._keyModes = new Set(['title', 'id', 'tag-index', 'index']);\n    this._images = [];\n    this._translation = undefined;\n    this._scale = undefined;\n    this._eventTypes = ['initEnd', 'start', 'layoutStart', 'layoutEnd', 'dataExtractEnd', 'dataProcessPass1End', 'dataProcessPass2End', 'dataProcessEnd', 'renderStart', 'renderEnd', 'transitionStart', 'transitionEnd', 'restoreEnd', 'end', 'zoom'];\n    this._dispatch = d3Dispatch.dispatch.apply(void 0, _toConsumableArray(this._eventTypes));\n    initViz.call(this);\n    selection.node().__graphviz__ = this;\n  }\n\n  function graphviz(selector, options) {\n    var g = d3__namespace.select(selector).graphviz(options);\n    return g;\n  }\n\n  Graphviz.prototype = graphviz.prototype = (_graphviz$prototype = {\n    constructor: Graphviz,\n    engine: engine,\n    addImage: images,\n    keyMode: keyMode,\n    fade: fade,\n    tweenPaths: tweenPaths,\n    tweenShapes: tweenShapes,\n    convertEqualSidedPolygons: convertEqualSidedPolygons,\n    tweenPrecision: tweenPrecision,\n    growEnteringEdges: growEnteringEdges,\n    zoom: zoom,\n    resetZoom: resetZoom,\n    zoomBehavior: zoomBehavior,\n    zoomSelection: zoomSelection,\n    zoomScaleExtent: zoomScaleExtent,\n    zoomTranslateExtent: zoomTranslateExtent,\n    render: render,\n    layout: layout,\n    dot: dot,\n    data: data,\n    renderDot: renderDot,\n    transition: transition,\n    active: active,\n    options: options,\n    width: width,\n    height: height,\n    scale: scale,\n    fit: fit,\n    attributer: attributer,\n    on: on,\n    onerror: onerror,\n    logEvents: logEvents,\n    destroy: destroy,\n    drawEdge: drawEdge,\n    updateDrawnEdge: updateDrawnEdge,\n    moveDrawnEdgeEndPoint: moveDrawnEdgeEndPoint,\n    insertDrawnEdge: insertDrawnEdge,\n    removeDrawnEdge: removeDrawnEdge\n  }, _defineProperty(_graphviz$prototype, \"removeDrawnEdge\", removeDrawnEdge), _defineProperty(_graphviz$prototype, \"drawnEdgeSelection\", drawnEdgeSelection), _defineProperty(_graphviz$prototype, \"drawnEdgeSelection\", drawnEdgeSelection), _defineProperty(_graphviz$prototype, \"drawNode\", drawNode), _defineProperty(_graphviz$prototype, \"updateDrawnNode\", updateDrawnNode), _defineProperty(_graphviz$prototype, \"moveDrawnNode\", moveDrawnNode), _defineProperty(_graphviz$prototype, \"insertDrawnNode\", insertDrawnNode), _defineProperty(_graphviz$prototype, \"removeDrawnNode\", removeDrawnNode), _defineProperty(_graphviz$prototype, \"removeDrawnNode\", removeDrawnNode), _defineProperty(_graphviz$prototype, \"drawnNodeSelection\", drawnNodeSelection), _defineProperty(_graphviz$prototype, \"drawnNodeSelection\", drawnNodeSelection), _defineProperty(_graphviz$prototype, \"graphvizVersion\", graphvizVersion), _graphviz$prototype);\n\n  function selection_graphviz(options) {\n    var g = this.node().__graphviz__;\n\n    if (g) {\n      g.options(options); // Ensure a possible new initEnd event handler is attached before calling it\n\n      d3Timer.timeout(function () {\n        g._dispatch.call(\"initEnd\", this);\n      }.bind(this), 0);\n    } else {\n      g = new Graphviz(this, options);\n    }\n\n    return g;\n  }\n\n  function selection_selectWithoutDataPropagation(name) {\n    return d3__namespace.select(this.size() > 0 ? this.node().querySelector(name) : null);\n  }\n\n  d3.selection.prototype.graphviz = selection_graphviz;\n  d3.selection.prototype.selectWithoutDataPropagation = selection_selectWithoutDataPropagation;\n  exports.graphviz = graphviz;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../src/element.js","../src/utils.js","../src/zoom.js","../src/tweening.js","../src/data.js","../src/render.js","../src/graphvizVersion.js","../src/svg.js","../src/dot.js","../src/renderDot.js","../src/transition.js","../src/options.js","../src/width.js","../src/height.js","../src/scale.js","../src/fit.js","../src/attributer.js","../src/engine.js","../src/images.js","../src/keyMode.js","../src/fade.js","../src/tweenPaths.js","../src/tweenShapes.js","../src/convertEqualSidedPolygons.js","../src/tweenPrecision.js","../src/growEnteringEdges.js","../src/on.js","../src/onerror.js","../src/logEvents.js","../src/destroy.js","../src/geometry.js","../src/drawEdge.js","../src/drawNode.js","../src/workerCode.js","../src/graphviz.js","../src/selection/graphviz.js","../src/selection/selectWithoutDataPropagation.js","../src/selection/index.js"],"names":["datum","tag","element","attributes","i","attribute","name","value","transform","matrix","x","y","f","cy","points","p","xmin","Math","xmax","ymin","ymax","bbox","width","height","d","extractElementData","children","d3","childData","extractAllElementsData","data","document","elementNode","createElement","attributeName","Object","attributeValue","parent","newElementNode","createElementWithAttributes","newElement","insertElementData","insertAllElementsData","childrenEnter","childrenExit","childTagIndexes","childTag","childIndex","attributeElement","index","currentAttributes","currentAttribute","namespaceURIParts","namespace","insertChildren","createZoomBehavior","graphvizInstance","g","svg","event","root","zoomBehavior","zoom","interpolate","translateZoomBehaviorTransform","zoomTransform","oldTranslation","oldScale","newTranslation","selection","newScale","t","getTranslatedZoomTransform","zoomIdentity","pointInterpolators","path0","path1","n0","n1","distances","dt","precisionIsRelative","precision","p0","p1","isEdgeElementParent","e","timeout","transition","_render","transitionInstance","fade","tweenPaths","tweenShapes","convertEqualSidedPolygons","growEnteringEdges","attributer","childElementsEnter","childEnter","options","convertShape","convertPrevShape","prevData","prevPoints","nPrevPoints","nPoints","prevPathData","pathElement","replaceElement","newPathData","elementTransition","growThisPath","totalLength","moveThisPolygon","isEdgeElement","edgePath","p2","angle1","angle","tweenThisPath","pathTween","onEnd","node","interpolateTransformSvg","jobs","callback","originalData","newData","shallowCopyObject","originalAttributes","newAttributes","newPointsString","guideData","pointsString","pointStrings","normPoints","xy","x0","y0","x1","y1","dx","dy","x2","newPointStrings","cx","rx","ry","sx","sy","l","cosA","sinA","y2","roundTo2Decimals","commands","arr","graphviz","graphvizSync","graphviz1","vizURL","window","postMessage","dot","engine","vizOptions","svgDoc","type","error","message","_worker","images","layoutDone","keyMode","tweenPrecision","tweenPrecisionIsRelative","dictionary","prevDictionary","nodeDictionary","prevNodeDictionary","title","id","parentData","prevDatum","convertToPathData","attribute_d","oldNode","pathTweenPoints","setKey","setId","addToDictionary","calculateAlternativeShapeData","calculatePathTweenPoints","postProcessDataPass1Local","child","nodeId","path","getEdgeTitle","nodeIds","startNodeId","startNode","prevStartNode","j","startShapes","startShape","prevStartShapes","prevStartShape","addToNodeDictionary","extractGrowingEdgesData","postProcessDataPass2Global","newDoc","parser","doc","newSvg","job","d3_active","option","Error","t0","Date","times","eventTypes","maxEventTypeLength","eventType","enable","seqNo","string","format","expectedDelay","expectedDuration","actualDelay","actualDuration","console","newEdge","graph0","newEdge0","createEdge","edgeData","_updateEdge","edge","_moveEdge","shortening","arrowHeadLength","arrowHeadWidth","margin","arrowHeadPoints","length","a","line","arrowHead","d3_path","point","rotate","allPoints","pointsAttr","graph0Datum","attributesString","dotSrc","newNode","newNode0","createNode","nodeData","_updateNode","_moveNode","subParent","svgElements","text","svgElement","translatePointsAttribute","translateDAttribute","ga","self","port","hpccWasm","importScripts","workerCodeBody","useWorker","useSharedWorker","zoomScaleExtent","zoomTranslateExtent","scale","fit","scripts","vizScript","url","btoa","sharedWorkerCode","blob","workerCode","blobURL","hpccWasmGraphvizVersion","dispatch","initViz","Graphviz","constructor","addImage","resetZoom","zoomSelection","render","layout","renderDot","active","on","onerror","logEvents","destroy","drawEdge","updateDrawnEdge","moveDrawnEdgeEndPoint","insertDrawnEdge","removeDrawnEdge"],"mappings":"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","sourcesContent":["import * as d3 from \"d3-selection\";\n\nexport function extractElementData(element) {\n\n    var datum = {};\n    var tag = element.node().nodeName;\n    datum.tag = tag;\n    if (tag == '#text') {\n        datum.text = element.text();\n    } else if (tag == '#comment') {\n        datum.comment = element.text();\n    }\n    datum.attributes = {};\n    var attributes = element.node().attributes;\n    if (attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            var name = attribute.name;\n            var value = attribute.value;\n            datum.attributes[name] = value;\n        }\n    }\n    var transform = element.node().transform;\n    if (transform && transform.baseVal.numberOfItems != 0) {\n        var matrix = transform.baseVal.consolidate().matrix;\n        datum.translation = {x: matrix.e, y: matrix.f};\n        datum.scale = matrix.a;\n    }\n    if (tag == 'ellipse') {\n        datum.center = {\n            x: datum.attributes.cx,\n            y: datum.attributes.cy,\n        };\n    }\n    if (tag == 'polygon') {\n        var points = element.attr('points').split(' ');\n        var x = points.map(function(p) {return p.split(',')[0]});\n        var y = points.map(function(p) {return p.split(',')[1]});\n        var xmin = Math.min.apply(null, x);\n        var xmax = Math.max.apply(null, x);\n        var ymin = Math.min.apply(null, y);\n        var ymax = Math.max.apply(null, y);\n        var bbox = {\n            x: xmin,\n            y: ymin,\n            width: xmax - xmin,\n            height: ymax - ymin,\n        };\n        datum.bbox = bbox;\n        datum.center = {\n            x: (xmin + xmax) / 2,\n            y: (ymin + ymax) / 2,\n        };\n    }\n    if (tag == 'path') {\n        var d = element.attr('d');\n        var points = d.split(/[A-Z ]/);\n        points.shift();\n        var x = points.map(function(p) {return +p.split(',')[0]});\n        var y = points.map(function(p) {return +p.split(',')[1]});\n        var xmin = Math.min.apply(null, x);\n        var xmax = Math.max.apply(null, x);\n        var ymin = Math.min.apply(null, y);\n        var ymax = Math.max.apply(null, y);\n        var bbox = {\n            x: xmin,\n            y: ymin,\n            width: xmax - xmin,\n            height: ymax - ymin,\n        };\n        datum.bbox = bbox;\n        datum.center = {\n            x: (xmin + xmax) / 2,\n            y: (ymin + ymax) / 2,\n        };\n        datum.totalLength = element.node().getTotalLength();\n    }\n    if (tag == 'text') {\n        datum.center = {\n            x: element.attr('x'),\n            y: element.attr('y'),\n        };\n    }\n    if (tag == '#text') {\n        datum.text = element.text();\n    } else if (tag == '#comment') {\n        datum.comment = element.text();\n    }\n    return datum\n}\n\nexport function extractAllElementsData(element) {\n\n    var datum = extractElementData(element);\n    datum.children = [];\n    var children = d3.selectAll(element.node().childNodes);\n    children.each(function () {\n        var childData = extractAllElementsData(d3.select(this));\n        childData.parent = datum;\n        datum.children.push(childData);\n    });\n    return datum;\n}\n\nexport function createElement(data) {\n\n    if (data.tag == '#text') {\n        return document.createTextNode(\"\");\n    } else if (data.tag == '#comment') {\n        return document.createComment(data.comment);\n    } else {\n        return document.createElementNS('http://www.w3.org/2000/svg', data.tag);\n    }\n}\n\nexport function createElementWithAttributes(data) {\n\n    var elementNode = createElement(data);\n    var element = d3.select(elementNode);\n    var attributes = data.attributes;\n    for (var attributeName of Object.keys(attributes)) {\n        var attributeValue = attributes[attributeName];\n        element.attr(attributeName, attributeValue);\n    }\n    return elementNode;\n}\n\nexport function replaceElement(element, data) {\n    var parent = d3.select(element.node().parentNode);\n    var newElementNode = createElementWithAttributes(data);\n    var newElement = parent.insert(function () {\n        return newElementNode;\n    }, function () {\n        return element.node();\n    });\n    element.remove();\n    return newElement;\n}\n\nexport function insertElementData(element, datum) {\n    element.datum(datum);\n    element.data([datum], function (d) {\n        return d.key;\n    });\n}\n\nexport function insertAllElementsData(element, datum) {\n    insertElementData(element, datum);\n    var children = d3.selectAll(element.node().childNodes);\n    children.each(function (d, i) {\n        insertAllElementsData(d3.select(this), datum.children[i]);\n    });\n}\n\nfunction insertChildren(element, index) {\n    var children = element.selectAll(function () {\n        return element.node().childNodes;\n    });\n\n    children = children\n      .data(function (d) {\n          return d.children;\n      }, function (d) {\n        return d.tag + '-' + index;\n      });\n    var childrenEnter = children\n      .enter()\n      .append(function(d) {\n          return createElement(d);\n      });\n\n    var childrenExit = children\n      .exit();\n    childrenExit = childrenExit\n        .remove()\n    children = childrenEnter\n        .merge(children);\n    var childTagIndexes = {};\n    children.each(function(childData) {\n        var childTag = childData.tag;\n        if (childTagIndexes[childTag] == null) {\n          childTagIndexes[childTag] = 0;\n        }\n        var childIndex = childTagIndexes[childTag]++;\n        attributeElement.call(this, childData, childIndex);\n    });\n}\n\nexport function attributeElement(data, index=0) {\n    var element = d3.select(this);\n    var tag = data.tag;\n    var attributes = data.attributes;\n    var currentAttributes = element.node().attributes;\n    if (currentAttributes) {\n        for (var i = 0; i < currentAttributes.length; i++) {\n            var currentAttribute = currentAttributes[i];\n            var name = currentAttribute.name;\n            if (name.split(':')[0] != 'xmlns' && currentAttribute.namespaceURI) {\n                var namespaceURIParts = currentAttribute.namespaceURI.split('/');\n                var namespace = namespaceURIParts[namespaceURIParts.length - 1];\n                name = namespace + ':' + name;\n            }\n            if (!(name in attributes)) {\n                attributes[name] = null;\n            }\n        }\n    }\n    for (var attributeName of Object.keys(attributes)) {\n        element\n            .attr(attributeName, attributes[attributeName]);\n    }\n    if (data.text) {\n        element\n            .text(data.text);\n    }\n    insertChildren(element, index);\n}\n","export function shallowCopyObject(obj) {\n    return Object.assign({}, obj);\n}\n\nexport function roundTo2Decimals(x) {\n    return Math.round(x * 100.0) / 100.0\n}\n","import * as d3 from \"d3-selection\";\nimport {zoom, zoomTransform, zoomIdentity} from \"d3-zoom\";\nimport {interpolate} from \"d3-interpolate\";\n\nexport default function(enable) {\n\n    this._options.zoom = enable;\n\n    if (this._options.zoom && !this._zoomBehavior) {\n        createZoomBehavior.call(this);\n    } else if (!this._options.zoom && this._zoomBehavior) {\n        this._zoomSelection.on(\".zoom\", null);\n        this._zoomBehavior = null;\n    }\n\n    return this;\n}\n\nexport function createZoomBehavior() {\n\n    var graphvizInstance = this;\n    function zoomed(event) {\n        var g = d3.select(svg.node().querySelector(\"g\"));\n        g.attr('transform', event.transform);\n        graphvizInstance._dispatch.call('zoom', graphvizInstance);\n    }\n\n    var root = this._selection;\n    var svg = d3.select(root.node().querySelector(\"svg\"));\n    if (svg.size() == 0) {\n        return this;\n    }\n    this._zoomSelection = svg;\n    var zoomBehavior = zoom()\n        .scaleExtent(this._options.zoomScaleExtent)\n        .translateExtent(this._options.zoomTranslateExtent)\n        .interpolate(interpolate)\n        .on(\"zoom\", zoomed);\n    this._zoomBehavior = zoomBehavior;\n    var g = d3.select(svg.node().querySelector(\"g\"));\n    svg.call(zoomBehavior);\n    if (!this._active) {\n        translateZoomBehaviorTransform.call(this, g);\n    }\n    this._originalTransform = zoomTransform(svg.node());\n\n    return this;\n};\n\nexport function getTranslatedZoomTransform(selection) {\n\n    // Get the current zoom transform for the top level svg and\n    // translate it uniformly with the given selection, using the\n    // difference between the translation specified in the selection's\n    // data and it's saved previous translation. The selection is\n    // normally the top level g element of the graph.\n    var oldTranslation = this._translation;\n    var oldScale = this._scale;\n    var newTranslation = selection.datum().translation;\n    var newScale = selection.datum().scale;\n    var t = zoomTransform(this._zoomSelection.node());\n    if (oldTranslation) {\n        t = t.scale(1 / oldScale);\n        t = t.translate(-oldTranslation.x, -oldTranslation.y);\n    }\n    t = t.translate(newTranslation.x, newTranslation.y);\n    t = t.scale(newScale);\n    return t;\n}\n\nexport function translateZoomBehaviorTransform(selection) {\n\n    // Translate the current zoom transform for the top level svg\n    // uniformly with the given selection, using the difference\n    // between the translation specified in the selection's data and\n    // it's saved previous translation. The selection is normally the\n    // top level g element of the graph.\n    this._zoomBehavior.transform(this._zoomSelection, getTranslatedZoomTransform.call(this, selection));\n\n    // Save the selections's new translation and scale.\n    this._translation = selection.datum().translation;\n    this._scale = selection.datum().scale;\n\n    // Set the original zoom transform to the translation and scale specified in\n    // the selection's data.\n    this._originalTransform = zoomIdentity.translate(selection.datum().translation.x, selection.datum().translation.y).scale(selection.datum().scale);\n}\n\nexport function resetZoom(transition) {\n\n    // Reset the zoom transform to the original zoom transform.\n    var selection = this._zoomSelection;\n    if (transition) {\n        selection = selection\n            .transition(transition);\n    }\n    selection\n        .call(this._zoomBehavior.transform, this._originalTransform);\n\n    return this;\n}\n\nexport function zoomScaleExtent(extent) {\n\n    this._options.zoomScaleExtent = extent;\n\n    return this;\n}\n\nexport function zoomTranslateExtent(extent) {\n\n    this._options.zoomTranslateExtent = extent;\n\n    return this;\n}\n\nexport function zoomBehavior() {\n  return this._zoomBehavior || null;\n}\n\nexport function zoomSelection() {\n  return this._zoomSelection || null;\n}\n","import {interpolate} from \"d3-interpolate\";\n\nexport function pathTween(points, d1) {\n    return function() {\n        const pointInterpolators = points.map(function(p) {\n            return interpolate([p[0][0], p[0][1]], [p[1][0], p[1][1]]);\n        });\n        return function(t) {\n            return t < 1 ? \"M\" + pointInterpolators.map(function(p) { return p(t); }).join(\"L\") : d1;\n        };\n    };\n}\n\nexport function pathTweenPoints(node, d1, precision, precisionIsRelative) {\n    const path0 = node;\n    const path1 = path0.cloneNode();\n    const n0 = path0.getTotalLength();\n    const n1 = (path1.setAttribute(\"d\", d1), path1).getTotalLength();\n\n    // Uniform sampling of distance based on specified precision.\n    const distances = [0];\n    let i = 0;\n    const dt = precisionIsRelative ? precision : precision / Math.max(n0, n1);\n    while ((i += dt) < 1) {\n      distances.push(i);\n    }\n    distances.push(1);\n\n    // Compute point-interpolators at each distance.\n    const points = distances.map(function(t) {\n        const p0 = path0.getPointAtLength(t * n0);\n        const p1 = path1.getPointAtLength(t * n1);\n        return ([[p0.x, p0.y], [p1.x, p1.y]]);\n    });\n    return points;\n}\n","export default function() {\n    return this._data || null;\n}\n\nexport function isEdgeElementParent(datum) {\n    return (datum.attributes.class == 'edge' || (\n        datum.tag == 'a' &&\n            datum.parent.tag == 'g' &&\n            datum.parent.parent.attributes.class == 'edge'\n    ));\n}\n\nexport function isEdgeElement(datum) {\n    return datum.parent && isEdgeElementParent(datum.parent);\n}\n\nexport function getEdgeGroup(datum) {\n    if (datum.parent.attributes.class == 'edge') {\n        return datum.parent;\n    } else { // datum.parent.tag == 'g' && datum.parent.parent.tag == 'g' && datum.parent.parent.parent.attributes.class == 'edge'\n        return datum.parent.parent.parent;\n    }\n}\n\nexport function getEdgeTitle(datum) {\n    return getEdgeGroup(datum).children.find(function (e) {\n        return e.tag == 'title';\n    });\n}\n","import * as d3 from \"d3-selection\";\nimport {transition} from \"d3-transition\";\nimport {timeout} from \"d3-timer\";\nimport {interpolateTransformSvg} from \"d3-interpolate\";\nimport {zoomTransform} from \"d3-zoom\";\nimport {createElement, extractElementData, replaceElement} from \"./element\";\nimport {shallowCopyObject} from \"./utils\";\nimport {createZoomBehavior, getTranslatedZoomTransform, translateZoomBehaviorTransform} from \"./zoom\";\nimport {pathTween} from \"./tweening\";\nimport {isEdgeElement} from \"./data\";\nimport {isEdgeElementParent} from \"./data\";\n\nexport default function(callback) {\n\n    if (this._busy) {\n        this._queue.push(this.render.bind(this, callback));\n        return this;\n    }\n    this._dispatch.call('renderStart', this);\n\n    if (this._transitionFactory) {\n        timeout(function () { // Decouple from time spent. See https://github.com/d3/d3-timer/issues/27\n            this._transition = transition(this._transitionFactory());\n            _render.call(this, callback);\n        }.bind(this), 0);\n    } else {\n        _render.call(this, callback);\n    }\n    return this;\n}\n\nfunction _render(callback) {\n\n    var transitionInstance = this._transition;\n    var fade = this._options.fade && transitionInstance != null;\n    var tweenPaths = this._options.tweenPaths;\n    var tweenShapes = this._options.tweenShapes;\n    var convertEqualSidedPolygons = this._options.convertEqualSidedPolygons;\n    var growEnteringEdges = this._options.growEnteringEdges && transitionInstance != null;\n    var attributer = this._attributer;\n    var graphvizInstance = this;\n\n    function insertChildren(element) {\n        var children = element.selectAll(function () {\n            return element.node().childNodes;\n        });\n\n        children = children\n          .data(function (d) {\n              return d.children;\n          }, function (d) {\n              return d.key;\n          });\n        var childrenEnter = children\n          .enter()\n          .append(function(d) {\n              var element = createElement(d);\n              if (d.tag == '#text' && fade) {\n                  element.nodeValue = d.text;\n              }\n              return element;\n          });\n\n        if (fade || (growEnteringEdges && isEdgeElementParent(element.datum()))) {\n            var childElementsEnter = childrenEnter\n                .filter(function(d) {\n                    return d.tag[0] == '#' ? null : this;\n                })\n                .each(function (d) {\n                    var childEnter = d3.select(this);\n                    for (var attributeName of Object.keys(d.attributes)) {\n                        var attributeValue = d.attributes[attributeName];\n                        childEnter\n                            .attr(attributeName, attributeValue);\n                    }\n                });\n            childElementsEnter\n              .filter(function(d) {\n                    return d.tag == 'svg' || d.tag == 'g' ? null : this;\n              })\n                .style(\"opacity\", 0.0);\n        }\n        var childrenExit = children\n          .exit();\n        if (attributer) {\n            childrenExit.each(attributer);\n        }\n        if (transitionInstance) {\n            childrenExit = childrenExit\n                .transition(transitionInstance);\n            if (fade) {\n                childrenExit\n                  .filter(function(d) {\n                      return d.tag[0] == '#' ? null : this;\n                  })\n                    .style(\"opacity\", 0.0);\n            }\n        }\n        childrenExit = childrenExit\n            .remove()\n        children = childrenEnter\n            .merge(children);\n        children.each(attributeElement);\n    }\n\n    function attributeElement(data) {\n        var element = d3.select(this);\n        if (data.tag == \"svg\") {\n            var options = graphvizInstance._options;\n            if (options.width != null || options.height != null) {\n                var width = options.width;\n                var height = options.height;\n                if (width == null) {\n                    width = data.attributes.width.replace('pt', '') * 4 / 3;\n                } else {\n                    element\n                        .attr(\"width\", width);\n                    data.attributes.width = width;\n                }\n                if (height == null) {\n                    height = data.attributes.height.replace('pt', '') * 4 / 3;\n                } else {\n                    element\n                        .attr(\"height\", height);\n                    data.attributes.height = height;\n                }\n                if (!options.fit) {\n                    element\n                        .attr(\"viewBox\", `0 0 ${width * 3 / 4 / options.scale} ${height * 3 / 4 / options.scale}`);\n                    data.attributes.viewBox = `0 0 ${width * 3 / 4 / options.scale} ${height * 3 / 4 / options.scale}`;\n                }\n            }\n            if (options.scale != 1 && (options.fit || (options.width == null && options.height == null))) {\n                width = data.attributes.viewBox.split(' ')[2];\n                height = data.attributes.viewBox.split(' ')[3];\n                element\n                    .attr(\"viewBox\", `0 0 ${width / options.scale} ${height / options.scale}`);\n                data.attributes.viewBox = `0 0 ${width / options.scale} ${height / options.scale}`;\n            }\n        }\n        if (attributer) {\n            element.each(attributer);\n        }\n        var tag = data.tag;\n        var attributes = data.attributes;\n        var currentAttributes = element.node().attributes;\n        if (currentAttributes) {\n            for (var i = 0; i < currentAttributes.length; i++) {\n                var currentAttribute = currentAttributes[i];\n                var name = currentAttribute.name;\n                if (name.split(':')[0] != 'xmlns' && currentAttribute.namespaceURI) {\n                    var namespaceURIParts = currentAttribute.namespaceURI.split('/');\n                    var namespace = namespaceURIParts[namespaceURIParts.length - 1];\n                    name = namespace + ':' + name;\n                }\n                if (!(name in attributes)) {\n                    attributes[name] = null;\n                }\n            }\n        }\n        var convertShape = false;\n        var convertPrevShape = false;\n        if (tweenShapes && transitionInstance) {\n            if ((this.nodeName == 'polygon' || this.nodeName == 'ellipse') && data.alternativeOld) {\n                convertPrevShape = true;\n            }\n            if ((tag == 'polygon' || tag == 'ellipse') && data.alternativeNew) {\n                convertShape = true;\n            }\n            if (this.nodeName == 'polygon' && tag == 'polygon' && data.alternativeOld) {\n                var prevData = extractElementData(element);\n                var prevPoints = prevData.attributes.points;\n                if (!convertEqualSidedPolygons) {\n                    var nPrevPoints = prevPoints.split(' ').length;\n                    var points = data.attributes.points;\n                    var nPoints = points.split(' ').length;\n                    if (nPoints == nPrevPoints) {\n                        convertShape = false;\n                        convertPrevShape = false;\n                    }\n                }\n            }\n            if (convertPrevShape) {\n                var prevPathData = data.alternativeOld;\n                var pathElement = replaceElement(element, prevPathData);\n                pathElement.data([data], function () {\n                    return data.key;\n                });\n                element = pathElement;\n            }\n            if (convertShape) {\n                var newPathData = data.alternativeNew;\n                tag = 'path';\n                attributes = newPathData.attributes;\n            }\n        }\n        var elementTransition = element;\n        if (transitionInstance) {\n            elementTransition = elementTransition\n                .transition(transitionInstance);\n            if (fade) {\n                elementTransition\n                  .filter(function(d) {\n                      return d.tag[0] == '#' ? null : this;\n                  })\n                    .style(\"opacity\", 1.0);\n            }\n            elementTransition\n              .filter(function(d) {\n                  return d.tag[0] == '#' ? null : this;\n              })\n                .on(\"end\", function(d) {\n                    d3.select(this)\n                        .attr('style', (d && d.attributes && d.attributes.style) || null);\n                });\n        }\n        var growThisPath = growEnteringEdges && tag == 'path' && data.offset;\n        if (growThisPath) {\n            var totalLength = data.totalLength;\n            element\n                .attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n                .attr(\"stroke-dashoffset\", totalLength)\n                .attr('transform', 'translate(' + data.offset.x + ',' + data.offset.y + ')');\n            attributes[\"stroke-dashoffset\"] = 0;\n            attributes['transform'] = 'translate(0,0)';\n            elementTransition\n                .attr(\"stroke-dashoffset\", attributes[\"stroke-dashoffset\"])\n                .attr('transform', attributes['transform'])\n                .on(\"start\", function() {\n                    d3.select(this)\n                        .style('opacity', null);\n                })\n                .on(\"end\", function() {\n                    d3.select(this)\n                        .attr('stroke-dashoffset', null)\n                        .attr('stroke-dasharray', null)\n                        .attr('transform', null);\n                });\n        }\n        var moveThisPolygon = growEnteringEdges && tag == 'polygon' && isEdgeElement(data) && data.offset && data.parent.children[3].tag == 'path';\n        if (moveThisPolygon) {\n            var edgePath = d3.select(element.node().parentNode.querySelector(\"path\"));\n            var p0 = edgePath.node().getPointAtLength(0);\n            var p1 = edgePath.node().getPointAtLength(data.totalLength);\n            var p2 = edgePath.node().getPointAtLength(data.totalLength - 1);\n            var angle1 = Math.atan2(p1.y - p2.y, p1.x - p2.x) * 180 / Math.PI;\n            var x = p0.x - p1.x + data.offset.x;\n            var y = p0.y - p1.y + data.offset.y;\n            element\n                .attr('transform', 'translate(' + x + ',' + y + ')');\n            elementTransition\n                .attrTween(\"transform\", function () {\n                    return function (t) {\n                        var p = edgePath.node().getPointAtLength(data.totalLength * t);\n                        var p2 = edgePath.node().getPointAtLength(data.totalLength * t + 1);\n                        var angle = Math.atan2(p2.y - p.y, p2.x - p.x) * 180 / Math.PI - angle1;\n                        x = p.x - p1.x + data.offset.x * (1 - t);\n                        y = p.y - p1.y + data.offset.y * (1 - t);\n                        return 'translate(' + x + ',' + y + ') rotate(' + angle + ' ' + p1.x + ' ' + p1.y + ')';\n                    }\n                })\n                .on(\"start\", function() {\n                    d3.select(this)\n                        .style('opacity', null);\n                })\n                .on(\"end\", function() {\n                    d3.select(this).attr('transform', null);\n                });\n        }\n        var tweenThisPath = tweenPaths && transitionInstance && tag == 'path' && element.attr('d') != null;\n        for (var attributeName of Object.keys(attributes)) {\n            var attributeValue = attributes[attributeName];\n            if (tweenThisPath && attributeName == 'd') {\n                var points = (data.alternativeOld || data).points;\n                if (points) {\n                    elementTransition\n                        .attrTween(\"d\", pathTween(points, attributeValue));\n                }\n            } else {\n                if (attributeName == 'transform' && data.translation) {\n                    if (transitionInstance) {\n                        var onEnd = elementTransition.on(\"end\");\n                        elementTransition\n                            .on(\"start\", function () {\n                                if (graphvizInstance._zoomBehavior) {\n                                    // Update the transform to transition to, just before the transition starts\n                                    // in order to catch changes between the transition scheduling to its start.\n                                    elementTransition\n                                        .tween(\"attr.transform\", function() {\n                                            var node = this;\n                                            return function(t) {\n                                                node.setAttribute(\"transform\", interpolateTransformSvg(zoomTransform(graphvizInstance._zoomSelection.node()).toString(), getTranslatedZoomTransform.call(graphvizInstance, element).toString())(t));\n                                            };\n                                        });\n                                }\n                            })\n                            .on(\"end\", function () {\n                                onEnd.call(this);\n                                // Update the zoom transform to the new translated transform\n                                if (graphvizInstance._zoomBehavior) {\n                                    translateZoomBehaviorTransform.call(graphvizInstance, element);\n                                }\n                            })\n                    } else {\n                        if (graphvizInstance._zoomBehavior) {\n                            // Update the transform attribute to set with the current pan translation\n                            translateZoomBehaviorTransform.call(graphvizInstance, element);\n                            attributeValue = getTranslatedZoomTransform.call(graphvizInstance, element).toString();\n                        }\n                    }\n                }\n                elementTransition\n                    .attr(attributeName, attributeValue);\n            }\n        }\n        if (convertShape) {\n            elementTransition\n                .on(\"end\", function (d, i, nodes) {\n                    pathElement = d3.select(this);\n                    var newElement = replaceElement(pathElement, d);\n                    newElement.data([d], function () {\n                        return d.key;\n                    });\n                })\n        }\n        if (data.text) {\n            elementTransition\n                .text(data.text);\n        }\n        insertChildren(element);\n    }\n\n    var root = this._selection;\n\n    if (transitionInstance != null) {\n        // Ensure original SVG shape elements are restored after transition before rendering new graph\n        var jobs = this._jobs;\n        if (graphvizInstance._active) {\n            jobs.push(null);\n            return this;\n        } else {\n            root\n              .transition(transitionInstance)\n              .transition()\n                .duration(0)\n                .on(\"end\" , function () {\n                    graphvizInstance._active = false;\n                    if (jobs.length != 0) {\n                        jobs.shift();\n                        graphvizInstance.render();\n                    }\n                });\n            this._active = true;\n        }\n    }\n\n    if (transitionInstance != null) {\n        root\n          .transition(transitionInstance)\n            .on(\"start\" , function () {\n                graphvizInstance._dispatch.call('transitionStart', graphvizInstance);\n            })\n            .on(\"end\" , function () {\n                graphvizInstance._dispatch.call('transitionEnd', graphvizInstance);\n            })\n          .transition()\n            .duration(0)\n            .on(\"start\" , function () {\n                graphvizInstance._dispatch.call('restoreEnd', graphvizInstance);\n                graphvizInstance._dispatch.call('end', graphvizInstance);\n                if (callback) {\n                    callback.call(graphvizInstance);\n                }\n            });\n    }\n\n    var data = this._data;\n\n    var svg = root\n      .selectAll(\"svg\")\n        .data([data], function (d) {return d.key});\n    svg = svg\n      .enter()\n      .append(\"svg\")\n      .merge(svg);\n\n    attributeElement.call(svg.node(), data);\n\n\n    if (this._options.zoom && !this._zoomBehavior) {\n        createZoomBehavior.call(this);\n    }\n\n    graphvizInstance._dispatch.call('renderEnd', graphvizInstance);\n\n    if (transitionInstance == null) {\n        this._dispatch.call('end', this);\n        if (callback) {\n            callback.call(this);\n        }\n    }\n\n    return this;\n};\n","export default function() {\n    return this._graphvizVersion;\n};\n","import {shallowCopyObject} from \"./utils\";\nimport {roundTo2Decimals} from \"./utils\";\n\nexport function convertToPathData(originalData, guideData) {\n    if (originalData.tag == 'polygon') {\n        var newData = shallowCopyObject(originalData);\n        newData.tag = 'path';\n        var originalAttributes = originalData.attributes;\n        var newAttributes = shallowCopyObject(originalAttributes);\n        var newPointsString = originalAttributes.points;\n        if (guideData.tag == 'polygon') {\n            var bbox = originalData.bbox;\n            bbox.cx = bbox.x + bbox.width / 2;\n            bbox.cy = bbox.y + bbox.height / 2;\n            var pointsString = originalAttributes.points;\n            var pointStrings = pointsString.split(' ');\n            var normPoints = pointStrings.map(function(p) {var xy = p.split(','); return [xy[0] - bbox.cx, xy[1] - bbox.cy]});\n            var x0 = normPoints[normPoints.length - 1][0];\n            var y0 = normPoints[normPoints.length - 1][1];\n            for (var i = 0; i < normPoints.length; i++, x0 = x1, y0 = y1) {\n                var x1 = normPoints[i][0];\n                var y1 = normPoints[i][1];\n                var dx = x1 - x0;\n                var dy = y1 - y0;\n                if (dy == 0) {\n                    continue;\n                } else {\n                    var x2 = x0 - y0 * dx / dy;\n                }\n                if (0 <= x2 && x2 < Infinity && ((x0 <= x2 && x2 <= x1) || (x1 <= x2 && x2 <= x0))) {\n                    break;\n                }\n            }\n            var newPointStrings = [[bbox.cx + x2, bbox.cy + 0].join(',')];\n            newPointStrings = newPointStrings.concat(pointStrings.slice(i));\n            newPointStrings = newPointStrings.concat(pointStrings.slice(0, i));\n            newPointsString = newPointStrings.join(' ');\n        }\n        newAttributes['d'] = 'M' + newPointsString + 'z';\n        delete newAttributes.points;\n        newData.attributes = newAttributes;\n    } else /* if (originalData.tag == 'ellipse') */ {\n        var newData = shallowCopyObject(originalData);\n        newData.tag = 'path';\n        var originalAttributes = originalData.attributes;\n        var newAttributes = shallowCopyObject(originalAttributes);\n        var cx = originalAttributes.cx;\n        var cy = originalAttributes.cy;\n        var rx = originalAttributes.rx;\n        var ry = originalAttributes.ry;\n        if (guideData.tag == 'polygon') {\n            var bbox = guideData.bbox;\n            bbox.cx = bbox.x + bbox.width / 2;\n            bbox.cy = bbox.y + bbox.height / 2;\n            var p = guideData.attributes.points.split(' ')[0].split(',');\n            var sx = p[0];\n            var sy = p[1];\n            var dx = sx - bbox.cx;\n            var dy = sy - bbox.cy;\n            var l = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n            var cosA = dx / l;\n            var sinA = -dy / l;\n        } else { // if (guideData.tag == 'path') {\n            // FIXME: add support for getting start position from path\n            var cosA = 1;\n            var sinA = 0;\n        }\n        var x1 = rx * cosA;\n        var y1 = -ry * sinA;\n        var x2 = rx * (-cosA);\n        var y2 = -ry * (-sinA);\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        newAttributes['d'] = 'M '  +  cx + ' ' + cy + ' m ' + x1 + ',' + y1 + ' a ' + rx + ',' + ry + ' 0 1,0 ' + dx + ',' + dy + ' a ' + rx + ',' + ry + ' 0 1,0 ' + -dx + ',' + -dy + 'z';\n        delete newAttributes.cx;\n        delete newAttributes.cy;\n        delete newAttributes.rx;\n        delete newAttributes.ry;\n        newData.attributes = newAttributes;\n    }\n    return newData;\n}\n\nexport function translatePointsAttribute(pointsString, x, y) {\n    var pointStrings = pointsString.split(' ');\n    var points = pointStrings.map(function(p) {return p.split(',')});\n    var points = pointStrings.map(function(p) {return [roundTo2Decimals(+x + +p.split(',')[0]), roundTo2Decimals(+y + +p.split(',')[1])]});\n    var pointStrings = points.map(function(p) {return p.join(',')});\n    var pointsString = pointStrings.join(' ');\n    return pointsString;\n}\n\nexport function translateDAttribute(d, x, y) {\n    var pointStrings = d.split(/[A-Z ]/);\n    pointStrings.shift();\n    var commands = d.split(/[^[A-Z ]+/);\n    var points = pointStrings.map(function(p) {return p.split(',')});\n    var points = pointStrings.map(function(p) {return [roundTo2Decimals(+x + +p.split(',')[0]), roundTo2Decimals(+y + +p.split(',')[1])]});\n    var pointStrings = points.map(function(p) {return p.join(',')});\n    d = commands.reduce(function(arr, v, i) {\n        return arr.concat(v, pointStrings[i]);\n    }, []).join('');\n    return d;\n}\n","import { graphviz } from \"@hpcc-js/wasm\";\nimport { graphvizSync } from \"@hpcc-js/wasm\";\nimport * as d3 from \"d3-selection\";\nimport {extractAllElementsData, extractElementData, createElementWithAttributes} from \"./element\";\nimport {convertToPathData} from \"./svg\";\nimport {pathTweenPoints} from \"./tweening\";\nimport {isEdgeElement} from \"./data\";\nimport {getEdgeTitle} from \"./data\";\n\n\nexport function initViz() {\n\n    // force JIT compilation of @hpcc-js/wasm\n    try {\n        graphviz.layout(\"\", \"svg\", \"dot\").then(() => {\n            graphvizSync().then((graphviz1) => {\n                this.layoutSync = graphviz1.layout.bind(graphviz1);\n                if (this._worker == null) {\n                    this._dispatch.call(\"initEnd\", this);\n                }\n                if (this._afterInit) {\n                    this._afterInit();\n                }\n            });\n        });\n    } catch(error) {\n    }\n    if (this._worker != null) {\n        var vizURL = this._vizURL;\n        var graphvizInstance = this;\n        this._workerPort.onmessage = function(event) {\n            var callback = graphvizInstance._workerCallbacks.shift();\n            callback.call(graphvizInstance, event);\n        }\n        if (!vizURL.match(/^https?:\\/\\/|^\\/\\//i)) {\n            // Local URL. Prepend with local domain to be usable in web worker\n            vizURL = (new window.URL(vizURL, document.location.href)).href;\n        }\n        postMessage.call(this, {dot: \"\", engine: 'dot', vizURL: vizURL}, function(event) {\n            switch (event.data.type) {\n            case \"init\":\n                graphvizInstance._dispatch.call(\"initEnd\", this);\n                break;\n            }\n        });\n    }\n}\n\nfunction postMessage(message, callback) {\n    this._workerCallbacks.push(callback);\n    this._workerPort.postMessage(message);\n}\n\nexport function layout(src, engine, vizOptions, callback) {\n    if (this._worker) {\n        postMessage.call(this, {\n            dot: src,\n            engine: engine,\n            options: vizOptions,\n        }, function (event) {\n            callback.call(this, event.data);\n        });\n    } else {\n        try {\n            var svgDoc = this.layoutSync(src, \"svg\", engine, vizOptions);\n            callback.call(this, {type: 'done', svg: svgDoc});\n        }\n        catch(error) {\n            callback.call(this, {type: 'error', error: error.message});\n        }\n    }\n}\n\nexport default function(src, callback) {\n\n    var graphvizInstance = this;\n    var worker = this._worker;\n    var engine = this._options.engine;\n    var images = this._images;\n\n    this._dispatch.call(\"start\", this);\n    this._busy = true;\n    this._dispatch.call(\"layoutStart\", this);\n    var vizOptions = {\n        images: images,\n    };\n    if (!this._worker && this.layoutSync == null) {\n        this._afterInit = this.dot.bind(this, src, callback);\n        return this;\n    }\n    this.layout(src, engine, vizOptions, function (data) {\n        switch (data.type) {\n        case \"error\":\n            if (graphvizInstance._onerror) {\n                graphvizInstance._onerror(data.error);\n            } else {\n                throw data.error.message\n            }\n            break;\n        case \"done\":\n            var svgDoc = data.svg;\n            layoutDone.call(this, svgDoc, callback);\n            break;\n        }\n    });\n\n    return this;\n};\n\nfunction layoutDone(svgDoc, callback) {\n    var keyMode = this._options.keyMode;\n    var tweenPaths = this._options.tweenPaths;\n    var tweenShapes = this._options.tweenShapes;\n    if (typeof this._options.tweenPrecision == 'string' && this._options.tweenPrecision.includes('%')) {\n        var tweenPrecision = +this._options.tweenPrecision.split('%')[0] / 100;\n        var tweenPrecisionIsRelative = this._options.tweenPrecision.includes('%');\n    } else {\n        var tweenPrecision = this._options.tweenPrecision;\n        var tweenPrecisionIsRelative = false;\n    }\n    var growEnteringEdges = this._options.growEnteringEdges;\n    var dictionary = {};\n    var prevDictionary = this._dictionary || {};\n    var nodeDictionary = {};\n    var prevNodeDictionary = this._nodeDictionary || {};\n\n    function setKey(datum, index) {\n        var tag = datum.tag;\n        if (keyMode == 'index') {\n            datum.key = index;\n        } else if (tag[0] != '#') {\n            if (keyMode == 'id') {\n                datum.key = datum.attributes.id;\n            } else if (keyMode == 'title') {\n                var title = datum.children.find(function (childData) {\n                    return childData.tag == 'title';\n                });\n                if (title) {\n                    if (title.children.length > 0) {\n                        datum.key = title.children[0].text;\n                    } else {\n                        datum.key = '';\n                    }\n                }\n            }\n        }\n        if (datum.key == null) {\n            if (tweenShapes) {\n                if (tag == 'ellipse' || tag == 'polygon') {\n                    tag = 'path';\n                }\n            }\n            datum.key = tag + '-' + index;\n        }\n    }\n\n    function setId(datum, parentData) {\n        var id = (parentData ? parentData.id + '.' : '') + datum.key;\n        datum.id = id;\n    }\n\n    function addToDictionary(datum) {\n        dictionary[datum.id] = datum;\n    }\n\n    function calculateAlternativeShapeData(datum, prevDatum) {\n        if (tweenShapes && datum.id in prevDictionary) {\n            if ((prevDatum.tag == 'polygon' || prevDatum.tag == 'ellipse' || prevDatum.tag == 'path') && (prevDatum.tag != datum.tag || datum.tag == 'polygon')) {\n                if (prevDatum.tag != 'path') {\n                    datum.alternativeOld = convertToPathData(prevDatum, datum);\n                }\n                if (datum.tag != 'path') {\n                    datum.alternativeNew = convertToPathData(datum, prevDatum);\n                }\n            }\n        }\n    }\n\n    function calculatePathTweenPoints(datum, prevDatum) {\n        if (tweenPaths && prevDatum && (prevDatum.tag == 'path' || (datum.alternativeOld && datum.alternativeOld.tag == 'path'))) {\n            var attribute_d = (datum.alternativeNew || datum).attributes.d;\n            if (datum.alternativeOld) {\n                var oldNode = createElementWithAttributes(datum.alternativeOld);\n            } else {\n                var oldNode = createElementWithAttributes(prevDatum);\n            }\n            (datum.alternativeOld || (datum.alternativeOld = {})).points = pathTweenPoints(oldNode, attribute_d, tweenPrecision, tweenPrecisionIsRelative);\n        }\n    }\n\n    function postProcessDataPass1Local(datum, index=0, parentData) {\n        setKey(datum, index);\n        setId(datum, parentData);\n        var id = datum.id;\n        var prevDatum = prevDictionary[id];\n        addToDictionary(datum);\n        calculateAlternativeShapeData(datum, prevDatum);\n        calculatePathTweenPoints(datum, prevDatum);\n        var childTagIndexes = {};\n        datum.children.forEach(function (childData) {\n            var childTag = childData.tag;\n            if (childTag == 'ellipse' || childTag == 'polygon') {\n                childTag = 'path';\n            }\n            if (childTagIndexes[childTag] == null) {\n                childTagIndexes[childTag] = 0;\n            }\n            var childIndex = childTagIndexes[childTag]++;\n            postProcessDataPass1Local(childData, childIndex, datum);\n        });\n    }\n\n    function addToNodeDictionary(datum) {\n        var tag = datum.tag;\n        if (growEnteringEdges && datum.parent) {\n            if (datum.parent.attributes.class == 'node') {\n                if (tag == 'title') {\n                    if (datum.children.length > 0) {\n                      var child = datum.children[0];\n                      var nodeId = child.text;\n                    } else {\n                      var nodeId = '';\n                    }\n                    nodeDictionary[nodeId] = datum.parent;\n                }\n            }\n        }\n    }\n\n    function extractGrowingEdgesData(datum) {\n        var id = datum.id;\n        var tag = datum.tag;\n        var prevDatum = prevDictionary[id];\n        if (growEnteringEdges && !prevDatum && datum.parent) {\n            if (isEdgeElement(datum)) {\n                if (tag == 'path' || tag == 'polygon') {\n                    if (tag == 'polygon') {\n                        var path = datum.parent.children.find(function (e) {\n                            return e.tag == 'path';\n                        });\n                        if (path) {\n                            datum.totalLength = path.totalLength;\n                        }\n                    }\n                    var title = getEdgeTitle(datum);\n                    var child = title.children[0];\n                    var nodeIds = child.text.split('->');\n                    if (nodeIds.length != 2) {\n                        nodeIds = child.text.split('--');\n                    }\n                    var startNodeId = nodeIds[0];\n                    var startNode = nodeDictionary[startNodeId];\n                    var prevStartNode = prevNodeDictionary[startNodeId];\n                    if (prevStartNode) {\n                        var i = startNode.children.findIndex(function (element, index) {\n                            return element.tag == 'g';\n                        });\n                        if (i >= 0) {\n                            var j = startNode.children[i].children.findIndex(function (element, index) {\n                                return element.tag == 'a';\n                            });\n                            startNode = startNode.children[i].children[j];\n                        }\n                        var i = prevStartNode.children.findIndex(function (element, index) {\n                            return element.tag == 'g';\n                        });\n                        if (i >= 0) {\n                            var j = prevStartNode.children[i].children.findIndex(function (element, index) {\n                                return element.tag == 'a';\n                            });\n                            prevStartNode = prevStartNode.children[i].children[j];\n                        }\n                        var startShapes = startNode.children;\n                        for (var i = 0; i < startShapes.length; i++) {\n                            if (startShapes[i].tag == 'polygon' || startShapes[i].tag == 'ellipse' || startShapes[i].tag == 'path' || startShapes[i].tag == 'text') {\n                                var startShape = startShapes[i];\n                                break;\n                            }\n                        }\n                        var prevStartShapes = prevStartNode.children;\n                        for (var i = 0; i < prevStartShapes.length; i++) {\n                            if (prevStartShapes[i].tag == 'polygon' || prevStartShapes[i].tag == 'ellipse' || prevStartShapes[i].tag == 'path' || prevStartShapes[i].tag == 'text') {\n                                var prevStartShape = prevStartShapes[i];\n                                break;\n                            }\n                        }\n                        if (prevStartShape && startShape) {\n                            datum.offset = {\n                                x: prevStartShape.center.x - startShape.center.x,\n                                y: prevStartShape.center.y - startShape.center.y,\n                            }\n                        } else {\n                            datum.offset = {x: 0, y: 0};\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function postProcessDataPass2Global(datum) {\n        addToNodeDictionary(datum);\n        extractGrowingEdgesData(datum);\n        datum.children.forEach(function (childData) {\n            postProcessDataPass2Global(childData);\n        });\n    }\n\n    this._dispatch.call(\"layoutEnd\", this);\n\n    var newDoc = d3.select(document.createDocumentFragment())\n        .append('div');\n\n    var parser = new window.DOMParser();\n    var doc = parser.parseFromString(svgDoc, \"image/svg+xml\");\n\n    newDoc\n        .append(function() {\n            return doc.documentElement;\n        });\n\n    var newSvg = newDoc\n      .select('svg');\n\n    var data = extractAllElementsData(newSvg);\n    this._dispatch.call('dataExtractEnd', this);\n    postProcessDataPass1Local(data);\n    this._dispatch.call('dataProcessPass1End', this);\n    postProcessDataPass2Global(data);\n    this._dispatch.call('dataProcessPass2End', this);\n    this._data = data;\n    this._dictionary = dictionary;\n    this._nodeDictionary = nodeDictionary;\n\n    this._extractData = function (element, childIndex, parentData) {\n        var data = extractAllElementsData(element);\n        postProcessDataPass1Local(data, childIndex, parentData);\n        postProcessDataPass2Global(data);\n        return data;\n    }\n    this._busy = false;\n    this._dispatch.call('dataProcessEnd', this);\n    if (callback) {\n        callback.call(this);\n    }\n    if (this._queue.length > 0) {\n        var job = this._queue.shift();\n        job.call(this);\n    }\n}\n","export default function(src, callback) {\n\n    var graphvizInstance = this;\n\n    this\n        .dot(src, render);\n\n    function render() {\n        graphvizInstance\n            .render(callback);\n    }\n\n    return this;\n};\n","import {transition} from \"d3-transition\";\nimport {active as d3_active} from \"d3-transition\";\n\nexport default function(name) {\n\n    if (name instanceof Function) {\n        this._transitionFactory = name;\n    } else {\n        this._transition = transition(name);\n    }\n\n    return this;\n};\n\nexport function active(name) {\n\n    var root = this._selection;\n    var svg = root.selectWithoutDataPropagation(\"svg\");\n    if (svg.size() != 0) {\n        return d3_active(svg.node(), name);\n    } else {\n        return null;\n    }\n};\n","export default function(options) {\n\n    if (typeof options == 'undefined') {\n        return Object.assign({}, this._options);\n    } else {\n        for (var option of Object.keys(options)) {\n            this._options[option] = options[option];\n        }\n        return this;\n    }\n};\n","export default function(width) {\n\n    this._options.width = width;\n\n    return this;\n};\n","export default function(height) {\n\n    this._options.height = height;\n\n    return this;\n};\n","export default function(scale) {\n\n    this._options.scale = scale;\n\n    return this;\n};\n","export default function(fit) {\n\n    this._options.fit = fit;\n\n    return this;\n};\n","export default function(callback) {\n\n    this._attributer = callback;\n\n    return this;\n};\n","export default function(engine) {\n\n    this._options.engine = engine;\n\n    return this;\n};\n","export default function(path, width, height) {\n\n    this._images.push({path:path, width: width, height:height})\n\n    return this;\n};\n","export default function(keyMode) {\n\n    if (!this._keyModes.has(keyMode)) {\n        throw Error('Illegal keyMode: ' + keyMode);\n    }\n    if (keyMode != this._options.keyMode && this._data != null) {\n        throw Error('Too late to change keyMode');\n    }\n    this._options.keyMode = keyMode;\n\n    return this;\n};\n","export default function(enable) {\n\n    this._options.fade = enable\n\n    return this;\n};\n","export default function(enable) {\n\n    this._options.tweenPaths = enable;\n\n    return this;\n};\n","export default function(enable) {\n\n    this._options.tweenShapes = enable;\n    if (enable) {\n        this._options.tweenPaths = true;\n    }\n\n    return this;\n};\n","export default function(enable) {\n\n    this._options.convertEqualSidedPolygons = enable;\n\n    return this;\n};\n","export default function(precision) {\n\n    this._options.tweenPrecision = precision;\n\n    return this;\n};\n","export default function(enable) {\n\n    this._options.growEnteringEdges = enable;\n\n    return this;\n};\n","export default function(typenames, callback) {\n\n    this._dispatch.on(typenames, callback);\n\n    return this;\n};\n","export default function(callback) {\n\n    this._onerror = callback\n\n    return this;\n};\n","import {format} from \"d3-format\";\n\nexport default function(enable) {\n\n    var t0 = Date.now();\n    var times = {};\n    var eventTypes = this._eventTypes;\n    var maxEventTypeLength = Math.max(...(eventTypes.map(eventType => eventType.length)));\n    for (let i = 0; i < eventTypes.length; i++) {\n        let eventType = eventTypes[i];\n        times[eventType] = [];\n        var graphvizInstance = this;\n        var expectedDelay;\n        var expectedDuration;\n        this\n            .on(eventType + '.log', enable ? function () {\n                var t = Date.now();\n                var seqNo = times[eventType].length;\n                times[eventType].push(t);\n                var string = '';\n                string += 'Event ';\n                string += format(' >2')(i) + ' ';\n                string += eventType + ' '.repeat(maxEventTypeLength - eventType.length);\n                string += format(' >5')(t - t0) + ' ';\n                if (eventType != 'initEnd') {\n                    string += format(' >5')(t - times['start'][seqNo]);\n                }\n                if (eventType == 'dataProcessEnd') {\n                    string += ' prepare                 ' + format(' >5')((t - times['layoutEnd'][seqNo]));\n                }\n                if (eventType == 'renderEnd' && graphvizInstance._transition) {\n                    string += ' transition start margin ' + format(' >5')(graphvizInstance._transition.delay() - (t - times['renderStart'][seqNo]));\n                    expectedDelay = graphvizInstance._transition.delay();\n                    expectedDuration = graphvizInstance._transition.duration();\n                }\n                if (eventType == 'transitionStart') {\n                    var actualDelay = (t - times['renderStart'][seqNo])\n                    string += ' transition delay        ' + format(' >5')(t - times['renderStart'][seqNo]);\n                    string += ' expected ' + format(' >5')(expectedDelay);\n                    string += ' diff ' + format(' >5')(actualDelay - expectedDelay);\n                }\n                if (eventType == 'transitionEnd') {\n                    var actualDuration = t - times['transitionStart'][seqNo]\n                    string += ' transition duration     ' + format(' >5')(actualDuration);\n                    string += ' expected ' + format(' >5')(expectedDuration);\n                    string += ' diff ' + format(' >5')(actualDuration - expectedDuration);\n                }\n                console.log(string);\n                t0 = t;\n            } : null);\n    }\n    return this;\n}\n","export default function() {\n\n    delete this._selection.node().__graphviz__;\n    if (this._worker) {\n        this._workerPortClose();\n    }\n    return this;\n};\n","export function rotate(x, y, cosA, sinA) {\n    // (x + j * y) * (cosA + j * sinA) = x * cosA - y * sinA + j * (x * sinA + y * cosA)\n    y = -y;\n    sinA = -sinA;\n    [x, y] = [x * cosA - y * sinA, x * sinA + y * cosA];\n    y = -y;\n    return [x, y];\n}\n","import * as d3 from \"d3-selection\";\nimport {path as d3_path} from \"d3-path\";\nimport {rotate} from \"./geometry\";\nimport {extractAllElementsData} from \"./element\";\nimport {attributeElement} from \"./element\";\nimport {insertAllElementsData} from \"./element\";\n\nexport function drawEdge(x1, y1, x2, y2, attributes, options={}) {\n    attributes = Object.assign({}, attributes);\n    if (attributes.style && attributes.style.includes('invis')) {\n        var newEdge = d3.select(null);\n    } else {\n        var root = this._selection;\n        var svg = root.selectWithoutDataPropagation(\"svg\");\n        var graph0 = svg.selectWithoutDataPropagation(\"g\");\n        var newEdge0 = createEdge.call(this, attributes);\n        var edgeData = extractAllElementsData(newEdge0);\n        var newEdge = graph0.append('g')\n            .data([edgeData]);\n        attributeElement.call(newEdge.node(), edgeData);\n        _updateEdge.call(this, newEdge, x1, y1, x2, y2, attributes, options);\n    }\n    this._drawnEdge = {\n        g: newEdge,\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        attributes: attributes,\n    };\n\n    return this;\n}\n\nexport function updateDrawnEdge(x1, y1, x2, y2, attributes={}, options={}) {\n    if (!this._drawnEdge)  {\n        throw Error('No edge has been drawn');\n    }\n    var edge = this._drawnEdge.g\n    attributes = Object.assign(this._drawnEdge.attributes, attributes);\n    this._drawnEdge.x1 = x1;\n    this._drawnEdge.y1 = y1;\n    this._drawnEdge.x2 = x2;\n    this._drawnEdge.y2 = y2;\n    if (edge.empty() && !(attributes.style && attributes.style.includes('invis'))) {\n        var root = this._selection;\n        var svg = root.selectWithoutDataPropagation(\"svg\");\n        var graph0 = svg.selectWithoutDataPropagation(\"g\");\n        var edge = graph0.append('g');\n        this._drawnEdge.g = edge;\n    }\n    if (!edge.empty())  {\n      _updateEdge.call(this, edge, x1, y1, x2, y2, attributes, options);\n    }\n\n    return this;\n}\n\nfunction _updateEdge(edge, x1, y1, x2, y2, attributes, options) {\n\n    var newEdge = createEdge.call(this, attributes);\n    var edgeData = extractAllElementsData(newEdge);\n    edge.data([edgeData]);\n    attributeElement.call(edge.node(), edgeData);\n    _moveEdge(edge, x1, y1, x2, y2, attributes, options);\n}\n\nfunction _moveEdge(edge, x1, y1, x2, y2, attributes, options) {\n\n    var shortening = options.shortening || 0;\n    var arrowHeadLength = 10;\n    var arrowHeadWidth = 7;\n    var margin = 0.1;\n\n    var arrowHeadPoints = [\n        [0, -arrowHeadWidth / 2],\n        [arrowHeadLength, 0],\n        [0, arrowHeadWidth / 2],\n        [0, -arrowHeadWidth / 2],\n    ];\n\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    var length = Math.sqrt(dx * dx + dy * dy);\n    if (length == 0) {\n        var cosA = 1;\n        var sinA = 0;\n    } else {\n        var cosA = dx / length;\n        var sinA = dy / length;\n    }\n    x2 = x1 + (length - shortening - arrowHeadLength - margin) * cosA;\n    y2 = y1 + (length - shortening - arrowHeadLength - margin) * sinA;\n\n    if (attributes.URL || attributes.tooltip) {\n        var a = edge.selectWithoutDataPropagation(\"g\").selectWithoutDataPropagation(\"a\");\n        var line = a.selectWithoutDataPropagation(\"path\");\n        var arrowHead = a.selectWithoutDataPropagation(\"polygon\");\n    } else {\n        var line = edge.selectWithoutDataPropagation(\"path\");\n        var arrowHead = edge.selectWithoutDataPropagation(\"polygon\");\n    }\n\n    var path1 = d3_path();\n    path1.moveTo(x1, y1);\n    path1.lineTo(x2, y2);\n\n    line\n        .attr(\"d\", path1);\n\n    x2 = x1 + (length - shortening - arrowHeadLength) * cosA;\n    y2 = y1 + (length - shortening - arrowHeadLength) * sinA;\n    for (var i = 0; i < arrowHeadPoints.length; i++) {\n        var point = arrowHeadPoints[i];\n        arrowHeadPoints[i] = rotate(point[0], point[1], cosA, sinA);\n    }\n    for (var i = 0; i < arrowHeadPoints.length; i++) {\n        var point = arrowHeadPoints[i];\n        arrowHeadPoints[i] = [x2 + point[0], y2 + point[1]];\n    }\n    var allPoints = [];\n    for (var i = 0; i < arrowHeadPoints.length; i++) {\n        var point = arrowHeadPoints[i];\n        allPoints.push(point.join(','));\n    }\n    var pointsAttr = allPoints.join(' ');\n\n    arrowHead\n        .attr(\"points\", pointsAttr);\n\n    return this;\n}\n\nexport function moveDrawnEdgeEndPoint(x2, y2, options={}) {\n\n    if (!this._drawnEdge)  {\n        throw Error('No edge has been drawn');\n    }\n    var edge = this._drawnEdge.g;\n    var x1 = this._drawnEdge.x1;\n    var y1 = this._drawnEdge.y1;\n    var attributes = this._drawnEdge.attributes;\n\n    this._drawnEdge.x2 = x2;\n    this._drawnEdge.y2 = y2;\n    _moveEdge(edge, x1, y1, x2, y2, attributes, options);\n\n    return this\n}\n\nexport function removeDrawnEdge() {\n\n    if (!this._drawnEdge)  {\n        return this;\n    }\n\n    var edge = this._drawnEdge.g;\n\n    edge.remove();\n\n    this._drawnEdge = null;\n\n    return this\n}\n\nexport function insertDrawnEdge(name) {\n\n    if (!this._drawnEdge)  {\n        throw Error('No edge has been drawn');\n    }\n\n    var edge = this._drawnEdge.g;\n    if (edge.empty())  {\n        return this;\n    }\n    var attributes = this._drawnEdge.attributes;\n\n    var title = edge.selectWithoutDataPropagation(\"title\");\n    title\n        .text(name);\n\n    var root = this._selection;\n    var svg = root.selectWithoutDataPropagation(\"svg\");\n    var graph0 = svg.selectWithoutDataPropagation(\"g\");\n    var graph0Datum = graph0.datum();\n    var edgeData = this._extractData(edge, graph0Datum.children.length, graph0.datum());\n    graph0Datum.children.push(edgeData);\n\n    insertAllElementsData(edge, edgeData);\n\n    this._drawnEdge = null;\n\n    return this\n\n}\n\nexport function drawnEdgeSelection() {\n\n  if (this._drawnEdge) {\n    return this._drawnEdge.g;\n  } else {\n    return d3.select(null);\n  }\n\n}\n\n\nfunction createEdge(attributes) {\n    var attributesString = ''\n    for (var name of Object.keys(attributes)) {\n        if (attributes[name] != null) {\n            attributesString += ' \"' + name + '\"=\"' + attributes[name] + '\"';\n        }\n    }\n    var dotSrc = 'digraph {a -> b [' + attributesString + ']}';\n    var svgDoc = this.layoutSync(dotSrc, 'svg', 'dot');\n    var parser = new window.DOMParser();\n    var doc = parser.parseFromString(svgDoc, \"image/svg+xml\");\n    var newDoc = d3.select(document.createDocumentFragment())\n        .append(function() {\n            return doc.documentElement;\n        });\n    var edge = newDoc.select('.edge');\n\n    return edge;\n}\n","import * as d3 from \"d3-selection\";\nimport {rotate} from \"./geometry\";\nimport {extractAllElementsData} from \"./element\";\nimport {translatePointsAttribute} from \"./svg\";\nimport {translateDAttribute} from \"./svg\";\nimport {insertAllElementsData} from \"./element\";\nimport {attributeElement} from \"./element\";\nimport {roundTo2Decimals} from \"./utils\";\n\nexport function drawNode(x, y, nodeId, attributes={}, options={}) {\n    attributes = Object.assign({}, attributes);\n    if (attributes.style && attributes.style.includes('invis')) {\n        var newNode = d3.select(null);\n    } else {\n        var root = this._selection;\n        var svg = root.selectWithoutDataPropagation(\"svg\");\n        var graph0 = svg.selectWithoutDataPropagation(\"g\");\n        var newNode0 = createNode.call(this, nodeId, attributes);\n        var nodeData = extractAllElementsData(newNode0);\n        var newNode = graph0.append('g')\n            .data([nodeData]);\n        attributeElement.call(newNode.node(), nodeData);\n        _updateNode.call(this, newNode, x, y, nodeId, attributes, options);\n    }\n    this._drawnNode = {\n        g: newNode,\n        nodeId: nodeId,\n        x: x,\n        y: y,\n        attributes: attributes,\n    };\n\n    return this;\n}\n\nexport function updateDrawnNode(x, y, nodeId, attributes={}, options={}) {\n    if (!this._drawnNode)  {\n        throw Error('No node has been drawn');\n    }\n\n    var node = this._drawnNode.g\n    if (nodeId == null) {\n        nodeId = this._drawnNode.nodeId;\n    }\n    attributes = Object.assign(this._drawnNode.attributes, attributes);\n    this._drawnNode.nodeId = nodeId;\n    this._drawnNode.x = x;\n    this._drawnNode.y = y;\n    if (node.empty() && !(attributes.style && attributes.style.includes('invis'))) {\n        var root = this._selection;\n        var svg = root.selectWithoutDataPropagation(\"svg\");\n        var graph0 = svg.selectWithoutDataPropagation(\"g\");\n        var node = graph0.append('g');\n        this._drawnNode.g = node;\n    }\n    if (!node.empty())  {\n      _updateNode.call(this, node, x, y, nodeId, attributes, options);\n    }\n\n    return this;\n}\n\nfunction _updateNode(node, x, y, nodeId, attributes, options) {\n\n    var newNode = createNode.call(this, nodeId, attributes);\n    var nodeData = extractAllElementsData(newNode);\n    node.data([nodeData]);\n    attributeElement.call(node.node(), nodeData);\n    _moveNode(node, x, y, attributes, options);\n\n    return this;\n}\n\nfunction _moveNode(node, x, y, attributes, options) {\n    if (attributes.URL || attributes.tooltip) {\n        var subParent = node.selectWithoutDataPropagation(\"g\").selectWithoutDataPropagation(\"a\");\n    } else {\n        var subParent = node;\n    }\n    var svgElements = subParent.selectAll('ellipse,polygon,path,polyline');\n    var text = node.selectWithoutDataPropagation(\"text\");\n\n    if (svgElements.size() != 0) {\n        var bbox = svgElements.node().getBBox();\n        bbox.cx = bbox.x + bbox.width / 2;\n        bbox.cy = bbox.y + bbox.height / 2;\n    } else if (text.size() != 0) {\n        bbox = {\n            x: +text.attr('x'),\n            y: +text.attr('y'),\n            width: 0,\n            height: 0,\n            cx: +text.attr('x'),\n            cy: +text.attr('y'),\n        }\n    }\n    svgElements.each(function(data, index) {\n        var svgElement = d3.select(this);\n        if (svgElement.attr(\"cx\")) {\n            svgElement\n                .attr(\"cx\", roundTo2Decimals(x))\n                .attr(\"cy\", roundTo2Decimals(y));\n        } else if (svgElement.attr(\"points\")) {\n            var pointsString = svgElement.attr('points').trim();\n            svgElement\n                .attr(\"points\", translatePointsAttribute(pointsString, x - bbox.cx, y - bbox.cy));\n        } else {\n            var d = svgElement.attr('d');\n            svgElement\n                .attr(\"d\", translateDAttribute(d, x - bbox.cx, y - bbox.cy));\n        }\n    });\n\n    if (text.size() != 0) {\n        text\n            .attr(\"x\", roundTo2Decimals(+text.attr(\"x\") + x - bbox.cx))\n            .attr(\"y\", roundTo2Decimals(+text.attr(\"y\") + y - bbox.cy));\n    }\n    return this;\n}\n\nexport function moveDrawnNode(x, y, options={}) {\n\n    if (!this._drawnNode)  {\n        throw Error('No node has been drawn');\n    }\n    var node = this._drawnNode.g;\n    var attributes = this._drawnNode.attributes;\n\n    this._drawnNode.x = x;\n    this._drawnNode.y = y;\n\n    if (!node.empty())  {\n        _moveNode(node, x, y, attributes, options);\n    }\n\n    return this\n}\n\nexport function removeDrawnNode() {\n\n    if (!this._drawnNode)  {\n        return this;\n    }\n\n    var node = this._drawnNode.g;\n\n    if (!node.empty())  {\n        node.remove();\n    }\n\n    this._drawnNode = null;\n\n    return this\n}\n\nexport function insertDrawnNode(nodeId) {\n\n    if (!this._drawnNode)  {\n        throw Error('No node has been drawn');\n    }\n\n    if (nodeId == null) {\n        nodeId = this._drawnNode.nodeId;\n    }\n    var node = this._drawnNode.g;\n    if (node.empty())  {\n        return this;\n    }\n    var attributes = this._drawnNode.attributes;\n\n    var title = node.selectWithoutDataPropagation(\"title\");\n    title\n        .text(nodeId);\n    if (attributes.URL || attributes.tooltip) {\n        var ga = node.selectWithoutDataPropagation(\"g\");\n        var a = ga.selectWithoutDataPropagation(\"a\");\n        var svgElement = a.selectWithoutDataPropagation('ellipse,polygon,path,polyline');\n        var text = a.selectWithoutDataPropagation('text');\n    } else {\n        var svgElement = node.selectWithoutDataPropagation('ellipse,polygon,path,polyline');\n        var text = node.selectWithoutDataPropagation('text');\n    }\n    text\n        .text(attributes.label || nodeId);\n\n    var root = this._selection;\n    var svg = root.selectWithoutDataPropagation(\"svg\");\n    var graph0 = svg.selectWithoutDataPropagation(\"g\");\n    var graph0Datum = graph0.datum();\n    var nodeData = this._extractData(node, graph0Datum.children.length, graph0.datum());\n    graph0Datum.children.push(nodeData);\n\n    insertAllElementsData(node, nodeData);\n\n    this._drawnNode = null;\n\n    return this\n\n}\n\nexport function drawnNodeSelection() {\n\n  if (this._drawnNode) {\n    return this._drawnNode.g;\n  } else {\n    return d3.select(null);\n  }\n\n}\n\nfunction createNode(nodeId, attributes) {\n    var attributesString = ''\n    for (var name of Object.keys(attributes)) {\n        if (attributes[name] != null) {\n            attributesString += ' \"' + name + '\"=\"' + attributes[name] + '\"';\n        }\n    }\n    var dotSrc = 'graph {\"' + nodeId + '\" [' + attributesString + ']}';\n    var svgDoc = this.layoutSync(dotSrc, 'svg', 'dot');\n    var parser = new window.DOMParser();\n    var doc = parser.parseFromString(svgDoc, \"image/svg+xml\");\n    var newDoc = d3.select(document.createDocumentFragment())\n        .append(function() {\n            return doc.documentElement;\n        });\n    var node = newDoc.select('.node');\n\n    return node;\n}\n","/* This file is excluded from coverage because the intrumented code\n * translates \"self\" which gives a reference error.\n */\n\n/* istanbul ignore next */\n\nexport function workerCodeBody(port) {\n\n    self.document = {}; // Workaround for \"ReferenceError: document is not defined\" in hpccWasm\n\n    port.addEventListener('message', function(event) {\n        let hpccWasm = self[\"@hpcc-js/wasm\"];\n        if (hpccWasm == undefined && event.data.vizURL) {\n            importScripts(event.data.vizURL);\n            hpccWasm = self[\"@hpcc-js/wasm\"];\n            hpccWasm.wasmFolder(event.data.vizURL.match(/.*\\//)[0]);\n            // This is an alternative workaround where wasmFolder() is not needed\n//                                    document = {currentScript: {src: event.data.vizURL}};\n        }\n        hpccWasm.graphviz.layout(event.data.dot, \"svg\", event.data.engine, event.data.options).then((svg) => {\n            if (svg) {\n                port.postMessage({\n                    type: \"done\",\n                    svg: svg,\n                });\n            } else if (event.data.vizURL) {\n                port.postMessage({\n                    type: \"init\",\n                });\n            } else {\n                port.postMessage({\n                    type: \"skip\",\n                });\n            }\n        }).catch(error => {\n            port.postMessage({\n                type: \"error\",\n                error: error.message,\n            });\n        });\n    });\n}\n\n/* istanbul ignore next */\n\nexport function workerCode() {\n\n    const port = self;\n    workerCodeBody(port);\n}\n\n/* istanbul ignore next */\n\nexport function sharedWorkerCode() {\n    self.onconnect = function(e) {\n        const port = e.ports[0];\n        workerCodeBody(port);\n        port.start();\n    }\n}\n","import * as d3 from \"d3-selection\";\nimport {dispatch} from \"d3-dispatch\";\nimport render from \"./render\";\nimport graphvizVersion from \"./graphvizVersion\";\nimport {layout} from \"./dot\";\nimport dot from \"./dot\";\nimport data from \"./data\";\nimport {initViz} from \"./dot\";\nimport renderDot from \"./renderDot\";\nimport transition from \"./transition\";\nimport {active} from \"./transition\";\nimport options from \"./options\";\nimport width from \"./width\";\nimport height from \"./height\";\nimport scale from \"./scale\";\nimport fit from \"./fit\";\nimport attributer from \"./attributer\";\nimport engine from \"./engine\";\nimport images from \"./images\";\nimport keyMode from \"./keyMode\";\nimport fade from \"./fade\";\nimport tweenPaths from \"./tweenPaths\";\nimport tweenShapes from \"./tweenShapes\";\nimport convertEqualSidedPolygons from \"./convertEqualSidedPolygons\";\nimport tweenPrecision from \"./tweenPrecision\";\nimport growEnteringEdges from \"./growEnteringEdges\";\nimport zoom from \"./zoom\";\nimport {resetZoom} from \"./zoom\";\nimport {zoomBehavior} from \"./zoom\";\nimport {zoomSelection} from \"./zoom\";\nimport {zoomScaleExtent} from \"./zoom\";\nimport {zoomTranslateExtent} from \"./zoom\";\nimport on from \"./on\";\nimport onerror from \"./onerror\";\nimport logEvents from \"./logEvents\";\nimport destroy from \"./destroy\";\nimport {drawEdge} from \"./drawEdge\";\nimport {updateDrawnEdge} from \"./drawEdge\";\nimport {moveDrawnEdgeEndPoint} from \"./drawEdge\";\nimport {insertDrawnEdge} from \"./drawEdge\";\nimport {removeDrawnEdge} from \"./drawEdge\";\nimport {drawnEdgeSelection} from \"./drawEdge\";\nimport {drawNode} from \"./drawNode\";\nimport {updateDrawnNode} from \"./drawNode\";\nimport {moveDrawnNode} from \"./drawNode\";\nimport {insertDrawnNode} from \"./drawNode\";\nimport {removeDrawnNode} from \"./drawNode\";\nimport {drawnNodeSelection} from \"./drawNode\";\nimport {workerCode} from \"./workerCode\";\nimport {sharedWorkerCode} from \"./workerCode\";\nimport {workerCodeBody} from \"./workerCode\";\nimport {graphvizVersion as hpccWasmGraphvizVersion} from \"@hpcc-js/wasm\";\n\nexport function Graphviz(selection, options) {\n    this._options = {\n        useWorker: true,\n        useSharedWorker: false,\n        engine: 'dot',\n        keyMode: 'title',\n        fade: true,\n        tweenPaths: true,\n        tweenShapes: true,\n        convertEqualSidedPolygons: true,\n        tweenPrecision: 1,\n        growEnteringEdges: true,\n        zoom: true,\n        zoomScaleExtent: [0.1, 10],\n        zoomTranslateExtent: [[-Infinity, -Infinity], [+Infinity, +Infinity]],\n        width: null,\n        height: null,\n        scale: 1,\n        fit: false,\n    };\n    if (options instanceof Object) {\n        for (var option of Object.keys(options)) {\n            this._options[option] = options[option];\n        }\n    } else if (typeof options == 'boolean') {\n        this._options.useWorker = options;\n    }\n    var useWorker = this._options.useWorker;\n    var useSharedWorker = this._options.useSharedWorker;\n    if (typeof Worker == 'undefined') {\n        useWorker = false;\n    }\n    if (typeof SharedWorker == 'undefined') {\n        useSharedWorker = false;\n    }\n    if (useWorker || useSharedWorker) {\n        var scripts = d3.selectAll('script');\n        var vizScript = scripts.filter(function() {\n            return d3.select(this).attr('type') == 'javascript/worker' || (d3.select(this).attr('src') && d3.select(this).attr('src').match(/.*\\/@hpcc-js\\/wasm/));\n        });\n        if (vizScript.size() == 0) {\n            console.warn('No script tag of type \"javascript/worker\" was found and \"useWorker\" is true. Not using web worker.');\n            useWorker = false;\n            useSharedWorker = false;\n        } else {\n            this._vizURL = vizScript.attr('src');\n            if (!this._vizURL) {\n                console.warn('No \"src\" attribute of was found on the \"javascript/worker\" script tag and \"useWorker\" is true. Not using web worker.');\n                useWorker = false;\n                useSharedWorker = false;\n            }\n        }\n    }\n    if (useSharedWorker) {\n        const url = 'data:application/javascript;base64,' + btoa(workerCodeBody.toString() + '(' + sharedWorkerCode.toString() + ')()');\n        this._worker = this._worker = new SharedWorker(url);\n        this._workerPort = this._worker.port;\n        this._workerPortClose = this._worker.port.close.bind(this._workerPort);\n        this._worker.port.start();\n        this._workerCallbacks = [];\n    }\n    else if (useWorker) {\n        var blob = new Blob([workerCodeBody.toString() + '(' + workerCode.toString() + ')()']);\n        var blobURL = window.URL.createObjectURL(blob);\n        this._worker = new Worker(blobURL);\n        this._workerPort = this._worker;\n        this._workerPortClose = this._worker.terminate.bind(this._worker);\n        this._workerCallbacks = [];\n    }\n    hpccWasmGraphvizVersion().then(((version) => {\n        this._graphvizVersion = version;\n    }).bind(this));\n    this._selection = selection;\n    this._active = false;\n    this._busy = false;\n    this._jobs = [];\n    this._queue = [];\n    this._keyModes = new Set([\n        'title',\n        'id',\n        'tag-index',\n        'index'\n    ]);\n    this._images = [];\n    this._translation = undefined;\n    this._scale = undefined;\n    this._eventTypes = [\n        'initEnd',\n        'start',\n        'layoutStart',\n        'layoutEnd',\n        'dataExtractEnd',\n        'dataProcessPass1End',\n        'dataProcessPass2End',\n        'dataProcessEnd',\n        'renderStart',\n        'renderEnd',\n        'transitionStart',\n        'transitionEnd',\n        'restoreEnd',\n        'end',\n        'zoom'\n    ];\n    this._dispatch = dispatch(...this._eventTypes);\n    initViz.call(this);\n    selection.node().__graphviz__ = this;\n}\n\nexport default function graphviz(selector, options) {\n    var g = d3.select(selector).graphviz(options);\n    return g;\n}\n\nGraphviz.prototype = graphviz.prototype = {\n    constructor: Graphviz,\n    engine: engine,\n    addImage: images,\n    keyMode: keyMode,\n    fade: fade,\n    tweenPaths: tweenPaths,\n    tweenShapes: tweenShapes,\n    convertEqualSidedPolygons: convertEqualSidedPolygons,\n    tweenPrecision: tweenPrecision,\n    growEnteringEdges: growEnteringEdges,\n    zoom: zoom,\n    resetZoom: resetZoom,\n    zoomBehavior: zoomBehavior,\n    zoomSelection: zoomSelection,\n    zoomScaleExtent: zoomScaleExtent,\n    zoomTranslateExtent: zoomTranslateExtent,\n    render: render,\n    layout: layout,\n    dot: dot,\n    data: data,\n    renderDot: renderDot,\n    transition: transition,\n    active: active,\n    options: options,\n    width: width,\n    height: height,\n    scale: scale,\n    fit: fit,\n    attributer: attributer,\n    on: on,\n    onerror: onerror,\n    logEvents: logEvents,\n    destroy: destroy,\n    drawEdge: drawEdge,\n    updateDrawnEdge: updateDrawnEdge,\n    moveDrawnEdgeEndPoint,\n    insertDrawnEdge,\n    removeDrawnEdge, removeDrawnEdge,\n    drawnEdgeSelection, drawnEdgeSelection,\n    drawNode: drawNode,\n    updateDrawnNode: updateDrawnNode,\n    moveDrawnNode: moveDrawnNode,\n    insertDrawnNode,\n    removeDrawnNode, removeDrawnNode,\n    drawnNodeSelection, drawnNodeSelection,\n    graphvizVersion: graphvizVersion,\n};\n","import {Graphviz} from \"../graphviz\";\nimport {timeout} from \"d3-timer\";\n\nexport default function(options) {\n\n    var g = this.node().__graphviz__;\n    if (g) {\n        g.options(options);\n        // Ensure a possible new initEnd event handler is attached before calling it\n        timeout(function () {\n            g._dispatch.call(\"initEnd\", this);\n        }.bind(this), 0);\n    } else {\n        g = new Graphviz(this, options);\n    }\n    return g;\n}\n","import * as d3 from \"d3-selection\";\n\nexport default function(name) {\n\n    return d3.select(this.size() > 0 ? this.node().querySelector(name) : null);\n}\n","import {selection} from \"d3-selection\";\nimport selection_graphviz from \"./graphviz\";\nimport selection_selectWithoutDataPropagation from \"./selectWithoutDataPropagation\";\n\nselection.prototype.graphviz = selection_graphviz;\nselection.prototype.selectWithoutDataPropagation = selection_selectWithoutDataPropagation;\n"]},"metadata":{},"sourceType":"script"}