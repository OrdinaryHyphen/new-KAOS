{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\KAOS-modeling-editor\\\\src\\\\ExportAsSvgDialog.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport withRoot from './withRoot';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Input from '@material-ui/core/Input';\n\nconst styles = theme => ({\n  title: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  content: {\n    overflowY: 'visible'\n  }\n});\n\nclass ExportAsSvgDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClose = () => {\n      this.props.onClose();\n    };\n\n    this.handleExportSvg = () => {\n      // TODO: move downloadFile function to a utility module\n      function downloadFile(fileData, fileName, mimeType) {\n        const fileBlob = new Blob([fileData], {\n          type: mimeType\n        });\n        const fileObjectURL = window.URL.createObjectURL(fileBlob);\n        const tempLink = document.createElement('a');\n        tempLink.href = fileObjectURL;\n        tempLink.download = fileName;\n        document.body.appendChild(tempLink);\n        tempLink.click();\n        document.body.removeChild(tempLink);\n      }\n\n      const fileData = this.props.getSvgString();\n      const fileName = this.state.filename;\n      const mimeType = 'image/svg+xml';\n      downloadFile(fileData, fileName, mimeType);\n      this.props.onClose();\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        filename: event.target.value\n      });\n    };\n\n    this.state = {\n      filename: props.defaultFilename\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      id: \"export-graph-as-svg-dialog\",\n      className: classes.root,\n      open: true,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Export Graph as SVG\"), React.createElement(IconButton, {\n      \"aria-label\": \"Close\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }))), React.createElement(DialogContent, {\n      classes: {\n        root: classes.content\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Choose a name for the exported SVG file\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Input, {\n      inputProps: {\n        size: 60\n      },\n      autoFocus: true,\n      id: \"export\",\n      type: \"text\",\n      value: this.state.filename,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Button, {\n      id: \"cancel\",\n      onClick: this.handleClose,\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      id: \"export-svg\",\n      onClick: this.handleExportSvg,\n      color: \"secondary\",\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Export SVG\"))));\n  }\n\n}\n\nExportAsSvgDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  defaultFilename: PropTypes.string.isRequired,\n  getSvgString: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired\n};\nexport default withRoot(withStyles(styles)(ExportAsSvgDialog));","map":{"version":3,"sources":["C:/Users/user/KAOS-modeling-editor/src/ExportAsSvgDialog.js"],"names":["React","PropTypes","withStyles","withRoot","CloseIcon","IconButton","Button","Dialog","DialogContent","DialogContentText","DialogTitle","DialogActions","Input","styles","theme","title","display","justifyContent","content","overflowY","ExportAsSvgDialog","Component","constructor","props","handleClose","onClose","handleExportSvg","downloadFile","fileData","fileName","mimeType","fileBlob","Blob","type","fileObjectURL","window","URL","createObjectURL","tempLink","document","createElement","href","download","body","appendChild","click","removeChild","getSvgString","state","filename","handleChange","event","setState","target","value","defaultFilename","render","classes","root","size","propTypes","object","isRequired","string","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withRoot from './withRoot';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nconst styles = theme => ({\r\n  title: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  content: {\r\n    overflowY: 'visible',\r\n  },\r\n});\r\n\r\nclass ExportAsSvgDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filename: props.defaultFilename,\r\n    };\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.props.onClose();\r\n  };\r\n\r\n  handleExportSvg = () => {\r\n    // TODO: move downloadFile function to a utility module\r\n    function downloadFile(fileData, fileName, mimeType) {\r\n      const fileBlob = new Blob([fileData], {type: mimeType})\r\n      const fileObjectURL = window.URL.createObjectURL(fileBlob)\r\n      const tempLink = document.createElement('a')\r\n      tempLink.href = fileObjectURL\r\n      tempLink.download = fileName\r\n      document.body.appendChild(tempLink)\r\n      tempLink.click()\r\n      document.body.removeChild(tempLink)\r\n    }\r\n    const fileData = this.props.getSvgString()\r\n    const fileName = this.state.filename\r\n    const mimeType = 'image/svg+xml'\r\n    downloadFile(fileData, fileName, mimeType)\r\n    this.props.onClose()\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      filename: event.target.value\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          id=\"export-graph-as-svg-dialog\"\r\n          className={classes.root}\r\n          open\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <div className={classes.title}>\r\n            <DialogTitle id=\"form-dialog-title\">\r\n              Export Graph as SVG\r\n            </DialogTitle>\r\n            <IconButton\r\n              aria-label=\"Close\"\r\n              onClick={this.handleClose}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </div>\r\n          <DialogContent classes={{root: classes.content}}>\r\n            <DialogContentText>\r\n              Choose a name for the exported SVG file\r\n            </DialogContentText>\r\n            <br/>\r\n            <Input\r\n              inputProps={{\r\n                size: 60,\r\n              }}\r\n              autoFocus\r\n              id=\"export\"\r\n              type=\"text\"\r\n              value={this.state.filename}\r\n              onChange={this.handleChange}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button id=\"cancel\" onClick={this.handleClose} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            <Button id=\"export-svg\" onClick={this.handleExportSvg} color=\"secondary\" variant=\"contained\">\r\n              Export SVG\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExportAsSvgDialog.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  defaultFilename: PropTypes.string.isRequired,\r\n  getSvgString: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withRoot(withStyles(styles)(ExportAsSvgDialog));\r\n"]},"metadata":{},"sourceType":"module"}