{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\assisted-goalmodel-editor\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\assisted-goalmodel-editor\\\\src\\\\DescriptionDrawer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\nimport ColorPicker from './ColorPicker';\nconst drawerWidth = '100%';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  hide: {\n    display: 'none'\n  },\n  drawerPaper: {\n    position: 'relative',\n    width: drawerWidth,\n    height: 'calc(100vh - 64px - 2 * 12px)',\n    textAlign: 'left'\n  },\n  drawerHeader: _objectSpread({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    textTransform: 'capitalize'\n  }, theme.mixins.toolbar),\n  styleFormControl: {},\n  styleSwitch: {\n    marginLeft: theme.spacing(2)\n  },\n  styleCheckbox: {\n    marginLeft: theme.spacing(0),\n    marginTop: theme.spacing(-2)\n  },\n  colorFormControl: {\n    marginLeft: theme.spacing(2),\n    marginBottom: theme.spacing(1)\n  },\n  colorSwitch: {\n    marginLeft: theme.spacing(0)\n  }\n});\n\nconst emptyColor = '';\n\nclass DescriptionDrawer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      this.setColorColorPickerOpen(false);\n      this.setFillColorColorPickerOpen(false);\n      this.props.onClick();\n    };\n\n    this.handleDrawerClose = () => {\n      this.props.onFormatDrawerClose();\n    };\n\n    this.handleFillColorSwitchChange = event => {\n      if (event.target.checked) {\n        this.props.onFillColorChange(emptyColor);\n      } else {\n        this.props.onFillColorChange(null);\n      }\n    };\n\n    this.handleFillColorChange = color => {\n      this.props.onFillColorChange(color);\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          theme = _this$props.theme;\n    const type = this.props.type;\n    let currentStyle = this.getStyleSet();\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Drawer, {\n      id: \"format-drawer\",\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: true,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Goal Descriptions\"), React.createElement(IconButton, {\n      id: \"close-button\",\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, theme.direction === 'rtl' ? React.createElement(ChevronRightIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }) : React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })));\n  }\n\n}\n\nFormatDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(DescriptionDrawer);","map":{"version":3,"sources":["C:/Users/user/assisted-goalmodel-editor/src/DescriptionDrawer.js"],"names":["React","PropTypes","withStyles","Drawer","DialogTitle","Divider","IconButton","ChevronLeftIcon","ChevronRightIcon","FormControl","FormGroup","FormControlLabel","Checkbox","Switch","ColorPicker","drawerWidth","styles","theme","root","flexGrow","hide","display","drawerPaper","position","width","height","textAlign","drawerHeader","alignItems","justifyContent","padding","textTransform","mixins","toolbar","styleFormControl","styleSwitch","marginLeft","spacing","styleCheckbox","marginTop","colorFormControl","marginBottom","colorSwitch","emptyColor","DescriptionDrawer","Component","handleClick","setColorColorPickerOpen","setFillColorColorPickerOpen","props","onClick","handleDrawerClose","onFormatDrawerClose","handleFillColorSwitchChange","event","target","checked","onFillColorChange","handleFillColorChange","color","render","classes","type","currentStyle","getStyleSet","paper","direction","FormatDrawer","propTypes","object","isRequired","withTheme"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport ColorPicker from './ColorPicker'\r\n\r\nconst drawerWidth = '100%';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    width: drawerWidth,\r\n    height: 'calc(100vh - 64px - 2 * 12px)',\r\n    textAlign: 'left',\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    textTransform: 'capitalize',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  styleFormControl: {\r\n  },\r\n  styleSwitch: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  styleCheckbox: {\r\n    marginLeft: theme.spacing(0),\r\n    marginTop: theme.spacing(-2),\r\n  },\r\n  colorFormControl: {\r\n    marginLeft: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  colorSwitch: {\r\n    marginLeft: theme.spacing(0),\r\n  },\r\n});\r\n\r\nconst emptyColor = '';\r\n\r\nclass DescriptionDrawer extends React.Component {\r\n\r\n\r\n  handleClick = () => {\r\n    this.setColorColorPickerOpen(false);\r\n    this.setFillColorColorPickerOpen(false);\r\n    this.props.onClick();\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.props.onFormatDrawerClose();\r\n  };\r\n\r\n  handleFillColorSwitchChange = (event) => {\r\n    if (event.target.checked) {\r\n      this.props.onFillColorChange(emptyColor);\r\n    } else {\r\n      this.props.onFillColorChange(null);\r\n    }\r\n  }\r\n  handleFillColorChange = (color) => {\r\n    this.props.onFillColorChange(color);\r\n  };\r\n\r\n  render() {\r\n    const { classes, theme } = this.props;\r\n    const { type } = this.props;\r\n\r\n    let currentStyle = this.getStyleSet();\r\n    return (\r\n      <div className={classes.root}>\r\n        <Drawer\r\n          id=\"format-drawer\"\r\n          variant=\"persistent\"\r\n          anchor='left'\r\n          open\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          onClick={this.handleClick}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <DialogTitle id=\"form-dialog-title\">\r\n              Goal Descriptions\r\n            </DialogTitle>\r\n            <IconButton id=\"close-button\" onClick={this.handleDrawerClose}>\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormatDrawer.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(DescriptionDrawer);"]},"metadata":{},"sourceType":"module"}