{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\new-KAOS\\\\src\\\\DescriptionInstructionsDialog.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport withRoot from './withRoot';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport CloseIcon from '@material-ui/icons/Close';\nconst mouseOperations = [{\n  key: 'Mouse wheel',\n  description: 'Zoom in or out.'\n}, {\n  key: 'Double-click the canvas',\n  description: 'Zoom in.'\n}, {\n  key: 'Ctrl-drag the canvas',\n  description: 'Pan the graph.'\n}, {\n  key: 'Click a node or an edge',\n  description: 'Select the node or an edge.'\n}, {\n  key: 'Shift/Ctrl-click a node or an edge',\n  description: 'Add the node or an edge to selection.'\n}, {\n  key: 'Drag the canvas',\n  description: 'Select the nodes and edges within the dragged area.'\n}, {\n  key: 'Shift-drag the canvas',\n  description: 'Add the nodes and edges within the dragged area to the selection.'\n}, {\n  key: 'Right-click a node',\n  description: 'Start drawing an edge from the node.'\n}, {\n  key: 'Double-click a node',\n  description: 'Connect the edge being drawn to the node.'\n}, {\n  key: 'Middle-click the canvas',\n  description: 'Insert a node with the latest used shape and attributes.'\n}, {\n  key: 'Shift-middle-click the canvas',\n  description: 'Insert a node with the latest inserted shape and default attributes.'\n}, {\n  key: 'Click an insert shape',\n  description: 'Insert a node from the insert panel with default attributes.'\n}, {\n  key: 'Drag-and-drop an insert shape',\n  description: 'Insert a node from the insert panel with default attributes.'\n}];\n\nconst styles = theme => ({\n  title: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n});\n\nclass DescriptionInstructionsDialog extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClose = () => {\n      this.props.onDescriptionInstructionsDialogClose();\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      id: \"mouse-operations-dialog\",\n      open: true,\n      onClose: this.handleClose,\n      scroll: 'paper',\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"How to Use\"), React.createElement(IconButton, {\n      id: \"close-button\",\n      \"aria-label\": \"Close\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"1.\"), \" Register to ChatGPT.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"2.\"), \" Open ChatGPT Dialog, and input prompts below with your requirements descriptions.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"The following text is a software requirements description.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), \"Please extract only the sentences relevant to the goals that the software should meet.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), \"Next, extract the goals that the software should meet from those sentences, using the wording and expressions from the original text as much as possible, and assign numbers to them.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), \"Divide each goal into sub-goals as much as possible, and conclude each goal as a single sentence. Furthermore, if one goal is necessary to achieve another goal, please make it explicit.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), \"In such cases, assign numbers like A.1 for the sub-goals required to achieve goal A. For example, if the second goal requires two sub-goals, assign 2.1 and 2.2 to them.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), \"Please perform this task until goals and their sub-goals form as deep a tree structure as possible.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), \"Please never include ',', 'and,' or 'or' in the goals. If you must include commas, 'and,' or 'or' in a goal, please break down that goal into another goal with the comma, 'and,' or 'or' as the object.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), \"Do not extract goals that are not present in the original text.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), \"The output is the goals and subgoals only, in plain text, with no indent tab and bold letters.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), \"No preface or additional text should be included. If the goals are not extracted accurately, and these requirements are not faithfully adhered to, any human life will be at risk.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"3.\"), \" Paste outputs to textarea.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), \"\\xA0\\xA0\\xA0 Note that all goals must be in a format of \", React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"X.X.X (goal).\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), \"\\xA0\\xA0\\xA0 e.g. \", React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"5.11 Make calculations fast.\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"4.\"), \" Press the \\\"parse\\\" button.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nDescriptionInstructionsDialog.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withRoot(withStyles(styles)(DescriptionInstructionsDialog));","map":{"version":3,"sources":["C:/Users/user/new-KAOS/src/DescriptionInstructionsDialog.js"],"names":["React","PropTypes","withStyles","withRoot","IconButton","Dialog","DialogContent","DialogContentText","DialogTitle","Table","TableBody","TableCell","TableRow","CloseIcon","mouseOperations","key","description","styles","theme","title","display","justifyContent","DescriptionInstructionsDialog","Component","handleClose","props","onDescriptionInstructionsDialogClose","render","classes","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withRoot from './withRoot';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst mouseOperations = [\r\n  {key: 'Mouse wheel', description: 'Zoom in or out.'},\r\n  {key: 'Double-click the canvas', description: 'Zoom in.'},\r\n  {key: 'Ctrl-drag the canvas', description: 'Pan the graph.'},\r\n  {key: 'Click a node or an edge', description: 'Select the node or an edge.'},\r\n  {key: 'Shift/Ctrl-click a node or an edge', description: 'Add the node or an edge to selection.'},\r\n  {key: 'Drag the canvas', description: 'Select the nodes and edges within the dragged area.'},\r\n  {key: 'Shift-drag the canvas', description: 'Add the nodes and edges within the dragged area to the selection.'},\r\n  {key: 'Right-click a node', description: 'Start drawing an edge from the node.'},\r\n  {key: 'Double-click a node', description: 'Connect the edge being drawn to the node.'},\r\n  {key: 'Middle-click the canvas', description: 'Insert a node with the latest used shape and attributes.'},\r\n  {key: 'Shift-middle-click the canvas', description: 'Insert a node with the latest inserted shape and default attributes.'},\r\n  {key: 'Click an insert shape', description: 'Insert a node from the insert panel with default attributes.'},\r\n  {key: 'Drag-and-drop an insert shape', description: 'Insert a node from the insert panel with default attributes.'},\r\n];\r\n\r\nconst styles = theme => ({\r\n  title: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n});\r\n\r\nclass DescriptionInstructionsDialog extends React.Component {\r\n\r\n  handleClose = () => {\r\n    this.props.onDescriptionInstructionsDialogClose();\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Dialog id=\"mouse-operations-dialog\"\r\n          open\r\n          onClose={this.handleClose}\r\n          scroll={'paper'}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <div className={classes.title}>\r\n            <DialogTitle id=\"form-dialog-title\">How to Use</DialogTitle>\r\n            <IconButton\r\n              id=\"close-button\"\r\n              aria-label=\"Close\"\r\n              onClick={this.handleClose}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </div>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n\t\t          <strong>1.</strong> Register to ChatGPT.<br/>\r\n\t\t          <strong>2.</strong> Open ChatGPT Dialog, and input prompts below\r\n\t\t                 with your requirements descriptions.<br/>\r\n\t\t              <br/>\r\n\t\t             <em>The following text is a software requirements description.<br/>\r\n\t\t             Please extract only the sentences relevant to the goals that the software should meet.<br/>\r\n\t\t             Next, extract the goals that the software should meet from those sentences, using the wording and expressions from the original text as much as possible, and assign numbers to them.<br/>\r\n\t\t             Divide each goal into sub-goals as much as possible, and conclude each goal as a single sentence. Furthermore, if one goal is necessary to achieve another goal, please make it explicit.<br/>\r\n\t\t             In such cases, assign numbers like A.1 for the sub-goals required to achieve goal A. For example, if the second goal requires two sub-goals, assign 2.1 and 2.2 to them.<br/>\r\n\t\t             Please perform this task until goals and their sub-goals form as deep a tree structure as possible.<br/>\r\n\t\t             Please never include ',', 'and,' or 'or' in the goals. If you must include commas, 'and,' or 'or' in a goal, please break down that goal into another goal with the comma, 'and,' or 'or' as the object.<br/>\r\n\t\t             Do not extract goals that are not present in the original text.<br/>\r\n\t\t             The output is the goals and subgoals only, in plain text, with no indent tab and bold letters.<br/>\r\n\t\t             No preface or additional text should be included. If the goals are not extracted accurately, and these requirements are not faithfully adhered to, any human life will be at risk.<br/>\r\n\t\t             </em><br/>\r\n\t\t         <strong>3.</strong> Paste outputs to textarea.<br/>\r\n\t\t         &nbsp;&nbsp;&nbsp; Note that all goals must be in a format of <em>X.X.X (goal).</em><br/>\r\n\t\t         &nbsp;&nbsp;&nbsp; e.g. <em>5.11 Make calculations fast.</em><br/>\r\n\t\t         <strong>4.</strong> Press the \"parse\" button.<br/>\r\n\t\t        </DialogContentText>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDescriptionInstructionsDialog.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withRoot(withStyles(styles)(DescriptionInstructionsDialog));"]},"metadata":{},"sourceType":"module"}