{"ast":null,"code":"import parser from './dotParser';\nvar parse = parser.parse;\nconst whitespaceWithinLine = ' \\t\\r';\nconst whitespace = whitespaceWithinLine + '\\n';\nconst statementSeparators = whitespace + ';';\nexport default class DotGraph {\n  constructor(dotSrc) {\n    this.dotSrc = dotSrc;\n    this.reparse();\n  }\n\n  reparse() {\n    this.parseDot(this.dotSrc);\n  }\n\n  insertNode(nodeName, attributes) {\n    var attributesString = toAttributesString(attributes);\n    var newNodeString = '    ' + nodeName + attributesString;\n    this.insertAtEndOfGraph(newNodeString + '\\n');\n  }\n\n  insertEdge(startNodeName, endNodeName, attributes) {\n    var attributesString = toAttributesString(attributes);\n    var newEdgeString = '    ' + startNodeName + ' -> ' + endNodeName + attributesString;\n    this.insertAtEndOfGraph(newEdgeString + '\\n');\n  }\n\n  deleteNode(nodeName) {\n    this.deleteComponent('node', nodeName);\n  }\n\n  deleteEdge(edgeName) {\n    let nodeNames = edgeName.split('--');\n\n    if (nodeNames.length !== 2) {\n      nodeNames = edgeName.split('->');\n    }\n\n    this.deleteComponent('edge', ...nodeNames);\n  }\n\n  getNodeAttributes(nodeName) {\n    if (this.nodes[nodeName]) {\n      return this.nodes[nodeName].attributes;\n    } else {\n      return null;\n    }\n  }\n\n  getEdgeAttributes(edgeName) {\n    if (this.edges[edgeName]) {\n      return this.edges[edgeName].attributes;\n    } else {\n      return null;\n    }\n  }\n\n  parseDot() {\n    this.ast = parse(this.dotSrc)[0];\n    const children = this.ast.children;\n    this.nodes = {};\n    this.edges = {};\n    this.edgeop = this.ast.type === 'digraph' ? '->' : '--';\n    this.parseChildren(children, this.ast);\n    this.components = Object.assign({}, this.nodes, this.edges);\n  }\n\n  parseChildren(children, parent) {\n    children.forEach((child, i) => {\n      if (child.type === 'node_stmt') {\n        this.parseChildren([child.node_id], child);\n        const attributes = child.attr_list.reduce(function (attrs, attr, i) {\n          attrs[attr.id] = attr.eq;\n          return attrs;\n        }, {});\n        Object.assign(this.nodes[child.node_id.id].attributes, attributes);\n      } else if (child.type === 'node_id') {\n        const nodeId = child.id;\n\n        if (this.nodes[nodeId] == null) {\n          this.nodes[nodeId] = {\n            locations: [],\n            attributes: {}\n          };\n        }\n\n        if (parent.type === 'node_stmt') {\n          this.nodes[nodeId].locations.push(parent.location);\n        } else {\n          this.nodes[nodeId].locations.push(child.location);\n        }\n\n        if (parent.type === 'edge_stmt') {\n          if (i > 0) {\n            const nodeIds = [children[i - 1], child];\n            const nodeNames = nodeIds.map(nodeId => nodeId.id + (nodeId.port ? ':' + nodeId.port.id : ''));\n            const edgeId = nodeNames[0] + this.edgeop + nodeNames[1];\n\n            if (this.edges[edgeId] == null) {\n              this.edges[edgeId] = {\n                locations: [],\n                attributes: {}\n              };\n            }\n\n            const location = {\n              start: nodeIds[0].location.end,\n              end: nodeIds[1].location.start\n            };\n            this.edges[edgeId].locations.push(location);\n          }\n        }\n      } else if (child.type === 'edge_stmt') {\n        this.parseChildren(child.edge_list, child); // FIXME: add support for attributes\n      } else if (child.type === 'subgraph') {\n        this.parseChildren(child.children, child);\n      }\n    });\n  }\n\n  toString() {\n    this.str = '';\n    this.edgeop = this.ast.type === 'digraph' ? '->' : '--';\n\n    if (this.ast.strict) {\n      this.str += 'strict ';\n    }\n\n    this.str += this.ast.type + ' ';\n\n    if (this.ast.id) {\n      this.str += quoteIdIfNecessary(this.ast.id) + ' ';\n    }\n\n    this.str += '{';\n    this.toStringChildren(this.ast.children);\n    this.str += '}';\n    return this.str;\n  }\n\n  toStringChildren(children, separator = ' ') {\n    children.forEach((child, i) => {\n      if (child.type === 'pad') {\n        return;\n      }\n\n      if (child.type === 'newline') {\n        return;\n      }\n\n      if (child.type === 'comment') {\n        return;\n      }\n\n      if (child.type === 'stmt_sep') {\n        return;\n      }\n\n      if (i > 0) {\n        this.str += separator;\n      }\n\n      if (child.type === 'attr_stmt') {\n        this.str += quoteIdIfNecessary(child.target);\n\n        if (child.attr_list.length > 0) {\n          this.str += ' [';\n          this.toStringChildren(child.attr_list);\n          this.str += ']';\n        }\n      }\n\n      if (child.type === 'node_stmt') {\n        this.toStringChildren([child.node_id]);\n\n        if (child.attr_list.length > 0) {\n          this.str += ' [';\n          this.toStringChildren(child.attr_list);\n          this.str += ']';\n        }\n      } else if (child.type === 'node_id') {\n        this.str += quoteIdIfNecessary(child.id);\n\n        if (typeof child.port === 'object') {\n          this.str += ':';\n          this.toStringChildren([child.port]);\n        }\n      } else if (child.type === 'id') {\n        if (child.html) {\n          this.str += '<' + child.value + '>';\n        }\n      } else if (child.type === 'port') {\n        this.str += child.id;\n\n        if (child.compass_pt) {\n          this.str += ':' + child.compass_pt;\n        }\n      } else if (child.type === 'attr') {\n        if (typeof child.eq === 'object') {\n          this.str += quoteIdIfNecessary(child.id) + '=';\n          this.toStringChildren([child.eq]);\n        } else {\n          this.str += quoteIdIfNecessary(child.id) + '=' + quoteIdIfNecessary(child.eq);\n        }\n      } else if (child.type === 'edge_stmt') {\n        this.toStringChildren(child.edge_list, ' ' + this.edgeop + ' ');\n\n        if (child.attr_list.length > 0) {\n          this.str += ' [';\n          this.toStringChildren(child.attr_list);\n          this.str += ']';\n        }\n      } else if (child.type === 'subgraph') {\n        if (child.id) {\n          this.str += 'subgraph ' + quoteIdIfNecessary(child.id);\n        }\n\n        this.str += '{';\n        this.toStringChildren(child.children);\n        this.str += '}';\n      }\n    });\n  }\n\n  insertAtEndOfGraph(string) {\n    this.deleteComponent(null);\n    this.index -= 1;\n    this.insert(string);\n  }\n\n  deleteComponent(type, id, edgeRHSId) {\n    this.numDeletedComponents = 0;\n    this.edgeop = this.ast.type === 'digraph' ? '->' : '--';\n    this.index = 0;\n    this.skippableIndex = 0;\n    this.erasedIndex = -1;\n    this.numErased = 0;\n\n    if (this.ast.strict) {\n      this.skip('strict');\n    }\n\n    this.skip(this.ast.type);\n\n    if (this.ast.id) {\n      this.skip(this.ast.id);\n    }\n\n    this.skip('{');\n    this.deleteComponentInStatementList(this.ast.children, type, id, edgeRHSId);\n    this.skip('}');\n  }\n\n  deleteComponentInStatementList(statementList, type, id, edgeRHSId, erase) {\n    statementList.forEach((statement, i) => {\n      let erasedStatement = false;\n\n      if (statement.type === 'attr_stmt') {\n        const targetIsGraph = statement.target === 'graph';\n        this.skip(statement.target, false, {\n          optional: targetIsGraph\n        });\n        this.skipAttrList(statement.attr_list, false, targetIsGraph);\n      } else if (statement.type === 'node_stmt') {\n        const eraseNode = type === 'node' && statement.node_id.id === id;\n        this.skipLocation(statement, eraseNode);\n\n        if (eraseNode) {\n          erasedStatement = true;\n          this.numDeletedComponents += 1;\n        }\n      } else if (statement.type === 'edge_stmt') {\n        let edgeList = statement.edge_list;\n        let erasedLastEdgeStatement = true;\n        let erasedAllEdgeConnections = true;\n        edgeList.forEach((edgeConnection, i) => {\n          if (edgeConnection.type === 'subgraph') {\n            const subgraph = edgeConnection;\n            const isFirstStatement = i === 0;\n\n            if (!isFirstStatement) {\n              const eraseEdge = erasedAllEdgeConnections;\n              this.skipLocationBetween(edgeList[i - 1], subgraph, eraseEdge, true);\n\n              if (eraseEdge) {\n                this.numDeletedComponents += 1;\n              } else {\n                erasedLastEdgeStatement = false;\n              }\n\n              this.skipLocationBetween(edgeList[i - 1], subgraph, false, true);\n              erasedLastEdgeStatement = false;\n            }\n\n            this.deleteComponentInStatementList([subgraph], type, id, edgeRHSId);\n            erasedAllEdgeConnections = false;\n          } else {\n            const nodeId = edgeConnection;\n            const eraseNode = type === 'node' && nodeId.id === id;\n            const isFirstStatement = i === 0;\n\n            if (!isFirstStatement) {\n              const nodeIdLeft = getNodeIdString(edgeList[i - 1]);\n              const nodeIdRight = getNodeIdString(nodeId);\n              const splitEdge = type === 'edge' && nodeIdLeft === id && nodeIdRight === edgeRHSId;\n              const eraseEdge = eraseNode || erasedAllEdgeConnections || splitEdge;\n              this.skipLocationBetween(edgeList[i - 1], nodeId, eraseEdge, true);\n\n              if (splitEdge) {\n                this.insert(' ');\n                erasedLastEdgeStatement = true;\n              }\n\n              if (eraseEdge) {\n                this.numDeletedComponents += 1;\n              } else {\n                erasedAllEdgeConnections = false;\n                erasedLastEdgeStatement = false;\n              }\n            }\n\n            if (eraseNode) {\n              this.numDeletedComponents += 1;\n            } else {\n              erasedAllEdgeConnections = false;\n            }\n\n            this.skipLocation(nodeId, eraseNode, true);\n          }\n        });\n        erasedStatement = erasedAllEdgeConnections;\n        this.skipLocation(statement, erasedLastEdgeStatement, true);\n\n        if (erasedLastEdgeStatement) {\n          this.skipPrevious(erasedLastEdgeStatement);\n\n          if (statement.attr_list.length > 0) {\n            if (!statementSeparators.includes(this.dotSrc[this.index - 1]) && !statementSeparators.includes(this.dotSrc[this.index])) {\n              this.insert(' ');\n            }\n          }\n        }\n      } else if (statement.type === 'subgraph') {\n        this.skipOptional('subgraph');\n\n        if (statement.id) {\n          this.skip(statement.id);\n        }\n\n        this.skip('{');\n        this.deleteComponentInStatementList(statement.children, type, id, edgeRHSId);\n        this.skip('}');\n      }\n\n      this.skipSeparators(erasedStatement, {\n        skipSemicolon: true\n      });\n    });\n    this.skipPrevious(true);\n  }\n\n  skipId(id, erase) {\n    if (id.html) {\n      this.skip('<', erase);\n      this.skip(id.value, erase, {\n        noSkipNewline: true\n      });\n      this.skip('>', erase);\n    } else {\n      this.skip(id.eq, erase);\n    }\n  }\n\n  skipNodeId(nodeId, erase) {\n    this.skip(nodeId.id, erase);\n\n    if (nodeId.port) {\n      this.skip(':', erase);\n      this.skipPort(nodeId.port, erase);\n    }\n  }\n\n  skipPort(port, erase) {\n    this.skip(port.id, erase);\n\n    if (port.compass_pt) {\n      this.skip(':', erase);\n      this.skip(port.compass_pt, erase);\n    }\n  }\n\n  skipAttrList(attrList, erase, optionalSquareBrackets) {\n    const attrListOptions = {\n      skipComma: true,\n      skipSemicolon: true\n    };\n    attrList.forEach((attr, i) => {\n      this.skip('[', erase, {\n        optional: optionalSquareBrackets || i > 0\n      });\n      this.skip(attr.id, erase, attrListOptions);\n      this.skip('=', erase);\n\n      if (typeof attr.eq === 'object' && attr.eq.type === 'id') {\n        this.skipId(attr.eq, erase);\n      } else {\n        this.skip(attr.eq, erase);\n      }\n\n      this.skip(']', erase, {\n        optional: optionalSquareBrackets || i < attrList.length - 1\n      });\n    });\n  }\n\n  skipOptional(string, erase = false, options = {}) {\n    options = Object.assign({\n      optional: true\n    }, options);\n    this.skip(string, erase, options);\n  }\n\n  skipSeparators(erase = false, options = {}) {\n    let index = this.index;\n    let skipIndex = this.index;\n    let prevIndex = null;\n    let prevLength = null;\n\n    function skipPartially(nextIndex) {\n      if (erase) {\n        if (this.skippableIndex <= this.erasedIndex) {\n          if (this.dotSrc[index] === '\\n') {\n            if (this.dotSrc[this.skippableIndex - 1] === '\\n') {\n              skipIndex = this.skippableIndex - 1;\n            } else {\n              skipIndex = this.skippableIndex;\n            }\n          }\n        }\n\n        this.eraseBetween(skipIndex, index);\n        nextIndex -= index - skipIndex;\n        erase = false;\n      }\n\n      index = nextIndex;\n      skipIndex = nextIndex;\n      this.skippableIndex = nextIndex;\n    }\n\n    while (index !== prevIndex || this.dotSrc.length !== prevLength) {\n      prevIndex = index;\n      prevLength = this.dotSrc.length;\n\n      if (whitespaceWithinLine.includes(this.dotSrc[index])) {\n        index += 1;\n      }\n\n      if (options.skipComma) {\n        if (this.dotSrc[index] === ',') {\n          index += 1;\n        }\n      }\n\n      if (options.skipSemicolon) {\n        if (this.dotSrc[index] === ';') {\n          index += 1;\n        }\n      }\n\n      if (!options.noSkipNewline) {\n        if (this.dotSrc[index] === '\\n') {\n          const nextIndex = index + 1;\n          skipPartially.call(this, nextIndex);\n        }\n      }\n\n      if (this.dotSrc.startsWith('/*', index)) {\n        const nextIndex = this.dotSrc.indexOf('*/', index + 2) + 2;\n        skipPartially.call(this, nextIndex);\n      }\n\n      if (this.dotSrc.startsWith('//', index)) {\n        const nextIndex = this.dotSrc.indexOf('\\n', index + 2) + 1;\n        skipPartially.call(this, nextIndex);\n      }\n\n      if (this.dotSrc.startsWith('#', index)) {\n        const nextIndex = this.dotSrc.indexOf('\\n', index + 1) + 1;\n        skipPartially.call(this, nextIndex);\n      }\n    }\n\n    if (erase) {\n      this.eraseBetween(skipIndex, index);\n    } else {\n      this.index = index;\n    }\n  }\n\n  skip(string, erase = false, options = {}) {\n    this.skipSeparators(false, options);\n    let index = this.index;\n    let skipIndex = index;\n\n    if (this.dotSrc[index] === '\"') {\n      string = quoteId(string);\n    }\n\n    let found = false;\n\n    if (!this.dotSrc.startsWith(string, index)) {\n      if (!options.optional) {\n        throw Error('Expected \"' + string + '\", found: \"' + this.dotSrc.slice(index, index + 40) + '...\"');\n      }\n    } else {\n      index += string.length;\n      found = true;\n    }\n\n    if (erase) {\n      this.eraseBetween(skipIndex, index);\n      this.skipSeparators(erase);\n    } else {\n      this.index = index;\n\n      if (found && string.length > 0) {\n        this.skippableIndex = index;\n      }\n    }\n\n    return found;\n  }\n\n  skipPrevious(erase) {\n    if (erase) {\n      if (this.skippableIndex <= this.erasedIndex) {\n        this.eraseBetween(this.skippableIndex, this.index);\n        this.index = this.skippableIndex;\n      }\n    } else {\n      this.skippableIndex = this.index;\n    }\n  }\n\n  skipLocationBetween(startAstNode, endAstNode, erase, ignoreStart) {\n    let startIndex = startAstNode.location.end.offset - this.numErased;\n    const endIndex = endAstNode.location.start.offset - this.numErased;\n    this.skipBetween(startIndex, endIndex, erase, ignoreStart);\n  }\n\n  skipLocation(astNode, erase, ignoreStart) {\n    let startIndex = astNode.location.start.offset - this.numErased;\n    const endIndex = astNode.location.end.offset - this.numErased;\n    this.skipBetween(startIndex, endIndex, erase, ignoreStart);\n  }\n\n  skipBetween(startIndex, endIndex, erase, ignoreStart) {\n    if (ignoreStart) {\n      startIndex = this.index;\n    } else {\n      if (startIndex !== this.index) {\n        throw Error('Unexpected index ' + this.index + ', expected ' + startIndex);\n      }\n    }\n\n    if (erase) {\n      this.eraseBetween(startIndex, endIndex);\n    } else {\n      this.index = endIndex;\n\n      if (startIndex !== endIndex) {\n        this.skippableIndex = this.index;\n      }\n    }\n  }\n\n  eraseBetween(startIndex, endIndex) {\n    if (startIndex !== endIndex) {\n      this.dotSrc = this.dotSrc.slice(0, startIndex) + this.dotSrc.slice(endIndex);\n      this.erasedIndex = startIndex;\n      this.numErased += endIndex - startIndex;\n    }\n  }\n\n  insert(string) {\n    this.dotSrc = this.dotSrc.slice(0, this.index) + string + this.dotSrc.slice(this.index);\n    this.index += string.length;\n    this.numErased -= string.length;\n  }\n\n}\n\nfunction getNodeIdString(astNode) {\n  let str = astNode.id;\n\n  if (astNode.port) {\n    str += ':' + astNode.port.id;\n\n    if (astNode.port.compass_pt) {\n      str += ':' + astNode.port.compass_pt;\n    }\n  }\n\n  return str;\n}\n\nfunction quoteId(value) {\n  value = value.replace(/\"/g, '\\\\\"');\n  value = '\"' + value + '\"';\n  return value;\n}\n\nfunction quoteIdIfNecessary(value) {\n  let re = '^[a-zA-Z\\\\x80-\\\\xff_][a-zA-Z\\\\x80-\\\\xff_0-9]*$';\n\n  if (!value.match(re)) {\n    value = quoteId(value);\n  }\n\n  return value;\n}\n\nfunction toAttributesString(attributes) {\n  var attributesString = '';\n\n  for (var name of Object.keys(attributes)) {\n    if (attributes[name] != null) {\n      let value = attributes[name].toString();\n      value = quoteIdIfNecessary(value);\n      attributesString += ' ' + name + '=' + value;\n    }\n  }\n\n  if (attributesString) {\n    attributesString = ' [' + attributesString + ']';\n  }\n\n  return attributesString;\n}","map":{"version":3,"sources":["C:/Users/user/assisted-goalmodel-editor/src/dot.js"],"names":["parser","parse","whitespaceWithinLine","whitespace","statementSeparators","DotGraph","constructor","dotSrc","reparse","parseDot","insertNode","nodeName","attributes","attributesString","toAttributesString","newNodeString","insertAtEndOfGraph","insertEdge","startNodeName","endNodeName","newEdgeString","deleteNode","deleteComponent","deleteEdge","edgeName","nodeNames","split","length","getNodeAttributes","nodes","getEdgeAttributes","edges","ast","children","edgeop","type","parseChildren","components","Object","assign","parent","forEach","child","i","node_id","attr_list","reduce","attrs","attr","id","eq","nodeId","locations","push","location","nodeIds","map","port","edgeId","start","end","edge_list","toString","str","strict","quoteIdIfNecessary","toStringChildren","separator","target","html","value","compass_pt","string","index","insert","edgeRHSId","numDeletedComponents","skippableIndex","erasedIndex","numErased","skip","deleteComponentInStatementList","statementList","erase","statement","erasedStatement","targetIsGraph","optional","skipAttrList","eraseNode","skipLocation","edgeList","erasedLastEdgeStatement","erasedAllEdgeConnections","edgeConnection","subgraph","isFirstStatement","eraseEdge","skipLocationBetween","nodeIdLeft","getNodeIdString","nodeIdRight","splitEdge","skipPrevious","includes","skipOptional","skipSeparators","skipSemicolon","skipId","noSkipNewline","skipNodeId","skipPort","attrList","optionalSquareBrackets","attrListOptions","skipComma","options","skipIndex","prevIndex","prevLength","skipPartially","nextIndex","eraseBetween","call","startsWith","indexOf","quoteId","found","Error","slice","startAstNode","endAstNode","ignoreStart","startIndex","offset","endIndex","skipBetween","astNode","replace","re","match","name","keys"],"mappings":"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","sourcesContent":["import parser from './dotParser';\r\nvar parse = parser.parse;\r\n\r\nconst whitespaceWithinLine = ' \\t\\r';\r\nconst whitespace = whitespaceWithinLine + '\\n';\r\nconst statementSeparators = whitespace + ';';\r\n\r\nexport default class DotGraph {\r\n  constructor(dotSrc) {\r\n    this.dotSrc = dotSrc;\r\n    this.reparse();\r\n  }\r\n\r\n  reparse() {\r\n    this.parseDot(this.dotSrc);\r\n  }\r\n\r\n  insertNode(nodeName, attributes) {\r\n    var attributesString = toAttributesString(attributes);\r\n    var newNodeString = '    ' + nodeName + attributesString;\r\n    this.insertAtEndOfGraph(newNodeString + '\\n');\r\n  }\r\n\r\n  insertEdge(startNodeName, endNodeName, attributes) {\r\n    var attributesString = toAttributesString(attributes);\r\n    var newEdgeString = '    ' + startNodeName + ' -> ' + endNodeName + attributesString;\r\n    this.insertAtEndOfGraph(newEdgeString + '\\n');\r\n  }\r\n\r\n  deleteNode(nodeName) {\r\n    this.deleteComponent('node', nodeName);\r\n  }\r\n\r\n  deleteEdge(edgeName) {\r\n    let nodeNames = edgeName.split('--');\r\n    if (nodeNames.length !== 2) {\r\n      nodeNames = edgeName.split('->');\r\n    }\r\n    this.deleteComponent('edge', ...nodeNames);\r\n  }\r\n\r\n  getNodeAttributes(nodeName) {\r\n    if (this.nodes[nodeName]) {\r\n      return this.nodes[nodeName].attributes;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getEdgeAttributes(edgeName) {\r\n    if (this.edges[edgeName]) {\r\n      return this.edges[edgeName].attributes;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  parseDot() {\r\n    this.ast = parse(this.dotSrc)[0];\r\n    const children = this.ast.children;\r\n    this.nodes = {};\r\n    this.edges = {};\r\n    this.edgeop = this.ast.type === 'digraph' ? '->' : '--';\r\n    this.parseChildren(children, this.ast);\r\n    this.components = Object.assign({}, this.nodes, this.edges);\r\n  }\r\n\r\n  parseChildren(children, parent) {\r\n    children.forEach((child, i) => {\r\n      if (child.type === 'node_stmt') {\r\n        this.parseChildren([child.node_id], child);\r\n        const attributes = child.attr_list.reduce(function(attrs, attr, i) {\r\n          attrs[attr.id] = attr.eq;\r\n          return attrs;\r\n        }, {});\r\n        Object.assign(this.nodes[child.node_id.id].attributes, attributes);\r\n      }\r\n      else if (child.type === 'node_id') {\r\n        const nodeId = child.id;\r\n        if (this.nodes[nodeId] == null) {\r\n          this.nodes[nodeId] = {\r\n            locations: [],\r\n            attributes: {},\r\n          };\r\n        }\r\n        if (parent.type === 'node_stmt') {\r\n          this.nodes[nodeId].locations.push(parent.location);\r\n        } else {\r\n          this.nodes[nodeId].locations.push(child.location);\r\n        }\r\n        if (parent.type === 'edge_stmt') {\r\n          if (i > 0) {\r\n            const nodeIds = [children[i - 1], child];\r\n            const nodeNames = nodeIds.map((nodeId) => nodeId.id + (nodeId.port ? ':' + nodeId.port.id : ''));\r\n            const edgeId = nodeNames[0] + this.edgeop + nodeNames[1];\r\n            if (this.edges[edgeId] == null) {\r\n              this.edges[edgeId] = {\r\n                locations: [],\r\n                attributes: {},\r\n              };\r\n            }\r\n            const location = {\r\n              start: nodeIds[0].location.end,\r\n              end: nodeIds[1].location.start,\r\n            }\r\n            this.edges[edgeId].locations.push(location);\r\n          }\r\n        }\r\n      }\r\n      else if (child.type === 'edge_stmt') {\r\n        this.parseChildren(child.edge_list, child);\r\n        // FIXME: add support for attributes\r\n      }\r\n      else if (child.type === 'subgraph') {\r\n        this.parseChildren(child.children, child);\r\n      }\r\n    });\r\n  }\r\n\r\n  toString() {\r\n    this.str = ''\r\n    this.edgeop = this.ast.type === 'digraph' ? '->' : '--';\r\n    if (this.ast.strict) {\r\n      this.str += 'strict ';\r\n    }\r\n    this.str += this.ast.type + ' ';\r\n    if (this.ast.id) {\r\n      this.str += quoteIdIfNecessary(this.ast.id) + ' ';\r\n    }\r\n    this.str += '{';\r\n    this.toStringChildren(this.ast.children);\r\n    this.str += '}';\r\n    return this.str;\r\n  }\r\n\r\n  toStringChildren(children, separator=' ') {\r\n    children.forEach((child, i) => {\r\n      if (child.type === 'pad') {\r\n        return;\r\n      }\r\n      if (child.type === 'newline') {\r\n        return;\r\n      }\r\n      if (child.type === 'comment') {\r\n        return;\r\n      }\r\n      if (child.type === 'stmt_sep') {\r\n        return;\r\n      }\r\n      if (i > 0) {\r\n        this.str += separator;\r\n      }\r\n      if (child.type === 'attr_stmt') {\r\n        this.str += quoteIdIfNecessary(child.target);\r\n        if (child.attr_list.length > 0) {\r\n          this.str += ' [';\r\n          this.toStringChildren(child.attr_list);\r\n          this.str += ']';\r\n        }\r\n      }\r\n      if (child.type === 'node_stmt') {\r\n        this.toStringChildren([child.node_id]);\r\n        if (child.attr_list.length > 0) {\r\n          this.str += ' [';\r\n          this.toStringChildren(child.attr_list);\r\n          this.str += ']';\r\n        }\r\n      }\r\n      else if (child.type === 'node_id') {\r\n        this.str += quoteIdIfNecessary(child.id);\r\n        if (typeof child.port === 'object') {\r\n          this.str += ':';\r\n          this.toStringChildren([child.port]);\r\n        }\r\n      }\r\n      else if (child.type === 'id') {\r\n        if (child.html) {\r\n          this.str += '<' + child.value + '>';\r\n        }\r\n      }\r\n      else if (child.type === 'port') {\r\n        this.str += child.id;\r\n        if (child.compass_pt) {\r\n          this.str += ':' + child.compass_pt;\r\n        }\r\n      }\r\n      else if (child.type === 'attr') {\r\n        if (typeof child.eq === 'object') {\r\n          this.str += quoteIdIfNecessary(child.id) + '=';\r\n          this.toStringChildren([child.eq]);\r\n        } else {\r\n          this.str += quoteIdIfNecessary(child.id) + '=' + quoteIdIfNecessary(child.eq);\r\n        }\r\n      }\r\n      else if (child.type === 'edge_stmt') {\r\n        this.toStringChildren(child.edge_list, ' ' + this.edgeop + ' ');\r\n        if (child.attr_list.length > 0) {\r\n          this.str += ' [';\r\n          this.toStringChildren(child.attr_list);\r\n          this.str += ']';\r\n        }\r\n      }\r\n      else if (child.type === 'subgraph') {\r\n        if (child.id) {\r\n          this.str += 'subgraph ' + quoteIdIfNecessary(child.id);\r\n        }\r\n        this.str += '{';\r\n        this.toStringChildren(child.children);\r\n        this.str += '}';\r\n      }\r\n    });\r\n  }\r\n\r\n  insertAtEndOfGraph(string) {\r\n    this.deleteComponent(null);\r\n    this.index -= 1;\r\n    this.insert(string);\r\n  }\r\n\r\n  deleteComponent(type, id, edgeRHSId) {\r\n    this.numDeletedComponents = 0;\r\n    this.edgeop = this.ast.type === 'digraph' ? '->' : '--';\r\n    this.index = 0;\r\n    this.skippableIndex = 0;\r\n    this.erasedIndex = -1;\r\n    this.numErased = 0;\r\n    if (this.ast.strict) {\r\n      this.skip('strict');\r\n    }\r\n    this.skip(this.ast.type);\r\n    if (this.ast.id) {\r\n      this.skip(this.ast.id);\r\n    }\r\n    this.skip('{');\r\n    this.deleteComponentInStatementList(this.ast.children, type, id, edgeRHSId);\r\n    this.skip('}');\r\n  }\r\n\r\n  deleteComponentInStatementList(statementList, type, id, edgeRHSId, erase) {\r\n    statementList.forEach((statement, i) => {\r\n      let erasedStatement = false;\r\n      if (statement.type === 'attr_stmt') {\r\n        const targetIsGraph = statement.target === 'graph';\r\n        this.skip(statement.target, false, {optional: targetIsGraph});\r\n        this.skipAttrList(statement.attr_list, false, targetIsGraph);\r\n      }\r\n      else if (statement.type === 'node_stmt') {\r\n        const eraseNode = (type === 'node' && statement.node_id.id === id);\r\n        this.skipLocation(statement, eraseNode);\r\n        if (eraseNode) {\r\n          erasedStatement = true;\r\n          this.numDeletedComponents += 1;\r\n        }\r\n      }\r\n      else if (statement.type === 'edge_stmt') {\r\n        let edgeList = statement.edge_list;\r\n        let erasedLastEdgeStatement = true;\r\n        let erasedAllEdgeConnections = true;\r\n        edgeList.forEach((edgeConnection, i) => {\r\n          if (edgeConnection.type === 'subgraph') {\r\n            const subgraph = edgeConnection;\r\n            const isFirstStatement = (i === 0);\r\n            if (!isFirstStatement) {\r\n              const eraseEdge = erasedAllEdgeConnections;\r\n              this.skipLocationBetween(edgeList[i - 1], subgraph, eraseEdge, true);\r\n              if (eraseEdge) {\r\n                this.numDeletedComponents += 1;\r\n              } else {\r\n                erasedLastEdgeStatement = false;\r\n              }\r\n              this.skipLocationBetween(edgeList[i - 1], subgraph, false, true);\r\n              erasedLastEdgeStatement = false;\r\n            }\r\n            this.deleteComponentInStatementList([subgraph], type, id, edgeRHSId);\r\n            erasedAllEdgeConnections = false;\r\n          } else {\r\n            const nodeId = edgeConnection;\r\n            const eraseNode = (type === 'node' && nodeId.id === id);\r\n            const isFirstStatement = (i === 0);\r\n            if (!isFirstStatement) {\r\n              const nodeIdLeft = getNodeIdString(edgeList[i - 1]);\r\n              const nodeIdRight = getNodeIdString(nodeId);\r\n              const splitEdge = (type === 'edge' && nodeIdLeft === id && nodeIdRight === edgeRHSId);\r\n              const eraseEdge = eraseNode || erasedAllEdgeConnections || splitEdge;\r\n              this.skipLocationBetween(edgeList[i - 1], nodeId, eraseEdge, true);\r\n              if (splitEdge) {\r\n                this.insert(' ');\r\n                erasedLastEdgeStatement = true;\r\n              }\r\n              if (eraseEdge) {\r\n                this.numDeletedComponents += 1;\r\n              } else {\r\n                erasedAllEdgeConnections = false;\r\n                erasedLastEdgeStatement = false;\r\n              }\r\n            }\r\n            if (eraseNode) {\r\n              this.numDeletedComponents += 1;\r\n            } else {\r\n              erasedAllEdgeConnections = false;\r\n            }\r\n            this.skipLocation(nodeId, eraseNode, true);\r\n          }\r\n        });\r\n        erasedStatement = erasedAllEdgeConnections;\r\n        this.skipLocation(statement, erasedLastEdgeStatement, true);\r\n        if (erasedLastEdgeStatement) {\r\n          this.skipPrevious(erasedLastEdgeStatement);\r\n          if (statement.attr_list.length > 0) {\r\n            if (!statementSeparators.includes(this.dotSrc[this.index - 1]) &&\r\n                !statementSeparators.includes(this.dotSrc[this.index])) {\r\n              this.insert(' ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else if (statement.type === 'subgraph') {\r\n        this.skipOptional('subgraph');\r\n        if (statement.id) {\r\n          this.skip(statement.id);\r\n        }\r\n        this.skip('{');\r\n        this.deleteComponentInStatementList(statement.children, type, id, edgeRHSId);\r\n        this.skip('}');\r\n      }\r\n      this.skipSeparators(erasedStatement, {skipSemicolon: true});\r\n    });\r\n    this.skipPrevious(true);\r\n  }\r\n\r\n  skipId(id, erase) {\r\n    if (id.html) {\r\n      this.skip('<', erase);\r\n      this.skip(id.value, erase, {noSkipNewline: true});\r\n      this.skip('>', erase);\r\n    } else {\r\n      this.skip(id.eq, erase);\r\n    }\r\n  }\r\n\r\n  skipNodeId(nodeId, erase) {\r\n    this.skip(nodeId.id, erase);\r\n    if (nodeId.port) {\r\n      this.skip(':', erase);\r\n      this.skipPort(nodeId.port, erase);\r\n    }\r\n  }\r\n\r\n  skipPort(port, erase) {\r\n    this.skip(port.id, erase);\r\n    if (port.compass_pt) {\r\n      this.skip(':', erase);\r\n      this.skip(port.compass_pt, erase);\r\n    }\r\n  }\r\n\r\n  skipAttrList(attrList, erase, optionalSquareBrackets) {\r\n    const attrListOptions = {skipComma: true, skipSemicolon: true};\r\n    attrList.forEach((attr, i) => {\r\n      this.skip('[', erase, {optional: optionalSquareBrackets || i > 0});\r\n      this.skip(attr.id, erase, attrListOptions);\r\n      this.skip('=', erase);\r\n      if (typeof attr.eq === 'object' && attr.eq.type === 'id') {\r\n        this.skipId(attr.eq, erase);\r\n      } else {\r\n        this.skip(attr.eq, erase);\r\n      }\r\n      this.skip(']', erase, {optional: optionalSquareBrackets || i < attrList.length - 1});\r\n    });\r\n  }\r\n\r\n  skipOptional(string, erase=false, options={}) {\r\n    options = Object.assign({optional: true}, options);\r\n    this.skip(string, erase, options);\r\n  }\r\n\r\n  skipSeparators(erase=false, options={}) {\r\n    let index = this.index;\r\n    let skipIndex = this.index;\r\n    let prevIndex = null;\r\n    let prevLength = null;\r\n    function skipPartially(nextIndex) {\r\n      if (erase) {\r\n        if (this.skippableIndex <= this.erasedIndex) {\r\n          if (this.dotSrc[index] === '\\n') {\r\n            if (this.dotSrc[this.skippableIndex - 1] === '\\n') {\r\n              skipIndex = this.skippableIndex - 1;\r\n            } else {\r\n              skipIndex = this.skippableIndex;\r\n            }\r\n          }\r\n        }\r\n        this.eraseBetween(skipIndex, index);\r\n        nextIndex -= index - skipIndex;\r\n        erase = false;\r\n      }\r\n      index = nextIndex;\r\n      skipIndex = nextIndex;\r\n      this.skippableIndex = nextIndex;\r\n    }\r\n    while (index !== prevIndex || this.dotSrc.length !== prevLength ) {\r\n      prevIndex = index;\r\n      prevLength = this.dotSrc.length;\r\n      if (whitespaceWithinLine.includes(this.dotSrc[index])) {\r\n        index += 1;\r\n      }\r\n      if (options.skipComma) {\r\n        if (this.dotSrc[index] === ',') {\r\n          index += 1;\r\n        }\r\n      }\r\n      if (options.skipSemicolon) {\r\n        if (this.dotSrc[index] === ';') {\r\n          index += 1;\r\n        }\r\n      }\r\n      if (!options.noSkipNewline) {\r\n        if (this.dotSrc[index] === '\\n') {\r\n          const nextIndex = index + 1;\r\n          skipPartially.call(this, nextIndex);\r\n        }\r\n      }\r\n      if (this.dotSrc.startsWith('/*', index)) {\r\n        const nextIndex = this.dotSrc.indexOf('*/', index + 2) + 2;\r\n        skipPartially.call(this, nextIndex);\r\n      }\r\n      if (this.dotSrc.startsWith('//', index)) {\r\n        const nextIndex = this.dotSrc.indexOf('\\n', index + 2) + 1;\r\n        skipPartially.call(this, nextIndex);\r\n      }\r\n      if (this.dotSrc.startsWith('#', index)) {\r\n        const nextIndex = this.dotSrc.indexOf('\\n', index + 1) + 1;\r\n        skipPartially.call(this, nextIndex);\r\n      }\r\n    }\r\n    if (erase) {\r\n      this.eraseBetween(skipIndex, index);\r\n    } else {\r\n      this.index = index;\r\n    }\r\n  }\r\n\r\n  skip(string, erase=false, options={}) {\r\n    this.skipSeparators(false, options);\r\n    let index = this.index\r\n    let skipIndex = index;\r\n    if (this.dotSrc[index] === '\"') {\r\n      string = quoteId(string);\r\n    }\r\n    let found = false;\r\n    if (!this.dotSrc.startsWith(string, index)) {\r\n      if (!options.optional) {\r\n        throw Error('Expected \"' + string + '\", found: \"' + this.dotSrc.slice(index, index + 40) + '...\"');\r\n      }\r\n    } else {\r\n      index += string.length;\r\n      found = true;\r\n    }\r\n    if (erase) {\r\n      this.eraseBetween(skipIndex, index);\r\n      this.skipSeparators(erase);\r\n    } else {\r\n      this.index = index;\r\n      if (found && string.length > 0) {\r\n        this.skippableIndex = index;\r\n      }\r\n    }\r\n    return found;\r\n  }\r\n\r\n  skipPrevious(erase) {\r\n    if (erase) {\r\n      if (this.skippableIndex <= this.erasedIndex) {\r\n        this.eraseBetween(this.skippableIndex, this.index);\r\n        this.index = this.skippableIndex;\r\n      }\r\n    } else {\r\n      this.skippableIndex = this.index;\r\n    }\r\n  }\r\n\r\n  skipLocationBetween(startAstNode, endAstNode, erase, ignoreStart) {\r\n    let startIndex = startAstNode.location.end.offset - this.numErased;\r\n    const endIndex = endAstNode.location.start.offset - this.numErased;\r\n    this.skipBetween(startIndex, endIndex, erase, ignoreStart);\r\n  }\r\n\r\n  skipLocation(astNode, erase, ignoreStart) {\r\n    let startIndex = astNode.location.start.offset - this.numErased;\r\n    const endIndex = astNode.location.end.offset - this.numErased;\r\n    this.skipBetween(startIndex, endIndex, erase, ignoreStart);\r\n  }\r\n\r\n  skipBetween(startIndex, endIndex, erase, ignoreStart) {\r\n    if (ignoreStart) {\r\n      startIndex = this.index;\r\n    } else {\r\n      if (startIndex !== this.index) {\r\n        throw Error('Unexpected index ' + this.index + ', expected ' + startIndex);\r\n      }\r\n    }\r\n    if (erase) {\r\n      this.eraseBetween(startIndex, endIndex);\r\n    } else {\r\n      this.index = endIndex;\r\n      if (startIndex !== endIndex) {\r\n        this.skippableIndex = this.index;\r\n      }\r\n    }\r\n  }\r\n\r\n  eraseBetween(startIndex, endIndex) {\r\n    if (startIndex !== endIndex) {\r\n      this.dotSrc = this.dotSrc.slice(0, startIndex) + this.dotSrc.slice(endIndex);\r\n      this.erasedIndex = startIndex;\r\n      this.numErased += endIndex - startIndex;\r\n    }\r\n  }\r\n\r\n  insert(string) {\r\n    this.dotSrc = this.dotSrc.slice(0, this.index) + string + this.dotSrc.slice(this.index);\r\n    this.index += string.length;\r\n    this.numErased -= string.length;\r\n  }\r\n\r\n}\r\n\r\nfunction getNodeIdString(astNode) {\r\n  let str = astNode.id;\r\n  if (astNode.port) {\r\n    str += ':' + astNode.port.id;\r\n    if (astNode.port.compass_pt) {\r\n      str += ':' + astNode.port.compass_pt;\r\n    }\r\n  }\r\n  return str;\r\n}\r\n\r\nfunction quoteId(value) {\r\n  value = value.replace(/\"/g,'\\\\\"');\r\n  value = '\"' + value + '\"';\r\n  return value;\r\n}\r\n\r\nfunction quoteIdIfNecessary(value) {\r\n  let re = '^[a-zA-Z\\\\x80-\\\\xff_][a-zA-Z\\\\x80-\\\\xff_0-9]*$';\r\n  if (!value.match(re)) {\r\n    value = quoteId(value);\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction toAttributesString(attributes) {\r\n  var attributesString = ''\r\n  for (var name of Object.keys(attributes)) {\r\n    if (attributes[name] != null) {\r\n      let value = attributes[name].toString();\r\n      value = quoteIdIfNecessary(value);\r\n      attributesString += ' ' + name + '=' + value;\r\n    }\r\n  }\r\n  if (attributesString) {\r\n    attributesString = ' [' + attributesString + ']';\r\n  }\r\n  return attributesString;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}