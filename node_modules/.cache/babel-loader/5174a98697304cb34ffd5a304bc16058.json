{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\graphviz-visual-editor\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\graphviz-visual-editor\\\\src\\\\FormatDrawer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\nimport ColorPicker from './ColorPicker';\nconst drawerWidth = '100%';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  hide: {\n    display: 'none'\n  },\n  drawerPaper: {\n    position: 'relative',\n    width: drawerWidth,\n    height: 'calc(100vh - 64px - 2 * 12px)',\n    textAlign: 'left'\n  },\n  drawerHeader: _objectSpread({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    textTransform: 'capitalize'\n  }, theme.mixins.toolbar),\n  styleFormControl: {},\n  styleSwitch: {\n    marginLeft: theme.spacing(2)\n  },\n  styleCheckbox: {\n    marginLeft: theme.spacing(0),\n    marginTop: theme.spacing(-2)\n  },\n  colorFormControl: {\n    marginLeft: theme.spacing(2),\n    marginBottom: theme.spacing(1)\n  },\n  colorSwitch: {\n    marginLeft: theme.spacing(0)\n  }\n});\n\nconst emptyStyle = '';\nconst nodeStyles = [\"dashed\", \"dotted\", \"solid\", \"invis\", \"bold\", \"filled\", \"striped\", \"wedged\", \"diagonals\", \"rounded\", \"radial\"];\nconst edgeStyles = [\"dashed\", \"dotted\", \"solid\", \"invis\", \"bold\", \"tapered\"];\nconst emptyColor = '';\n\nclass FormatDrawer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      colorColorPickerIsOpen: false,\n      fillColorColorPickerIsOpen: false\n    };\n\n    this.setColorColorPickerOpen = open => {\n      this.setState({\n        colorColorPickerIsOpen: open\n      });\n    };\n\n    this.setFillColorColorPickerOpen = open => {\n      this.setState({\n        fillColorColorPickerIsOpen: open\n      });\n    };\n\n    this.handleClick = () => {\n      this.setColorColorPickerOpen(false);\n      this.setFillColorColorPickerOpen(false);\n      this.props.onClick();\n    };\n\n    this.handleDrawerClose = () => {\n      this.props.onFormatDrawerClose();\n    };\n\n    this.handleStyleSwitchChange = event => {\n      let styleSet = this.getStyleSet();\n      styleSet.clear();\n\n      if (event.target.checked) {\n        styleSet.add(emptyStyle);\n      }\n\n      this.setStyle(styleSet);\n    };\n\n    this.handleStyleChange = styleName => event => {\n      const checked = event.target.checked;\n      let styleSet = this.getStyleSet();\n\n      if (checked) {\n        styleSet.delete(emptyStyle);\n        styleSet.add(styleName);\n      } else {\n        styleSet.delete(styleName);\n      }\n\n      this.setStyle(styleSet);\n    };\n\n    this.handleColorSwitchChange = event => {\n      if (event.target.checked) {\n        this.props.onColorChange(emptyColor);\n      } else {\n        this.props.onColorChange(null);\n      }\n    };\n\n    this.handleColorChange = color => {\n      this.props.onColorChange(color);\n    };\n\n    this.handleFillColorSwitchChange = event => {\n      if (event.target.checked) {\n        this.props.onFillColorChange(emptyColor);\n      } else {\n        this.props.onFillColorChange(null);\n      }\n    };\n\n    this.handleFillColorChange = color => {\n      this.props.onFillColorChange(color);\n    };\n  }\n\n  getStyleSet() {\n    if (this.props.defaultAttributes.style == null) {\n      return new Set([]);\n    } else {\n      let styleSet = new Set(this.props.defaultAttributes.style.split(', '));\n      styleSet.add(emptyStyle);\n      return styleSet;\n    }\n  }\n\n  setStyle(styleSet) {\n    if (styleSet.size === 0) {\n      this.props.onStyleChange(null);\n    } else {\n      styleSet.delete(emptyStyle);\n      this.props.onStyleChange([...styleSet].join(', '));\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          theme = _this$props.theme;\n    const type = this.props.type;\n    let styles = type === 'node' ? nodeStyles : edgeStyles;\n    let currentStyle = this.getStyleSet();\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Drawer, {\n      id: \"format-drawer\",\n      variant: \"persistent\",\n      anchor: \"left\",\n      open: true,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.drawerHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Default \", this.props.type, \" attributes\"), React.createElement(IconButton, {\n      id: \"close-button\",\n      onClick: this.handleDrawerClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, theme.direction === 'rtl' ? React.createElement(ChevronRightIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }) : React.createElement(ChevronLeftIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }))), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(FormControl, {\n      className: classes.styleFormControl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      className: classes.styleSwitch,\n      control: React.createElement(Switch, {\n        id: \"style-switch\",\n        checked: currentStyle.size !== 0,\n        onChange: this.handleStyleSwitchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }),\n      label: \"style\",\n      labelPlacement: \"start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      row: true,\n      id: \"styles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, styles.map(style => React.createElement(FormControlLabel, {\n      className: classes.styleCheckbox,\n      control: React.createElement(Checkbox, {\n        id: style,\n        checked: currentStyle.has(style),\n        onChange: this.handleStyleChange(style),\n        value: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }),\n      key: style,\n      label: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })))), React.createElement(FormControl, {\n      className: classes.colorFormControl,\n      id: \"color-picker-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      className: classes.colorSwitch,\n      control: React.createElement(Switch, {\n        id: \"color-switch\",\n        checked: this.props.defaultAttributes.color != null,\n        onChange: this.handleColorSwitchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }),\n      label: \"color\",\n      labelPlacement: \"start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(ColorPicker, {\n      id: \"color-picker\",\n      open: this.state.colorColorPickerIsOpen,\n      setOpen: this.setColorColorPickerOpen,\n      invert: true,\n      color: this.props.defaultAttributes.color || '',\n      onChange: color => this.handleColorChange(color),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }))), React.createElement(FormControl, {\n      className: classes.colorFormControl,\n      id: \"fillcolor-picker-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      className: classes.colorSwitch,\n      control: React.createElement(Switch, {\n        id: \"fillcolor-switch\",\n        checked: this.props.defaultAttributes.fillcolor != null,\n        onChange: this.handleFillColorSwitchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }),\n      label: \"fillcolor\",\n      labelPlacement: \"start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(ColorPicker, {\n      id: \"fillcolor-picker\",\n      open: this.state.fillColorColorPickerIsOpen,\n      setOpen: this.setFillColorColorPickerOpen,\n      color: this.props.defaultAttributes.fillcolor || '',\n      onChange: color => this.handleFillColorChange(color),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nFormatDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(FormatDrawer);","map":{"version":3,"sources":["C:/Users/user/graphviz-visual-editor/src/FormatDrawer.js"],"names":["React","PropTypes","withStyles","Drawer","DialogTitle","Divider","IconButton","ChevronLeftIcon","ChevronRightIcon","FormControl","FormGroup","FormControlLabel","Checkbox","Switch","ColorPicker","drawerWidth","styles","theme","root","flexGrow","hide","display","drawerPaper","position","width","height","textAlign","drawerHeader","alignItems","justifyContent","padding","textTransform","mixins","toolbar","styleFormControl","styleSwitch","marginLeft","spacing","styleCheckbox","marginTop","colorFormControl","marginBottom","colorSwitch","emptyStyle","nodeStyles","edgeStyles","emptyColor","FormatDrawer","Component","state","colorColorPickerIsOpen","fillColorColorPickerIsOpen","setColorColorPickerOpen","open","setState","setFillColorColorPickerOpen","handleClick","props","onClick","handleDrawerClose","onFormatDrawerClose","handleStyleSwitchChange","event","styleSet","getStyleSet","clear","target","checked","add","setStyle","handleStyleChange","styleName","delete","handleColorSwitchChange","onColorChange","handleColorChange","color","handleFillColorSwitchChange","onFillColorChange","handleFillColorChange","defaultAttributes","style","Set","split","size","onStyleChange","join","render","classes","type","currentStyle","paper","direction","map","has","fillcolor","propTypes","object","isRequired","withTheme"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport ColorPicker from './ColorPicker'\r\n\r\nconst drawerWidth = '100%';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    width: drawerWidth,\r\n    height: 'calc(100vh - 64px - 2 * 12px)',\r\n    textAlign: 'left',\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    textTransform: 'capitalize',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  styleFormControl: {\r\n  },\r\n  styleSwitch: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  styleCheckbox: {\r\n    marginLeft: theme.spacing(0),\r\n    marginTop: theme.spacing(-2),\r\n  },\r\n  colorFormControl: {\r\n    marginLeft: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  colorSwitch: {\r\n    marginLeft: theme.spacing(0),\r\n  },\r\n});\r\n\r\nconst emptyStyle = '';\r\n\r\nconst nodeStyles = [\r\n  \"dashed\",\r\n  \"dotted\",\r\n  \"solid\",\r\n  \"invis\",\r\n  \"bold\",\r\n  \"filled\",\r\n  \"striped\",\r\n  \"wedged\",\r\n  \"diagonals\",\r\n  \"rounded\",\r\n  \"radial\",\r\n];\r\n\r\nconst edgeStyles = [\r\n  \"dashed\",\r\n  \"dotted\",\r\n  \"solid\",\r\n  \"invis\",\r\n  \"bold\",\r\n  \"tapered\",\r\n];\r\n\r\nconst emptyColor = '';\r\n\r\nclass FormatDrawer extends React.Component {\r\n\r\n  state = {\r\n    colorColorPickerIsOpen: false,\r\n    fillColorColorPickerIsOpen: false,\r\n  }\r\n\r\n  setColorColorPickerOpen = (open) => {\r\n    this.setState({\r\n      colorColorPickerIsOpen: open,\r\n    });\r\n  }\r\n\r\n  setFillColorColorPickerOpen = (open) => {\r\n    this.setState({\r\n      fillColorColorPickerIsOpen: open,\r\n    });\r\n  }\r\n\r\n  getStyleSet() {\r\n    if (this.props.defaultAttributes.style == null) {\r\n      return new Set([]);\r\n    } else {\r\n      let styleSet = new Set(this.props.defaultAttributes.style.split(', '))\r\n      styleSet.add(emptyStyle);\r\n      return styleSet;\r\n    }\r\n  }\r\n\r\n  setStyle(styleSet) {\r\n    if (styleSet.size === 0) {\r\n      this.props.onStyleChange(null);\r\n    } else {\r\n      styleSet.delete(emptyStyle);\r\n      this.props.onStyleChange([...styleSet].join(', '));\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setColorColorPickerOpen(false);\r\n    this.setFillColorColorPickerOpen(false);\r\n    this.props.onClick();\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.props.onFormatDrawerClose();\r\n  };\r\n\r\n  handleStyleSwitchChange = (event) => {\r\n    let styleSet = this.getStyleSet();\r\n    styleSet.clear();\r\n    if (event.target.checked) {\r\n      styleSet.add(emptyStyle);\r\n    }\r\n    this.setStyle(styleSet);\r\n  }\r\n\r\n  handleStyleChange = (styleName) => (event) => {\r\n    const checked = event.target.checked;\r\n    let styleSet = this.getStyleSet();\r\n    if (checked) {\r\n      styleSet.delete(emptyStyle);\r\n      styleSet.add(styleName);\r\n    }\r\n    else {\r\n      styleSet.delete(styleName);\r\n    }\r\n    this.setStyle(styleSet);\r\n  };\r\n\r\n  handleColorSwitchChange = (event) => {\r\n    if (event.target.checked) {\r\n      this.props.onColorChange(emptyColor);\r\n    } else {\r\n      this.props.onColorChange(null);\r\n    }\r\n  }\r\n\r\n  handleColorChange = (color) => {\r\n    this.props.onColorChange(color);\r\n  };\r\n\r\n  handleFillColorSwitchChange = (event) => {\r\n    if (event.target.checked) {\r\n      this.props.onFillColorChange(emptyColor);\r\n    } else {\r\n      this.props.onFillColorChange(null);\r\n    }\r\n  }\r\n  handleFillColorChange = (color) => {\r\n    this.props.onFillColorChange(color);\r\n  };\r\n\r\n  render() {\r\n    const { classes, theme } = this.props;\r\n    const { type } = this.props;\r\n\r\n    let styles = type === 'node' ? nodeStyles : edgeStyles;\r\n    let currentStyle = this.getStyleSet();\r\n    return (\r\n      <div className={classes.root}>\r\n        <Drawer\r\n          id=\"format-drawer\"\r\n          variant=\"persistent\"\r\n          anchor='left'\r\n          open\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          onClick={this.handleClick}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <DialogTitle id=\"form-dialog-title\">\r\n              Default {this.props.type} attributes\r\n            </DialogTitle>\r\n            <IconButton id=\"close-button\" onClick={this.handleDrawerClose}>\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <FormControl className={classes.styleFormControl}>\r\n            <FormGroup row>\r\n              <FormControlLabel\r\n                className={classes.styleSwitch}\r\n                control={\r\n                  <Switch\r\n                    id=\"style-switch\"\r\n                    checked={currentStyle.size !== 0}\r\n                    onChange={this.handleStyleSwitchChange}\r\n                  />\r\n                }\r\n                label=\"style\"\r\n                labelPlacement=\"start\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup row id=\"styles\">\r\n              {styles.map((style) =>\r\n                <FormControlLabel\r\n                className={classes.styleCheckbox}\r\n                  control={\r\n                    <Checkbox\r\n                      id={style}\r\n                      checked={currentStyle.has(style)}\r\n                    onChange={this.handleStyleChange(style)}\r\n                    value={style}\r\n                    />\r\n                  }\r\n                  key={style}\r\n                  label={style}\r\n                />\r\n              )}\r\n            </FormGroup>\r\n          </FormControl>\r\n          <FormControl className={classes.colorFormControl} id=\"color-picker-form\">\r\n            <FormGroup row>\r\n              <FormControlLabel\r\n                className={classes.colorSwitch}\r\n                control={\r\n                  <Switch\r\n                    id=\"color-switch\"\r\n                    checked={this.props.defaultAttributes.color != null}\r\n                    onChange={this.handleColorSwitchChange}\r\n                  />\r\n                }\r\n                label=\"color\"\r\n                labelPlacement=\"start\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <ColorPicker\r\n                id=\"color-picker\"\r\n                open={this.state.colorColorPickerIsOpen}\r\n                setOpen={this.setColorColorPickerOpen}\r\n                invert={true}\r\n                color={this.props.defaultAttributes.color || ''}\r\n                onChange={color => this.handleColorChange(color)}\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n          <FormControl className={classes.colorFormControl} id=\"fillcolor-picker-form\">\r\n            <FormGroup row>\r\n              <FormControlLabel\r\n                className={classes.colorSwitch}\r\n                control={\r\n                  <Switch\r\n                    id=\"fillcolor-switch\"\r\n                    checked={this.props.defaultAttributes.fillcolor != null}\r\n                    onChange={this.handleFillColorSwitchChange}\r\n                  />\r\n                }\r\n                label=\"fillcolor\"\r\n                labelPlacement=\"start\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <ColorPicker\r\n                id=\"fillcolor-picker\"\r\n                open={this.state.fillColorColorPickerIsOpen}\r\n                setOpen={this.setFillColorColorPickerOpen}\r\n                color={this.props.defaultAttributes.fillcolor || ''}\r\n                onChange={color => this.handleFillColorChange(color)}\r\n              />\r\n            </FormGroup>\r\n          </FormControl>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormatDrawer.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(FormatDrawer);\r\n"]},"metadata":{},"sourceType":"module"}