{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\user\\\\KAOS-modeling-editor\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\KAOS-modeling-editor\\\\src\\\\Graph.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Fade from '@material-ui/core/Fade';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { select as d3_select } from 'd3-selection';\nimport { selectAll as d3_selectAll } from 'd3-selection';\nimport { transition as d3_transition } from 'd3-transition';\nimport { zoomIdentity as d3_zoomIdentity } from 'd3-zoom';\nimport { zoomTransform as d3_zoomTransform } from 'd3-zoom';\nimport { pointer as d3_pointer } from 'd3-selection';\nimport 'd3-graphviz';\nimport DotGraph from './dot';\nimport { wasmFolder } from \"@hpcc-js/wasm\";\nconst styles = {\n  root: {\n    flexGrow: 1\n  },\n  flex: {\n    flexGrow: 1\n  },\n  progress: {\n    position: 'absolute',\n    top: 'calc(64px + 2 * 12px + 2px)',\n    left: 'calc(100vw - 2 * 12px - 2 * 12px)'\n  }\n};\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSvg = () => {\n      return this.svg.node();\n    };\n\n    this.handleZoomInButtonClick = () => {\n      let scale = d3_zoomTransform(this.graphviz.zoomSelection().node()).k;\n      scale = scale * 1.2;\n      this.setZoomScale(scale);\n    };\n\n    this.handleZoomOutButtonClick = () => {\n      let scale = d3_zoomTransform(this.graphviz.zoomSelection().node()).k;\n      scale = scale / 1.2;\n      this.setZoomScale(scale);\n    };\n\n    this.handleZoomOutMapButtonClick = () => {\n      let viewBox = this.svg.attr(\"viewBox\").split(' ');\n      let bbox = this.graph0.node().getBBox();\n      let xRatio = viewBox[2] / bbox.width;\n      let yRatio = viewBox[3] / bbox.height;\n      let scale = Math.min(xRatio, yRatio);\n      this.setZoomScale(scale, true);\n    };\n\n    this.handleZoomResetButtonClick = () => {\n      this.setZoomScale(1, true);\n    };\n\n    this.setZoomScale = (scale, center = false, reset = false) => {\n      let viewBox = this.svg.attr(\"viewBox\").split(' ');\n      let bbox = this.graph0.node().getBBox();\n\n      let _d3_zoomTransform = d3_zoomTransform(this.graphviz.zoomSelection().node()),\n          x = _d3_zoomTransform.x,\n          y = _d3_zoomTransform.y,\n          k = _d3_zoomTransform.k;\n\n      let x0 = x,\n          y0 = y,\n          scale0 = k;\n      let xOffset0 = x0 + bbox.x * scale0;\n      let yOffset0 = y0 + bbox.y * scale0;\n      let xCenter = viewBox[2] / 2;\n      let yCenter = viewBox[3] / 2;\n      let xOffset;\n      let yOffset;\n\n      if (center) {\n        xOffset = (viewBox[2] - bbox.width * scale) / 2;\n        yOffset = (viewBox[3] - bbox.height * scale) / 2;\n      } else if (reset) {\n        xOffset = 0;\n        yOffset = 0;\n      } else {\n        xOffset = xCenter - (xCenter - xOffset0) * scale / scale0;\n        yOffset = yCenter - (yCenter - yOffset0) * scale / scale0;\n      }\n\n      x = -bbox.x * scale + xOffset;\n      y = -bbox.y * scale + yOffset;\n      let transform = d3_zoomIdentity.translate(x, y).scale(scale);\n      this.graphviz.zoomSelection().call(this.graphviz.zoomBehavior().transform, transform);\n    };\n\n    this.handleNodeShapeClick = (event, shape) => {\n      if (shape === '(default)') {\n        shape = null;\n      }\n\n      this.props.onFocus();\n      let x0 = null;\n      let y0 = null;\n      this.latestInsertedNodeShape = shape;\n      this.insertNodeWithDefaultAttributes(x0, y0, {\n        shape: shape\n      });\n    };\n\n    this.handleNodeShapeDragStart = (event, shape) => {\n      if (shape === '(default)') {\n        shape = null;\n      }\n\n      let outsideOfViewPort = 1000000;\n      this.latestInsertedNodeShape = shape;\n      this.drawNodeWithDefaultAttributes(outsideOfViewPort, outsideOfViewPort, {\n        shape: shape\n      });\n      let node = this.graphviz.drawnNodeSelection();\n\n      if (!node.empty() && !window.chrome) {\n        let bbox = node.node().getBBox();\n        let scale = node.node().getCTM().a;\n        node.attr(\"transform\", \"scale(\".concat(scale, \")\"));\n        event.dataTransfer.setDragImage(node.node(), bbox.width / 2 * scale * 4 / 3, bbox.height / 2 * scale * 4 / 3);\n      }\n\n      event.dataTransfer.setData(\"text\", shape);\n    };\n\n    this.handleNodeShapeDragOver = event => {\n      event.preventDefault();\n    };\n\n    this.handleNodeShapeDrop = event => {\n      this.props.onFocus();\n      event.preventDefault();\n      this.graphviz.drawnNodeSelection().attr(\"transform\", null);\n      let node = this.graph0.node();\n      var point = this.svg.node().createSVGPoint();\n      point.x = event.clientX;\n      point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      var _ref = [point.x, point.y],\n          x0 = _ref[0],\n          y0 = _ref[1];\n      this.updateAndInsertDrawnNode(x0, y0, {});\n    };\n\n    this.handleNodeShapeDragEnd = (event, shape) => {\n      this.graphviz.removeDrawnNode();\n    };\n\n    this.state = {\n      busy: false\n    };\n    this.svg = d3_select(null);\n    this.createGraph = this.createGraph.bind(this);\n    this.renderGraph = this.renderGraph.bind(this);\n    this.isDrawingEdge = false;\n    this.isDrawingNode = false;\n    this.startNode = null;\n    this.selectedComponents = d3_selectAll(null);\n    this.selectArea = null;\n    this.selectRects = d3_select(null);\n    this.latestNodeAttributes = {};\n    this.latestEdgeAttributes = {}; // latestInsertedNodeShape is not necessarily the same as\n    // latestNodeAttributes.shape with is also set on node copy\n\n    this.latestInsertedNodeShape = null;\n    this.drawnNodeName = null;\n    this.nodeIndex = null;\n    this.edgeIndex = null;\n    this.pendingUpdate = false;\n    this.rendering = false;\n    this.prevFit = null;\n    this.prevEngine = null;\n    this.prevDotSrc = '';\n  }\n\n  componentDidMount() {\n    this.createGraph();\n  }\n\n  componentDidUpdate() {\n    this.renderGraph();\n  }\n\n  handleError(errorMessage) {\n    let line = errorMessage.replace(/.*error in line ([0-9]*) .*\\n/, '$1');\n    this.props.onError({\n      message: errorMessage,\n      line: line\n    });\n    this.rendering = false;\n    this.setState({\n      busy: false\n    });\n\n    if (this.pendingUpdate) {\n      this.pendingUpdate = false;\n      this.render();\n    }\n  }\n\n  createGraph() {\n    wasmFolder(process.env.PUBLIC_URL.replace(/\\.$/, '') + '@hpcc-js/wasm/dist');\n    this.graphviz = this.div.graphviz().onerror(this.handleError.bind(this)).on('initEnd', () => this.renderGraph.call(this));\n    this.props.registerNodeShapeClick(this.handleNodeShapeClick);\n    this.props.registerNodeShapeDragStart(this.handleNodeShapeDragStart);\n    this.props.registerNodeShapeDragEnd(this.handleNodeShapeDragEnd);\n    this.props.registerZoomInButtonClick(this.handleZoomInButtonClick);\n    this.props.registerZoomOutButtonClick(this.handleZoomOutButtonClick);\n    this.props.registerZoomOutMapButtonClick(this.handleZoomOutMapButtonClick);\n    this.props.registerZoomResetButtonClick(this.handleZoomResetButtonClick);\n    this.props.registerGetSvg(this.getSvg);\n  }\n\n  renderGraph() {\n    let width = this.div.node().parentElement.clientWidth;\n    let height = this.div.node().parentElement.clientHeight;\n    let fit = this.props.fit;\n    let engine = this.props.engine;\n\n    if (this.props.dotSrc.length === 0) {\n      this.svg.remove();\n      this.svg = d3_select(null);\n      this.props.onError(null);\n      this.renderGraphReady = false;\n      return;\n    }\n\n    if (this.props.dotSrc === this.prevDotSrc && this.props.engine === this.prevEngine && this.props.fit === this.prevFit) {\n      return;\n    }\n\n    if (this.rendering) {\n      this.pendingUpdate = true;\n      return;\n    }\n\n    if (this.props.fit !== this.prevFit) {\n      if (this.renderGraphReady) {\n        if (this.prevFit) {\n          this.unFitGraph();\n          this.setZoomScale(1, true);\n        } else {\n          this.setZoomScale(1, false, true);\n          this.fitGraph();\n        }\n      }\n\n      this.prevFit = this.props.fit;\n    }\n\n    this.prevDotSrc = this.props.dotSrc;\n    this.prevEngine = this.props.engine;\n\n    try {\n      if (!this.props.test.disableDotParsing) {\n        this.prelDotGraph = new DotGraph(this.props.dotSrc);\n      }\n\n      this.props.onError(null);\n    } catch (error) {\n      if (!error.location) {\n        throw error;\n      }\n\n      let line = error.location.start.line,\n          message = error.message;\n      this.props.onError({\n        message: message,\n        line: line\n      });\n      return;\n    }\n\n    this.rendering = true;\n    this.setState({\n      busy: true\n    });\n    this.graphviz.width(width).height(height).engine(engine).fit(fit).tweenPaths(this.props.tweenPaths).tweenShapes(this.props.tweenShapes).tweenPrecision(this.props.tweenPrecision).dot(this.props.dotSrc, this.handleDotLayoutReady.bind(this)).on('renderEnd', this.handleRenderStaged.bind(this)).render(this.handleRenderGraphReady.bind(this));\n  }\n\n  handleDotLayoutReady() {\n    let _this$graphviz$data$a = this.graphviz.data().attributes.viewBox.split(' '),\n        _this$graphviz$data$a2 = _slicedToArray(_this$graphviz$data$a, 4),\n        width = _this$graphviz$data$a2[2],\n        height = _this$graphviz$data$a2[3];\n\n    this.originalViewBox = {\n      width,\n      height\n    };\n  }\n\n  handleRenderStaged() {\n    if (this.renderGraphReady) {\n      this.markSelectedComponents(this.selectedComponents);\n    }\n  }\n\n  handleRenderGraphReady() {\n    this.svg = this.div.selectWithoutDataPropagation(\"svg\");\n    this.graph0 = this.svg.selectWithoutDataPropagation(\"g\");\n    this.dotGraph = this.prelDotGraph;\n    this.addEventHandlers();\n    this.rendering = false;\n\n    if (!this.renderGraphReady) {\n      this.renderGraphReady = true;\n      this.setZoomScale(1, true);\n      this.graphviz.transition(() => d3_transition().duration(this.props.transitionDuration * 1000));\n      this.props.onInitialized();\n    }\n\n    this.setState({\n      busy: false\n    });\n\n    if (this.pendingUpdate) {\n      this.pendingUpdate = false;\n      this.renderGraph();\n    }\n  }\n\n  addEventHandlers() {\n    /*\r\n      Some empirical non-obvious and other relevant things to note:\r\n        1. Click events are preceeded by mousedown and mouseup events on the\r\n           same element.\r\n        2. 1st button clicks are click events on all elements.\r\n        3. 2nd and 3rd button clicks are click events on document and window\r\n           only, not on their children, although the event target is the child.\r\n        4. Keyboard events are dispatched on BODY, not on its children. This can\r\n           however be changed with the contenteditable attribute.\r\n    */\n    let self = this;\n    this.graphviz.zoomBehavior().filter(function (event) {\n      if (event.type === 'mousedown' && !event.ctrlKey) {\n        if (self.isDrawingEdge) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    });\n    var nodes = this.svg.selectAll(\".node\");\n    var edges = this.svg.selectAll(\".edge\");\n    d3_select(window).on(\"resize\", this.resizeSVG.bind(this));\n    this.div.on(\"click\", this.handleClickDiv.bind(this));\n    d3_select(document).on(\"keydown\", this.handleKeyDownDocument.bind(this));\n    this.div.on(\"mousemove\", this.handleMouseMoveDiv.bind(this));\n    this.div.on(\"contextmenu\", this.handleRightClickDiv.bind(this));\n    this.svg.on(\"mousedown\", this.handleMouseDownSvg.bind(this));\n    this.svg.on(\"mousemove\", this.handleMouseMoveSvg.bind(this));\n    this.svg.on(\"click\", this.handleClickSvg.bind(this));\n    this.svg.on(\"mouseup\", this.handleMouseUpSvg.bind(this));\n    nodes.on(\"click mousedown\", this.handleClickNode.bind(this));\n    nodes.on(\"dblclick\", this.handleDblClickNode.bind(this));\n    nodes.on(\"contextmenu\", this.handleRightClickNode.bind(this));\n    edges.on(\"click mousedown\", this.handleClickEdge.bind(this));\n  }\n\n  handleClickDiv(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (!(event.which === 1 && event.shiftKey)) {\n      this.unSelectComponents();\n    }\n  }\n\n  handleKeyDownDocument(event) {\n    if (!this.props.hasFocus) {\n      return;\n    }\n\n    if (event.target.nodeName !== 'BODY') {\n      return;\n    }\n\n    if (event.key === 'Escape') {\n      this.graphviz.removeDrawnEdge();\n      this.unSelectComponents();\n    } else if (event.key === 'Delete') {\n      this.deleteSelectedComponents.call(this);\n      this.graphviz.removeDrawnEdge();\n    } else if (event.ctrlKey && event.key === 'c') {\n      let nodes = this.selectedComponents.filter('.node');\n\n      if (nodes.size() > 0) {\n        let nodeName = nodes.selectWithoutDataPropagation(\"title\").text();\n        this.latestNodeAttributes = this.dotGraph.getNodeAttributes(nodeName);\n      }\n    } else if (event.ctrlKey && event.key === 'v') {\n      this.insertNodeWithLatestAttributes();\n    } else if (event.ctrlKey && event.key === 'x') {\n      let nodes = this.selectedComponents.filter('.node');\n\n      if (nodes.size() > 0) {\n        let nodeName = nodes.selectWithoutDataPropagation(\"title\").text();\n        this.latestNodeAttributes = this.dotGraph.getNodeAttributes(nodeName);\n      }\n\n      this.deleteSelectedComponents.call(this);\n    } else if (event.ctrlKey && event.key === 'a') {\n      this.selectAllComponents();\n    } else if (event.ctrlKey && event.key === 'A') {\n      let components = this.graph0.selectAll('.edge');\n      this.selectComponents(components);\n    } else if (event.ctrlKey && event.key === 'z') {\n      this.props.onUndo();\n    } else if (event.ctrlKey && event.key === 'y') {\n      this.props.onRedo();\n    } else if (event.key === '?') {\n      this.props.onHelp();\n    } else {\n      return;\n    }\n\n    event.preventDefault();\n    this.isDrawingEdge = false;\n  }\n\n  handleMouseMoveDiv(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    var _d3_pointer = d3_pointer(event, this.graph0.node()),\n        _d3_pointer2 = _slicedToArray(_d3_pointer, 2),\n        x0 = _d3_pointer2[0],\n        y0 = _d3_pointer2[1];\n\n    var penwidth = 1;\n\n    if (this.latestEdgeAttributes.penwidth != null) {\n      if (isNumeric(this.latestEdgeAttributes.penwidth)) {\n        penwidth = this.latestEdgeAttributes.penwidth;\n      }\n    } else if (this.latestEdgeAttributes.style && this.latestEdgeAttributes.style.includes('bold')) {\n      penwidth = 2;\n    }\n\n    var shortening = penwidth * 2; // avoid mouse pointing on edge\n\n    if (this.isDrawingEdge) {\n      this.graphviz.moveDrawnEdgeEndPoint(x0, y0, {\n        shortening: shortening\n      });\n    }\n  }\n\n  handleClickNode(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (event.ctrlKey) {\n      console.log(event.currentTarget.getElementsByTagName(\"title\")[0]);\n      this.props.onLabelEditClick();\n      return;\n    }\n\n    if (!this.isDrawingEdge && event.which === 1) {\n      let extendSelection = event.shiftKey;\n      this.selectComponents(d3_select(event.currentTarget), extendSelection);\n    }\n  }\n\n  handleDblClickNode(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n    event.preventDefault();\n    event.stopPropagation();\n    this.unSelectComponents();\n\n    if (this.isDrawingEdge) {\n      var endNode = d3_select(event.currentTarget);\n      var startNodeName = this.startNode.selectWithoutDataPropagation(\"title\").text();\n      var endNodeName = endNode.selectWithoutDataPropagation(\"title\").text();\n      this.graphviz.insertDrawnEdge(startNodeName + '->' + endNodeName);\n      this.latestEdgeAttributes = Object.assign({}, this.props.defaultEdgeAttributes);\n      this.dotGraph.insertEdge(startNodeName, endNodeName, this.latestEdgeAttributes);\n      this.props.onTextChange(this.dotGraph.dotSrc);\n    } else {\n      //handle opening\n      console.log(\"double click: while not drawing edge\");\n    }\n\n    this.isDrawingEdge = false;\n  }\n\n  handleRightClickNode(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n    event.preventDefault();\n    event.stopPropagation();\n    this.unSelectComponents();\n    this.graphviz.removeDrawnEdge();\n    this.startNode = d3_select(event.currentTarget);\n\n    var _d3_pointer3 = d3_pointer(event, this.graph0.node()),\n        _d3_pointer4 = _slicedToArray(_d3_pointer3, 2),\n        x0 = _d3_pointer4[0],\n        y0 = _d3_pointer4[1];\n\n    if (this.edgeIndex === null) {\n      this.edgeIndex = d3_selectAll('.edge').size();\n    } else {\n      this.edgeIndex += 1;\n    }\n\n    this.latestEdgeAttributes = Object.assign({}, this.props.defaultEdgeAttributes);\n    this.latestEdgeAttributes.id = 'edge' + (this.edgeIndex + 1);\n    this.graphviz.drawEdge(x0, y0, x0, y0, this.latestEdgeAttributes);\n    this.isDrawingEdge = true;\n  }\n\n  handleClickEdge(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n    event.preventDefault();\n    event.stopPropagation();\n    let extendSelection = event.shiftKey;\n    this.selectComponents(d3_select(event.currentTarget), extendSelection);\n  }\n\n  handleRightClickDiv(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n    event.preventDefault();\n    event.stopPropagation();\n    this.unSelectComponents();\n  }\n\n  handleMouseDownSvg(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n\n    if (event.which !== 1) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.selectArea) {\n      return;\n    }\n\n    var _d3_pointer5 = d3_pointer(event, this.graph0.node()),\n        _d3_pointer6 = _slicedToArray(_d3_pointer5, 2),\n        x0 = _d3_pointer6[0],\n        y0 = _d3_pointer6[1];\n\n    this.selectArea = {\n      x0: x0,\n      y0: y0\n    };\n    let offset = 1; // avoid covering the svg at click in Chrome\n\n    this.selectArea.selection = this.graph0.append(\"rect\").attr(\"x\", x0 + offset).attr(\"y\", y0 + offset).attr(\"width\", 0).attr(\"height\", 0).attr(\"fill\", '#99ccff').attr(\"stroke\", '#0000dd').style('stroke-width', 0.5).style('fill-opacity', 0.3);\n  }\n\n  handleMouseMoveSvg(event) {\n    if (this.selectArea) {\n      event.preventDefault();\n      event.stopPropagation();\n      let _this$selectArea = this.selectArea,\n          x0 = _this$selectArea.x0,\n          y0 = _this$selectArea.y0;\n\n      var _d3_pointer7 = d3_pointer(event, this.graph0.node()),\n          _d3_pointer8 = _slicedToArray(_d3_pointer7, 2),\n          x1 = _d3_pointer8[0],\n          y1 = _d3_pointer8[1];\n\n      let x = Math.min(x0, x1);\n      let y = Math.min(y0, y1);\n      let width = Math.abs(x1 - x0);\n      let height = Math.abs(y1 - y0);\n      this.selectArea.selection.attr(\"x\", x).attr(\"y\", y).attr(\"width\", width).attr(\"height\", height);\n    }\n  }\n\n  handleClickSvg(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n\n    if (event.which === 1 && this.selectArea) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.selectArea.selection.remove();\n      let _this$selectArea2 = this.selectArea,\n          x0 = _this$selectArea2.x0,\n          y0 = _this$selectArea2.y0;\n\n      var _d3_pointer9 = d3_pointer(event, this.graph0.node()),\n          _d3_pointer10 = _slicedToArray(_d3_pointer9, 2),\n          x1 = _d3_pointer10[0],\n          y1 = _d3_pointer10[1];\n\n      let x = Math.min(x0, x1);\n      let y = Math.min(y0, y1);\n      let width = Math.abs(x1 - x0);\n      let height = Math.abs(y1 - y0);\n\n      if (width === 0 && height === 0) {\n        this.selectArea = null;\n\n        if (!event.shiftKey) {\n          this.unSelectComponents();\n        }\n\n        return;\n      }\n\n      let components = this.graph0.selectAll('.node,.edge');\n      components = components.filter(function (d, i) {\n        let bbox = this.getBBox();\n        if (bbox.x < x || bbox.x + bbox.width > x + width) return false;\n        if (bbox.y < y || bbox.y + bbox.height > y + height) return false;\n        return true;\n      });\n      let extendSelection = event.shiftKey;\n      this.selectComponents(components, extendSelection);\n      this.selectArea = null;\n    }\n  }\n\n  handleMouseUpSvg(event) {\n    this.props.onFocus();\n    document.activeElement.blur();\n\n    if (event.which === 2) {\n      var _d3_pointer11 = d3_pointer(event, this.graph0.node()),\n          _d3_pointer12 = _slicedToArray(_d3_pointer11, 2),\n          x0 = _d3_pointer12[0],\n          y0 = _d3_pointer12[1];\n\n      if (event.shiftKey) {\n        this.insertNodeWithDefaultAttributes(x0, y0, {\n          shape: this.latestInsertedNodeShape\n        });\n      } else {\n        this.insertNodeWithLatestAttributes(x0, y0);\n      }\n    }\n  }\n\n  selectAllComponents() {\n    let components = this.graph0.selectAll('.node,.edge');\n    this.selectComponents(components);\n  }\n\n  selectComponents(components, extendSelection = false) {\n    if (extendSelection) {\n      this.selectedComponents = d3_selectAll(this.selectedComponents.nodes().concat(components.nodes()));\n    } else {\n      this.unSelectComponents();\n      this.selectedComponents = components;\n    }\n\n    this.markSelectedComponents(components, extendSelection);\n    const selectedComponents = this.selectNames.map(name => this.dotGraph.components[name]);\n    this.props.onSelect(selectedComponents);\n  }\n\n  markSelectedComponents(components, extendSelection = false) {\n    let scale = this.graph0.node().getCTM().a * 3 / 4;\n    let dashLength = Math.max(4 / scale, 2);\n    let dashWidth = Math.max(4 / scale, 2);\n    let rectNodes = [];\n    let titles = [];\n    const self = this;\n    components.each(function (d, i) {\n      let component = d3_select(this);\n      let color = 'black';\n      const title = component.select('title').text();\n\n      if (component.classed('edge') && self.dotGraph.getEdgeAttributes(title) == null) {\n        color = 'red';\n      } else {\n        titles.push(title);\n      }\n\n      let bbox = component.node().getBBox();\n      let rect = component.append(\"rect\").attr(\"x\", bbox.x).attr(\"y\", bbox.y).attr(\"width\", bbox.width).attr(\"height\", bbox.height).attr(\"stroke\", color).attr(\"fill\", \"transparent\").attr(\"opacity\", 0.5).attr(\"stroke-dasharray\", dashLength).attr(\"stroke-width\", dashWidth);\n      rectNodes.push(rect.node());\n    });\n\n    if (extendSelection) {\n      this.selectRects = d3_selectAll(this.selectRects.nodes().concat(rectNodes));\n      this.selectNames = this.selectNames.concat(titles);\n    } else {\n      this.selectRects = d3_selectAll(rectNodes);\n      this.selectNames = titles;\n    }\n  }\n\n  unSelectComponents() {\n    this.selectRects.remove();\n    this.selectRects = d3_select(null);\n\n    if (this.selectedComponents.size() > 0) {\n      this.selectedComponents = d3_selectAll(null);\n      this.props.onSelect([]);\n    }\n  }\n\n  deleteSelectedComponents() {\n    this.selectedComponents.style(\"display\", \"none\");\n    let self = this;\n    this.selectedComponents.each(function (d, i) {\n      let component = d3_select(this);\n      var componentName = component.selectWithoutDataPropagation(\"title\").text();\n\n      if (component.attr('class') === 'node') {\n        self.dotGraph.deleteNode(componentName);\n      } else {\n        self.dotGraph.deleteEdge(componentName);\n      }\n\n      if (self.dotGraph.numDeletedComponents === 0) {\n        component.style(\"display\", null);\n      }\n\n      if (i !== self.selectedComponents.size() - 1) {\n        self.dotGraph.reparse();\n      }\n    });\n    this.props.onTextChange(this.dotGraph.dotSrc);\n    this.unSelectComponents();\n  }\n\n  getNextNodeId() {\n    if (this.nodeIndex === null) {\n      this.nodeIndex = d3_select('#canvas').selectAll('.node').size();\n    } else {\n      this.nodeIndex += 1;\n    }\n\n    while (this.dotGraph.getNodeAttributes('n' + this.nodeIndex)) {\n      this.nodeIndex += 1;\n    }\n\n    return 'n' + this.nodeIndex;\n  }\n\n  resizeSVG() {\n    let width = this.div.node().parentElement.clientWidth;\n    let height = this.div.node().parentElement.clientHeight;\n    let fit = this.props.fit;\n    this.svg.attr(\"width\", width).attr(\"height\", height);\n\n    if (!fit) {\n      this.unFitGraph();\n    }\n  }\n\n  unFitGraph() {\n    let width = this.div.node().parentElement.clientWidth;\n    let height = this.div.node().parentElement.clientHeight;\n    this.svg.attr(\"viewBox\", \"0 0 \".concat(width * 3 / 4, \" \").concat(height * 3 / 4));\n  }\n\n  fitGraph() {\n    this.svg.attr(\"viewBox\", \"0 0 \".concat(this.originalViewBox.width, \" \").concat(this.originalViewBox.height));\n  }\n\n  drawNode(x0, y0, nodeName, attributes) {\n    this.graphviz.drawNode(x0, y0, nodeName, attributes);\n  }\n\n  updateAndInsertDrawnNode(x0, y0, attributes) {\n    let nodeName = this.drawnNodeName;\n    attributes = Object.assign(this.latestNodeAttributes, attributes);\n    this.graphviz.updateDrawnNode(x0, y0, nodeName, attributes);\n    this.graphviz.insertDrawnNode(nodeName);\n    this.dotGraph.insertNode(nodeName, attributes);\n    this.props.onTextChange(this.dotGraph.dotSrc);\n  }\n\n  insertNode(x0, y0, nodeName, attributes) {\n    this.drawNode(x0, y0, nodeName, attributes);\n    this.graphviz.insertDrawnNode(nodeName);\n    this.dotGraph.insertNode(nodeName, attributes);\n    this.props.onTextChange(this.dotGraph.dotSrc);\n  }\n\n  drawNodeWithDefaultAttributes(x0, y0, attributesToOverride = {}) {\n    this.latestNodeAttributes = Object.assign({}, this.props.defaultNodeAttributes);\n    Object.assign(this.latestNodeAttributes, attributesToOverride);\n    this.drawnNodeName = this.getNextNodeId();\n    this.drawNode(x0, y0, this.drawnNodeName, this.latestNodeAttributes);\n  }\n\n  insertNodeWithLatestAttributes(x0, y0, attributesToOverride = {}) {\n    if (x0 == null || y0 == null) {\n      let node = this.graph0.node();\n      let bbox = node.getBBox();\n      x0 = x0 || bbox.x + bbox.width / 2;\n      y0 = y0 || bbox.y + bbox.height / 2;\n    }\n\n    Object.assign(this.latestNodeAttributes, attributesToOverride);\n    let nodeName = this.getNextNodeId();\n    this.insertNode(x0, y0, nodeName, this.latestNodeAttributes);\n  }\n\n  insertNodeWithDefaultAttributes(x0, y0, attributesToOverride = {}) {\n    this.latestNodeAttributes = Object.assign({}, this.props.defaultNodeAttributes);\n    this.insertNodeWithLatestAttributes(x0, y0, attributesToOverride);\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"canvas\",\n      ref: div => this.div = d3_select(div),\n      onDragOver: this.handleNodeShapeDragOver,\n      onDrop: this.handleNodeShapeDrop.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }), this.state.busy && React.createElement(Fade, {\n      in: true,\n      style: {\n        transitionDelay: '800ms'\n      },\n      unmountOnExit: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      id: \"busy-indicator\",\n      className: classes.progress,\n      color: \"secondary\",\n      size: 20,\n      thickness: 4.5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    })));\n  }\n\n}\n\nGraph.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Graph);","map":{"version":3,"sources":["C:/Users/user/KAOS-modeling-editor/src/Graph.js"],"names":["React","PropTypes","withStyles","Fade","CircularProgress","select","d3_select","selectAll","d3_selectAll","transition","d3_transition","zoomIdentity","d3_zoomIdentity","zoomTransform","d3_zoomTransform","pointer","d3_pointer","DotGraph","wasmFolder","styles","root","flexGrow","flex","progress","position","top","left","isNumeric","n","isNaN","parseFloat","isFinite","Graph","Component","constructor","props","getSvg","svg","node","handleZoomInButtonClick","scale","graphviz","zoomSelection","k","setZoomScale","handleZoomOutButtonClick","handleZoomOutMapButtonClick","viewBox","attr","split","bbox","graph0","getBBox","xRatio","width","yRatio","height","Math","min","handleZoomResetButtonClick","center","reset","x","y","x0","y0","scale0","xOffset0","yOffset0","xCenter","yCenter","xOffset","yOffset","transform","translate","call","zoomBehavior","handleNodeShapeClick","event","shape","onFocus","latestInsertedNodeShape","insertNodeWithDefaultAttributes","handleNodeShapeDragStart","outsideOfViewPort","drawNodeWithDefaultAttributes","drawnNodeSelection","empty","window","chrome","getCTM","a","dataTransfer","setDragImage","setData","handleNodeShapeDragOver","preventDefault","handleNodeShapeDrop","point","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","updateAndInsertDrawnNode","handleNodeShapeDragEnd","removeDrawnNode","state","busy","createGraph","bind","renderGraph","isDrawingEdge","isDrawingNode","startNode","selectedComponents","selectArea","selectRects","latestNodeAttributes","latestEdgeAttributes","drawnNodeName","nodeIndex","edgeIndex","pendingUpdate","rendering","prevFit","prevEngine","prevDotSrc","componentDidMount","componentDidUpdate","handleError","errorMessage","line","replace","onError","message","setState","render","process","env","PUBLIC_URL","div","onerror","on","registerNodeShapeClick","registerNodeShapeDragStart","registerNodeShapeDragEnd","registerZoomInButtonClick","registerZoomOutButtonClick","registerZoomOutMapButtonClick","registerZoomResetButtonClick","registerGetSvg","parentElement","clientWidth","clientHeight","fit","engine","dotSrc","length","remove","renderGraphReady","unFitGraph","fitGraph","test","disableDotParsing","prelDotGraph","error","location","start","tweenPaths","tweenShapes","tweenPrecision","dot","handleDotLayoutReady","handleRenderStaged","handleRenderGraphReady","data","attributes","originalViewBox","markSelectedComponents","selectWithoutDataPropagation","dotGraph","addEventHandlers","duration","transitionDuration","onInitialized","self","filter","type","ctrlKey","nodes","edges","resizeSVG","handleClickDiv","document","handleKeyDownDocument","handleMouseMoveDiv","handleRightClickDiv","handleMouseDownSvg","handleMouseMoveSvg","handleClickSvg","handleMouseUpSvg","handleClickNode","handleDblClickNode","handleRightClickNode","handleClickEdge","activeElement","blur","stopPropagation","which","shiftKey","unSelectComponents","hasFocus","target","nodeName","key","removeDrawnEdge","deleteSelectedComponents","size","text","getNodeAttributes","insertNodeWithLatestAttributes","selectAllComponents","components","selectComponents","onUndo","onRedo","onHelp","penwidth","style","includes","shortening","moveDrawnEdgeEndPoint","console","log","currentTarget","getElementsByTagName","onLabelEditClick","extendSelection","endNode","startNodeName","endNodeName","insertDrawnEdge","Object","assign","defaultEdgeAttributes","insertEdge","onTextChange","id","drawEdge","offset","selection","append","x1","y1","abs","d","i","concat","selectNames","map","name","onSelect","dashLength","max","dashWidth","rectNodes","titles","each","component","color","title","classed","getEdgeAttributes","push","rect","componentName","deleteNode","deleteEdge","numDeletedComponents","reparse","getNextNodeId","drawNode","updateDrawnNode","insertDrawnNode","insertNode","attributesToOverride","defaultNodeAttributes","classes","transitionDelay","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { select as d3_select} from 'd3-selection';\r\nimport { selectAll as d3_selectAll} from 'd3-selection';\r\nimport { transition as d3_transition} from 'd3-transition';\r\nimport { zoomIdentity as d3_zoomIdentity} from 'd3-zoom';\r\nimport { zoomTransform as d3_zoomTransform} from 'd3-zoom';\r\nimport { pointer as d3_pointer} from 'd3-selection';\r\nimport 'd3-graphviz';\r\nimport DotGraph from './dot'\r\nimport { wasmFolder } from \"@hpcc-js/wasm\";\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  flex: {\r\n    flexGrow: 1,\r\n  },\r\n  progress: {\r\n    position: 'absolute',\r\n    top: 'calc(64px + 2 * 12px + 2px)',\r\n    left: 'calc(100vw - 2 * 12px - 2 * 12px)',\r\n  },\r\n};\r\n\r\nfunction isNumeric(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n}\r\n\r\nclass Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      busy: false,\r\n    };\r\n    this.svg = d3_select(null);\r\n    this.createGraph = this.createGraph.bind(this)\r\n    this.renderGraph = this.renderGraph.bind(this)\r\n    this.isDrawingEdge = false;\r\n    this.isDrawingNode = false;\r\n    this.startNode = null;\r\n    this.selectedComponents = d3_selectAll(null);\r\n    this.selectArea = null;\r\n    this.selectRects = d3_select(null);\r\n    this.latestNodeAttributes = {\r\n    }\r\n    this.latestEdgeAttributes = {\r\n    }\r\n    // latestInsertedNodeShape is not necessarily the same as\r\n    // latestNodeAttributes.shape with is also set on node copy\r\n    this.latestInsertedNodeShape = null;\r\n    this.drawnNodeName = null;\r\n    this.nodeIndex = null;\r\n    this.edgeIndex = null;\r\n    this.pendingUpdate = false;\r\n    this.rendering = false;\r\n    this.prevFit = null;\r\n    this.prevEngine = null;\r\n    this.prevDotSrc = '';\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createGraph()\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderGraph()\r\n  }\r\n\r\n  handleError(errorMessage) {\r\n    let line = errorMessage.replace(/.*error in line ([0-9]*) .*\\n/, '$1');\r\n    this.props.onError({message: errorMessage, line: line});\r\n    this.rendering = false;\r\n    this.setState({busy: false});\r\n    if (this.pendingUpdate) {\r\n        this.pendingUpdate = false;\r\n        this.render();\r\n    }\r\n  }\r\n\r\n  getSvg = () => {\r\n    return this.svg.node();\r\n  }\r\n\r\n  createGraph() {\r\n    wasmFolder(process.env.PUBLIC_URL.replace(/\\.$/, '') + '@hpcc-js/wasm/dist');\r\n    this.graphviz = this.div.graphviz()\r\n      .onerror(this.handleError.bind(this))\r\n      .on('initEnd', () => this.renderGraph.call(this));\r\n    this.props.registerNodeShapeClick(this.handleNodeShapeClick);\r\n    this.props.registerNodeShapeDragStart(this.handleNodeShapeDragStart);\r\n    this.props.registerNodeShapeDragEnd(this.handleNodeShapeDragEnd);\r\n    this.props.registerZoomInButtonClick(this.handleZoomInButtonClick);\r\n    this.props.registerZoomOutButtonClick(this.handleZoomOutButtonClick);\r\n    this.props.registerZoomOutMapButtonClick(this.handleZoomOutMapButtonClick);\r\n    this.props.registerZoomResetButtonClick(this.handleZoomResetButtonClick);\r\n    this.props.registerGetSvg(this.getSvg);\r\n  }\r\n\r\n  renderGraph() {\r\n    let width = this.div.node().parentElement.clientWidth;\r\n    let height = this.div.node().parentElement.clientHeight;\r\n    let fit = this.props.fit;\r\n    let engine = this.props.engine;\r\n    if (this.props.dotSrc.length === 0) {\r\n      this.svg.remove();\r\n      this.svg = d3_select(null);\r\n      this.props.onError(null);\r\n      this.renderGraphReady = false;\r\n      return;\r\n    }\r\n    if (this.props.dotSrc === this.prevDotSrc && this.props.engine === this.prevEngine && this.props.fit === this.prevFit) {\r\n      return;\r\n    }\r\n    if (this.rendering) {\r\n        this.pendingUpdate = true;\r\n        return;\r\n    }\r\n    if (this.props.fit !== this.prevFit) {\r\n      if (this.renderGraphReady) {\r\n        if (this.prevFit) {\r\n          this.unFitGraph();\r\n          this.setZoomScale(1, true);\r\n        } else {\r\n          this.setZoomScale(1, false, true);\r\n          this.fitGraph();\r\n        }\r\n      }\r\n      this.prevFit = this.props.fit;\r\n    }\r\n    this.prevDotSrc = this.props.dotSrc;\r\n    this.prevEngine = this.props.engine;\r\n    try {\r\n      if (!this.props.test.disableDotParsing) {\r\n        this.prelDotGraph = new DotGraph(this.props.dotSrc);\r\n      }\r\n      this.props.onError(null);\r\n    }\r\n    catch(error) {\r\n      if (!error.location) {\r\n        throw error;\r\n      }\r\n      let {location: {start: {line}}, message} = error;\r\n      this.props.onError({message: message, line: line});\r\n      return;\r\n    }\r\n    this.rendering = true;\r\n    this.setState({busy: true});\r\n    this.graphviz\r\n      .width(width)\r\n      .height(height)\r\n      .engine(engine)\r\n      .fit(fit)\r\n      .tweenPaths(this.props.tweenPaths)\r\n      .tweenShapes(this.props.tweenShapes)\r\n      .tweenPrecision(this.props.tweenPrecision)\r\n      .dot(this.props.dotSrc, this.handleDotLayoutReady.bind(this))\r\n      .on('renderEnd', this.handleRenderStaged.bind(this))\r\n      .render(this.handleRenderGraphReady.bind(this));\r\n  }\r\n\r\n  handleDotLayoutReady() {\r\n    let [, , width, height] = this.graphviz.data().attributes.viewBox.split(' ');\r\n    this.originalViewBox = {width, height};\r\n  }\r\n\r\n  handleRenderStaged() {\r\n    if (this.renderGraphReady) {\r\n      this.markSelectedComponents(this.selectedComponents);\r\n    }\r\n  }\r\n\r\n  handleRenderGraphReady() {\r\n    this.svg = this.div.selectWithoutDataPropagation(\"svg\");\r\n    this.graph0 = this.svg.selectWithoutDataPropagation(\"g\");\r\n    this.dotGraph = this.prelDotGraph;\r\n    this.addEventHandlers();\r\n    this.rendering = false;\r\n    if (!this.renderGraphReady) {\r\n      this.renderGraphReady = true;\r\n      this.setZoomScale(1, true);\r\n      this.graphviz\r\n        .transition(() => d3_transition().duration(this.props.transitionDuration * 1000));\r\n      this.props.onInitialized();\r\n    }\r\n    this.setState({busy: false});\r\n    if (this.pendingUpdate) {\r\n      this.pendingUpdate = false;\r\n      this.renderGraph();\r\n    }\r\n  }\r\n\r\n  handleZoomInButtonClick = () => {\r\n    let scale = d3_zoomTransform(this.graphviz.zoomSelection().node()).k;\r\n    scale = scale * 1.2;\r\n    this.setZoomScale(scale);\r\n  }\r\n\r\n  handleZoomOutButtonClick = () => {\r\n    let scale = d3_zoomTransform(this.graphviz.zoomSelection().node()).k;\r\n    scale = scale / 1.2;\r\n    this.setZoomScale(scale);\r\n  }\r\n\r\n  handleZoomOutMapButtonClick = () => {\r\n    let viewBox = this.svg.attr(\"viewBox\").split(' ');\r\n    let bbox = this.graph0.node().getBBox();\r\n    let xRatio = viewBox[2] / bbox.width;\r\n    let yRatio = viewBox[3] / bbox.height;\r\n    let scale = Math.min(xRatio, yRatio);\r\n    this.setZoomScale(scale, true);\r\n  }\r\n\r\n  handleZoomResetButtonClick = () => {\r\n    this.setZoomScale(1, true);\r\n  }\r\n\r\n  setZoomScale = (scale, center=false, reset=false) => {\r\n    let viewBox = this.svg.attr(\"viewBox\").split(' ');\r\n    let bbox = this.graph0.node().getBBox();\r\n    let {x, y, k} = d3_zoomTransform(this.graphviz.zoomSelection().node());\r\n    let [x0, y0, scale0] = [x, y, k];\r\n    let xOffset0 = x0 + bbox.x * scale0;\r\n    let yOffset0 = y0 + bbox.y * scale0;\r\n    let xCenter = viewBox[2] / 2;\r\n    let yCenter = viewBox[3] / 2;\r\n    let xOffset;\r\n    let yOffset;\r\n    if (center) {\r\n      xOffset = (viewBox[2] - bbox.width * scale) / 2;\r\n      yOffset = (viewBox[3] - bbox.height * scale) / 2;\r\n    } else if (reset) {\r\n      xOffset = 0;\r\n      yOffset = 0;\r\n    } else {\r\n      xOffset = xCenter - (xCenter - xOffset0) * scale / scale0;\r\n      yOffset = yCenter - (yCenter - yOffset0) * scale / scale0;\r\n    }\r\n    x = -bbox.x * scale + xOffset;\r\n    y = -bbox.y * scale + yOffset;\r\n    let transform = d3_zoomIdentity.translate(x, y).scale(scale);\r\n    this.graphviz.zoomSelection().call(this.graphviz.zoomBehavior().transform, transform);\r\n  }\r\n\r\n  addEventHandlers() {\r\n\r\n    /*\r\n      Some empirical non-obvious and other relevant things to note:\r\n        1. Click events are preceeded by mousedown and mouseup events on the\r\n           same element.\r\n        2. 1st button clicks are click events on all elements.\r\n        3. 2nd and 3rd button clicks are click events on document and window\r\n           only, not on their children, although the event target is the child.\r\n        4. Keyboard events are dispatched on BODY, not on its children. This can\r\n           however be changed with the contenteditable attribute.\r\n    */\r\n\r\n    let self = this;\r\n    this.graphviz.zoomBehavior().filter(function (event) {\r\n      if (event.type === 'mousedown' && !event.ctrlKey) {\r\n        if (self.isDrawingEdge) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n\r\n    var nodes = this.svg.selectAll(\".node\");\r\n    var edges = this.svg.selectAll(\".edge\");\r\n\r\n    d3_select(window).on(\"resize\", this.resizeSVG.bind(this));\r\n    this.div.on(\"click\", this.handleClickDiv.bind(this));\r\n    d3_select(document).on(\"keydown\", this.handleKeyDownDocument.bind(this));\r\n    this.div.on(\"mousemove\", this.handleMouseMoveDiv.bind(this));\r\n    this.div.on(\"contextmenu\", this.handleRightClickDiv.bind(this));\r\n    this.svg.on(\"mousedown\", this.handleMouseDownSvg.bind(this));\r\n    this.svg.on(\"mousemove\", this.handleMouseMoveSvg.bind(this));\r\n    this.svg.on(\"click\", this.handleClickSvg.bind(this));\r\n    this.svg.on(\"mouseup\", this.handleMouseUpSvg.bind(this));\r\n    nodes.on(\"click mousedown\", this.handleClickNode.bind(this));\r\n    nodes.on(\"dblclick\", this.handleDblClickNode.bind(this));\r\n    nodes.on(\"contextmenu\", this.handleRightClickNode.bind(this));\r\n    edges.on(\"click mousedown\", this.handleClickEdge.bind(this));\r\n\r\n  }\r\n\r\n  handleClickDiv(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (!(event.which === 1 && event.shiftKey)) {\r\n      this.unSelectComponents();\r\n    }\r\n  }\r\n\r\n  handleKeyDownDocument(event) {\r\n    if (!this.props.hasFocus) {\r\n      return;\r\n    }\r\n    if (event.target.nodeName !== 'BODY') {\r\n      return;\r\n    }\r\n    if (event.key === 'Escape') {\r\n      this.graphviz.removeDrawnEdge();\r\n      this.unSelectComponents();\r\n    }\r\n    else if (event.key === 'Delete') {\r\n      this.deleteSelectedComponents.call(this);\r\n      this.graphviz.removeDrawnEdge();\r\n    }\r\n    else if (event.ctrlKey && event.key === 'c') {\r\n      let nodes = this.selectedComponents.filter('.node');\r\n      if (nodes.size() > 0) {\r\n          let nodeName = nodes.selectWithoutDataPropagation(\"title\").text();\r\n          this.latestNodeAttributes = this.dotGraph.getNodeAttributes(nodeName);\r\n      }\r\n    }\r\n    else if (event.ctrlKey && event.key === 'v') {\r\n      this.insertNodeWithLatestAttributes();\r\n    }\r\n    else if (event.ctrlKey && event.key === 'x') {\r\n      let nodes = this.selectedComponents.filter('.node');\r\n      if (nodes.size() > 0) {\r\n          let nodeName = nodes.selectWithoutDataPropagation(\"title\").text();\r\n          this.latestNodeAttributes = this.dotGraph.getNodeAttributes(nodeName);\r\n      }\r\n      this.deleteSelectedComponents.call(this);\r\n    }\r\n    else if (event.ctrlKey && event.key === 'a') {\r\n      this.selectAllComponents();\r\n    }\r\n    else if (event.ctrlKey && event.key === 'A') {\r\n      let components = this.graph0.selectAll('.edge');\r\n      this.selectComponents(components);\r\n    }\r\n    else if (event.ctrlKey && event.key === 'z') {\r\n      this.props.onUndo();\r\n    }\r\n    else if (event.ctrlKey && event.key === 'y') {\r\n      this.props.onRedo();\r\n    }\r\n    else if (event.key === '?') {\r\n      this.props.onHelp();\r\n    }\r\n    else {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    this.isDrawingEdge = false;\r\n  }\r\n\r\n  handleMouseMoveDiv(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    var [x0, y0] = d3_pointer(event, this.graph0.node());\r\n    var penwidth = 1;\r\n    if (this.latestEdgeAttributes.penwidth != null) {\r\n      if (isNumeric(this.latestEdgeAttributes.penwidth)) {\r\n        penwidth = this.latestEdgeAttributes.penwidth;\r\n      }\r\n    } else if (this.latestEdgeAttributes.style && this.latestEdgeAttributes.style.includes('bold')) {\r\n      penwidth = 2;\r\n    }\r\n    var shortening = penwidth * 2; // avoid mouse pointing on edge\r\n\r\n    if (this.isDrawingEdge) {\r\n      this.graphviz\r\n        .moveDrawnEdgeEndPoint(x0, y0,  {shortening: shortening})\r\n    }\r\n  }\r\n\r\n  handleClickNode(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    if(event.ctrlKey){\r\n      console.log(event.currentTarget.getElementsByTagName(\"title\")[0]);\r\n      this.props.onLabelEditClick();\r\n      return;\r\n    }\r\n\r\n    if (!this.isDrawingEdge && event.which === 1) {\r\n      let extendSelection = event.shiftKey;\r\n      this.selectComponents(d3_select(event.currentTarget), extendSelection);\r\n    }\r\n  }\r\n\r\n  handleDblClickNode(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.unSelectComponents();\r\n    if (this.isDrawingEdge) {\r\n      var endNode = d3_select(event.currentTarget);\r\n      var startNodeName = this.startNode.selectWithoutDataPropagation(\"title\").text();\r\n      var endNodeName = endNode.selectWithoutDataPropagation(\"title\").text();\r\n      this.graphviz\r\n        .insertDrawnEdge(startNodeName + '->' + endNodeName);\r\n      this.latestEdgeAttributes = Object.assign({}, this.props.defaultEdgeAttributes);\r\n      this.dotGraph.insertEdge(startNodeName, endNodeName, this.latestEdgeAttributes);\r\n      this.props.onTextChange(this.dotGraph.dotSrc);\r\n    }else{\r\n      //handle opening\r\n      console.log(\"double click: while not drawing edge\");\r\n    }\r\n    this.isDrawingEdge = false;\r\n  }\r\n\r\n  handleRightClickNode(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.unSelectComponents();\r\n    this.graphviz.removeDrawnEdge();\r\n    this.startNode = d3_select(event.currentTarget);\r\n    var [x0, y0] = d3_pointer(event, this.graph0.node());\r\n    if (this.edgeIndex === null) {\r\n      this.edgeIndex = d3_selectAll('.edge').size();\r\n    } else {\r\n      this.edgeIndex += 1;\r\n    }\r\n    this.latestEdgeAttributes = Object.assign({}, this.props.defaultEdgeAttributes);\r\n    this.latestEdgeAttributes.id = 'edge' + (this.edgeIndex + 1);\r\n\r\n    this.graphviz\r\n      .drawEdge(x0, y0, x0, y0, this.latestEdgeAttributes);\r\n    this.isDrawingEdge = true;\r\n  }\r\n\r\n  handleClickEdge(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    let extendSelection = event.shiftKey;\r\n    this.selectComponents(d3_select(event.currentTarget), extendSelection);\r\n  }\r\n\r\n  handleRightClickDiv(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.unSelectComponents();\r\n  }\r\n\r\n  handleMouseDownSvg(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    if (event.which !== 1) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (this.selectArea) {\r\n      return;\r\n    }\r\n    var [x0, y0] = d3_pointer(event, this.graph0.node());\r\n    this.selectArea = {x0: x0, y0: y0};\r\n    let offset = 1;  // avoid covering the svg at click in Chrome\r\n    this.selectArea.selection = this.graph0.append(\"rect\")\r\n      .attr(\"x\", x0 + offset)\r\n      .attr(\"y\", y0 + offset)\r\n      .attr(\"width\", 0)\r\n      .attr(\"height\", 0)\r\n      .attr(\"fill\", '#99ccff')\r\n      .attr(\"stroke\", '#0000dd')\r\n      .style('stroke-width', 0.5)\r\n      .style('fill-opacity', 0.3);\r\n  }\r\n\r\n  handleMouseMoveSvg(event) {\r\n    if (this.selectArea) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      let {x0, y0} = this.selectArea;\r\n      var [x1, y1] = d3_pointer(event, this.graph0.node());\r\n      let x = Math.min(x0, x1);\r\n      let y = Math.min(y0, y1);\r\n      let width = Math.abs(x1 - x0);\r\n      let height = Math.abs(y1 - y0);\r\n      this.selectArea.selection\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n    }\r\n  }\r\n\r\n  handleClickSvg(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    if (event.which === 1 && this.selectArea) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.selectArea.selection.remove();\r\n      let {x0, y0} = this.selectArea;\r\n      var [x1, y1] = d3_pointer(event, this.graph0.node());\r\n      let x = Math.min(x0, x1);\r\n      let y = Math.min(y0, y1);\r\n      let width = Math.abs(x1 - x0);\r\n      let height = Math.abs(y1 - y0);\r\n      if (width === 0 && height === 0) {\r\n        this.selectArea = null;\r\n        if (!event.shiftKey) {\r\n          this.unSelectComponents();\r\n        }\r\n        return;\r\n      }\r\n      let components = this.graph0.selectAll('.node,.edge');\r\n      components = components.filter(function(d, i) {\r\n        let bbox = this.getBBox();\r\n        if (bbox.x < x || bbox.x + bbox.width > x + width)\r\n          return false\r\n        if (bbox.y < y || bbox.y + bbox.height > y + height)\r\n          return false\r\n        return true\r\n      });\r\n\r\n      let extendSelection = event.shiftKey;\r\n      this.selectComponents(components, extendSelection);\r\n      this.selectArea = null;\r\n    }\r\n  }\r\n\r\n  handleMouseUpSvg(event) {\r\n    this.props.onFocus();\r\n    document.activeElement.blur();\r\n    if (event.which === 2) {\r\n      var [x0, y0] = d3_pointer(event, this.graph0.node());\r\n      if (event.shiftKey) {\r\n        this.insertNodeWithDefaultAttributes(x0, y0, {shape: this.latestInsertedNodeShape});\r\n      } else {\r\n        this.insertNodeWithLatestAttributes(x0, y0);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllComponents() {\r\n    let components = this.graph0.selectAll('.node,.edge');\r\n    this.selectComponents(components);\r\n  }\r\n\r\n  selectComponents(components, extendSelection=false) {\r\n    if (extendSelection) {\r\n      this.selectedComponents = d3_selectAll(this.selectedComponents.nodes().concat(components.nodes()));\r\n    } else {\r\n      this.unSelectComponents();\r\n      this.selectedComponents = components;\r\n    }\r\n    this.markSelectedComponents(components, extendSelection);\r\n    const selectedComponents = this.selectNames.map((name) => this.dotGraph.components[name]);\r\n    this.props.onSelect(selectedComponents);\r\n  }\r\n\r\n  markSelectedComponents(components, extendSelection=false) {\r\n    let scale = this.graph0.node().getCTM().a * 3 / 4;\r\n    let dashLength = Math.max(4 / scale, 2);\r\n    let dashWidth = Math.max(4 / scale, 2);\r\n    let rectNodes = [];\r\n    let titles = [];\r\n    const self = this;\r\n    components.each(function(d, i) {\r\n      let component = d3_select(this);\r\n      let color = 'black';\r\n      const title = component.select('title').text();\r\n      if (component.classed('edge') && self.dotGraph.getEdgeAttributes(title) == null) {\r\n        color = 'red';\r\n      } else {\r\n        titles.push(title);\r\n      }\r\n      let bbox = component.node().getBBox();\r\n      let rect = component.append(\"rect\")\r\n        .attr(\"x\", bbox.x)\r\n        .attr(\"y\", bbox.y)\r\n        .attr(\"width\", bbox.width)\r\n        .attr(\"height\", bbox.height)\r\n        .attr(\"stroke\", color)\r\n        .attr(\"fill\", \"transparent\")\r\n        .attr(\"opacity\", 0.5)\r\n        .attr(\"stroke-dasharray\", dashLength)\r\n        .attr(\"stroke-width\",  dashWidth);\r\n      rectNodes.push(rect.node());\r\n    });\r\n    if (extendSelection) {\r\n      this.selectRects = d3_selectAll(this.selectRects.nodes().concat(rectNodes));\r\n      this.selectNames = this.selectNames.concat(titles);\r\n    } else {\r\n      this.selectRects = d3_selectAll(rectNodes);\r\n      this.selectNames = titles;\r\n    }\r\n  }\r\n\r\n  unSelectComponents() {\r\n    this.selectRects.remove();\r\n    this.selectRects = d3_select(null);\r\n    if (this.selectedComponents.size() > 0) {\r\n      this.selectedComponents = d3_selectAll(null);\r\n      this.props.onSelect([]);\r\n    }\r\n  }\r\n\r\n  deleteSelectedComponents() {\r\n    this.selectedComponents.style(\"display\", \"none\");\r\n    let self = this;\r\n    this.selectedComponents.each(function(d, i) {\r\n      let component = d3_select(this);\r\n      var componentName = component.selectWithoutDataPropagation(\"title\").text();\r\n      if (component.attr('class') === 'node') {\r\n        self.dotGraph.deleteNode(componentName);\r\n      } else {\r\n        self.dotGraph.deleteEdge(componentName);\r\n      }\r\n      if (self.dotGraph.numDeletedComponents === 0) {\r\n        component.style(\"display\", null);\r\n      }\r\n      if (i !== self.selectedComponents.size() - 1) {\r\n        self.dotGraph.reparse();\r\n      }\r\n    });\r\n    this.props.onTextChange(this.dotGraph.dotSrc);\r\n    this.unSelectComponents();\r\n  }\r\n\r\n  getNextNodeId() {\r\n    if (this.nodeIndex === null) {\r\n      this.nodeIndex = d3_select('#canvas').selectAll('.node').size();\r\n    } else {\r\n      this.nodeIndex += 1;\r\n    }\r\n    while (this.dotGraph.getNodeAttributes('n' + this.nodeIndex)) {\r\n      this.nodeIndex += 1;\r\n    }\r\n    return 'n' + this.nodeIndex;\r\n  }\r\n\r\n  resizeSVG() {\r\n    let width = this.div.node().parentElement.clientWidth;\r\n    let height = this.div.node().parentElement.clientHeight;\r\n    let fit = this.props.fit;\r\n\r\n    this.svg\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n    if (!fit) {\r\n      this.unFitGraph();\r\n    }\r\n  };\r\n\r\n  unFitGraph() {\r\n    let width = this.div.node().parentElement.clientWidth;\r\n    let height = this.div.node().parentElement.clientHeight;\r\n    this.svg\r\n      .attr(\"viewBox\", `0 0 ${width * 3 / 4} ${height * 3 / 4}`);\r\n  }\r\n\r\n  fitGraph() {\r\n    this.svg\r\n      .attr(\"viewBox\", `0 0 ${this.originalViewBox.width} ${this.originalViewBox.height}`);\r\n  }\r\n\r\n  handleNodeShapeClick = (event, shape) => {\r\n    if (shape === '(default)') {\r\n      shape = null;\r\n    }\r\n    this.props.onFocus();\r\n    let x0 = null;\r\n    let y0 = null;\r\n    this.latestInsertedNodeShape = shape;\r\n    this.insertNodeWithDefaultAttributes(x0, y0, {shape: shape});\r\n  }\r\n\r\n  handleNodeShapeDragStart = (event, shape) => {\r\n    if (shape === '(default)') {\r\n      shape = null;\r\n    }\r\n    let outsideOfViewPort = 1000000;\r\n    this.latestInsertedNodeShape = shape;\r\n    this.drawNodeWithDefaultAttributes(outsideOfViewPort, outsideOfViewPort, {shape: shape});\r\n    let node = this.graphviz.drawnNodeSelection();\r\n    if (!node.empty() && !window.chrome) {\r\n      let bbox = node.node().getBBox();\r\n      let scale = node.node().getCTM().a;\r\n      node.attr(\"transform\", `scale(${scale})`);\r\n      event.dataTransfer.setDragImage(node.node(), bbox.width / 2 * scale * 4 / 3, bbox.height / 2 * scale * 4 / 3);\r\n    }\r\n    event.dataTransfer.setData(\"text\", shape)\r\n  }\r\n\r\n  handleNodeShapeDragOver = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  handleNodeShapeDrop = (event) => {\r\n    this.props.onFocus();\r\n    event.preventDefault();\r\n    this.graphviz.drawnNodeSelection().attr(\"transform\", null);\r\n    let node = this.graph0.node();\r\n    var point = this.svg.node().createSVGPoint();\r\n    point.x = event.clientX;\r\n    point.y = event.clientY;\r\n    point = point.matrixTransform(node.getScreenCTM().inverse());\r\n    var [x0, y0] = [point.x, point.y];\r\n    this.updateAndInsertDrawnNode(x0, y0, {});\r\n  }\r\n\r\n  handleNodeShapeDragEnd = (event, shape) => {\r\n    this.graphviz.removeDrawnNode();\r\n  }\r\n\r\n  drawNode(x0, y0, nodeName, attributes) {\r\n    this.graphviz.drawNode(x0, y0, nodeName, attributes);\r\n  };\r\n\r\n  updateAndInsertDrawnNode(x0, y0, attributes) {\r\n    let nodeName = this.drawnNodeName;\r\n    attributes = Object.assign(this.latestNodeAttributes, attributes);\r\n    this.graphviz.updateDrawnNode(x0, y0, nodeName, attributes);\r\n    this.graphviz.insertDrawnNode(nodeName);\r\n    this.dotGraph.insertNode(nodeName, attributes);\r\n    this.props.onTextChange(this.dotGraph.dotSrc);\r\n  };\r\n\r\n  insertNode(x0, y0, nodeName, attributes) {\r\n    this.drawNode(x0, y0, nodeName, attributes);\r\n    this.graphviz.insertDrawnNode(nodeName);\r\n    this.dotGraph.insertNode(nodeName, attributes);\r\n    this.props.onTextChange(this.dotGraph.dotSrc);\r\n  };\r\n\r\n  drawNodeWithDefaultAttributes(x0, y0, attributesToOverride={}) {\r\n    this.latestNodeAttributes = Object.assign({}, this.props.defaultNodeAttributes);\r\n    Object.assign(this.latestNodeAttributes, attributesToOverride);\r\n    this.drawnNodeName = this.getNextNodeId();\r\n    this.drawNode(x0, y0, this.drawnNodeName, this.latestNodeAttributes);\r\n  }\r\n\r\n  insertNodeWithLatestAttributes(x0, y0, attributesToOverride={}) {\r\n    if (x0 == null || y0 == null) {\r\n      let node = this.graph0.node();\r\n      let bbox = node.getBBox();\r\n      x0 = x0 || bbox.x + bbox.width / 2;\r\n      y0 = y0 || bbox.y + bbox.height / 2;\r\n    }\r\n    Object.assign(this.latestNodeAttributes, attributesToOverride);\r\n    let nodeName = this.getNextNodeId();\r\n    this.insertNode(x0, y0, nodeName, this.latestNodeAttributes);\r\n  }\r\n\r\n  insertNodeWithDefaultAttributes(x0, y0, attributesToOverride={}) {\r\n    this.latestNodeAttributes = Object.assign({}, this.props.defaultNodeAttributes);\r\n    this.insertNodeWithLatestAttributes(x0, y0, attributesToOverride);\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          id=\"canvas\"\r\n          ref={div => this.div = d3_select(div)}\r\n          onDragOver={this.handleNodeShapeDragOver}\r\n          onDrop={this.handleNodeShapeDrop.bind(this)}\r\n        >\r\n        </div>\r\n        {this.state.busy && (\r\n          <Fade\r\n            in={true}\r\n            style={{\r\n              transitionDelay: '800ms',\r\n            }}\r\n            unmountOnExit\r\n          >\r\n             <CircularProgress\r\n               id=\"busy-indicator\"\r\n               className={classes.progress}\r\n               color=\"secondary\"\r\n               size={20}\r\n               thickness={4.5}\r\n             />\r\n          </Fade>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nGraph.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Graph);"]},"metadata":{},"sourceType":"module"}