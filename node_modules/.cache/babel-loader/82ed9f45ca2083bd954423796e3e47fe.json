{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\user\\\\KAOS-modeling-editor\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\KAOS-modeling-editor\\\\src\\\\pages\\\\index.js\";\nimport React from 'react';\nimport 'typeface-roboto';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport withRoot from '../withRoot';\nimport ButtonAppBar from '../ButtonAppBar';\nimport Graph from '../Graph';\nimport TextEditor from '../TextEditor';\nimport MainMenu from '../MainMenu';\nimport HelpMenu from '../HelpMenu';\nimport SettingsDialog from '../SettingsDialog';\nimport OpenFromBrowserDialog from '../OpenFromBrowserDialog';\nimport SaveAsToBrowserDialog from '../SaveAsToBrowserDialog';\nimport InsertPanels from '../InsertPanels';\nimport FormatDrawer from '../FormatDrawer';\nimport DescriptionDrawer from '../DescriptionDrawer';\nimport { schemeCategory10 as d3_schemeCategory10 } from 'd3-scale-chromatic';\nimport { schemePaired as d3_schemePaired } from 'd3-scale-chromatic';\nimport KeyboardShortcutsDialog from '../KeyboardShortcutsDialog';\nimport MouseOperationsDialog from '../MouseOperationsDialog';\nimport AboutDialog from '../AboutDialog';\nimport LabelEditDialog from '../LabelEditDialog';\nimport { parse as qs_parse } from 'qs';\nimport { stringify as qs_stringify } from 'qs';\nimport ExportAsUrlDialog from '../ExportAsUrlDialog';\nimport ExportAsSvgDialog from '../ExportAsSvgDialog';\nimport { graphvizVersion } from '../graphvizVersion';\nimport UpdatedSnackbar from '../UpdatedSnackbar';\nimport packageJSON from '../../package.json';\nimport Axios from 'axios';\n\nconst styles = theme => ({\n  root: {\n    textAlign: 'center'\n  },\n  paper: {\n    // viewport height - app bar - 2 * padding\n    height: \"calc(100vh - 64px - 2 * 12px)\"\n  },\n  paperWhenUpdatedSnackbarIsOpen: {\n    \"margin-top\": \"64px\",\n    height: \"calc(100vh - 64px - 64px - 2 * 12px)\"\n  }\n});\n\nconst defaultElevation = 2;\nconst focusedElevation = 8;\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setPersistentState = updater => {\n      this.setState(state => {\n        if (typeof updater === 'function') {\n          var obj = updater(state);\n        } else {\n          obj = updater;\n        }\n\n        if (obj != null) {\n          Object.keys(obj).forEach(key => {\n            let value = obj[key];\n\n            if (typeof value === 'boolean') {\n              value = value.toString();\n            } else if (typeof value === 'object') {\n              value = JSON.stringify(value);\n            }\n\n            localStorage.setItem(key, value);\n          });\n        }\n\n        return obj;\n      });\n    };\n\n    this.handleTextChange = (text, undoRedoState) => {\n      this.setPersistentState(state => {\n        const newState = {\n          name: state.name || (text ? this.createUntitledName(state.projects) : ''),\n          dotSrc: text\n        };\n\n        if (!this.disableDotSrcLastChangeTimeUpdate) {\n          newState.dotSrcLastChangeTime = Date.now();\n        }\n\n        return newState;\n      });\n      this.disableDotSrcLastChangeTimeUpdate = false;\n\n      if (this.resetUndoAtNextTextChange) {\n        this.resetUndoStack();\n        undoRedoState = {\n          hasUndo: false,\n          hasRedo: false\n        };\n        this.resetUndoAtNextTextChange = false;\n      }\n\n      this.setState(undoRedoState);\n    };\n\n    this.handleGoalDescriptionChange = description => {\n      this.setPersistentState(state => {\n        const newState = {\n          name: state.name || (description ? this.createUntitledName(state.projects) : ''),\n          goalDescription: description\n        };\n        return newState;\n      });\n    };\n\n    this.handleGoalDescriptionParsing = () => {\n      let handleTextChange = this.handleTextChange;\n      Axios.post('http://127.0.0.1:5000/parse', {\n        post_text: this.state.goalDescription\n      }, {\n        headers: {\n          'Access-Control-Allow-Origin': '*'\n        }\n      }).then(function (res) {\n        let result = res.data.result;\n        result = result.replace(/\\n(?!\t)/g, \" \\\\n\");\n        result = result.replace(/\\\\n fill/g, \"fill\");\n        result = result.replaceAll(\"\\\\n}\", \"}\");\n        result = result.replace(/\\\\n$/, \"\");\n        console.log(result);\n        handleTextChange(result);\n      });\n      this.setState({\n        logName: \"log-\" + new Date().getTime(),\n        howOftenLabelsAreCloned: 0,\n        howOftenLabelsAreEdited: 0,\n        howOftenEdgesAreEdited: 0\n      });\n    };\n\n    this.handleMainMenuButtonClick = anchorEl => {\n      this.setState({\n        mainMenuIsOpen: true,\n        mainMenuAnchorEl: anchorEl\n      });\n    };\n\n    this.handleNewClick = () => {\n      this.handleSaveAsToBrowser('');\n      this.resetUndoAtNextTextChange = true;\n    };\n\n    this.handleRenameClick = () => {\n      this.setState({\n        rename: true,\n        saveToBrowserAsDialogIsOpen: true\n      });\n    };\n\n    this.handleLabelCloning = () => {\n      this.setState({\n        howOftenLabelsAreCloned: this.state.howOftenLabelsAreCloned + 1\n      });\n    };\n\n    this.handleEdgeEditing = () => {\n      this.setState({\n        howOftenEdgesAreEdited: this.state.howOftenEdgesAreEdited + 1\n      });\n    };\n\n    this.handleExportAsUrlClick = () => {\n      this.setState({\n        exportAsUrlDialogIsOpen: true\n      });\n    };\n\n    this.handleExportAsSvgClick = () => {\n      this.setState({\n        exportAsSvgDialogIsOpen: true\n      });\n    };\n\n    this.handleExportAsUrlClose = () => {\n      this.setState({\n        exportAsUrlDialogIsOpen: false\n      });\n    };\n\n    this.handleExportAsSvgClose = () => {\n      this.setState({\n        exportAsSvgDialogIsOpen: false\n      });\n    };\n\n    this.handleUndoButtonClick = () => {\n      this.undo();\n    };\n\n    this.handleRedoButtonClick = () => {\n      this.redo();\n    };\n\n    this.handleMainMenuClose = () => {\n      this.setState({\n        mainMenuIsOpen: false\n      });\n    };\n\n    this.handleHelpButtonClick = anchorEl => {\n      this.setState({\n        helpMenuIsOpen: true,\n        helpMenuAnchorEl: anchorEl\n      });\n    };\n\n    this.handleHelpMenuClose = () => {\n      this.setState({\n        helpMenuIsOpen: false\n      });\n    };\n\n    this.handleInsertButtonClick = () => {\n      this.setFocusIf('insertPanelsAreOpen', null, 'InsertPanels');\n      this.setPersistentState({\n        insertPanelsAreOpen: !this.state.insertPanelsAreOpen\n      });\n    };\n\n    this.handleNodeFormatButtonClick = () => {\n      this.setFocusIf('nodeFormatDrawerIsOpen', null, 'NodeFormatDrawer');\n      this.setPersistentState({\n        nodeFormatDrawerIsOpen: !this.state.nodeFormatDrawerIsOpen,\n        edgeFormatDrawerIsOpen: false,\n        goalDescriptionDrawerIsOpen: false\n      });\n    };\n\n    this.handleNodeFormatDrawerClose = () => {\n      this.setPersistentState({\n        nodeFormatDrawerIsOpen: false\n      });\n      this.setFocus(null);\n    };\n\n    this.handleEdgeFormatButtonClick = () => {\n      this.setFocusIf('edgeFormatDrawerIsOpen', null, 'EdgeFormatDrawer');\n      this.setPersistentState({\n        nodeFormatDrawerIsOpen: false,\n        edgeFormatDrawerIsOpen: !this.state.edgeFormatDrawerIsOpen,\n        goalDescriptionDrawerIsOpen: false\n      });\n    };\n\n    this.handleEdgeFormatDrawerClose = () => {\n      this.setPersistentState({\n        edgeFormatDrawerIsOpen: false\n      });\n      this.setFocus(null);\n    };\n\n    this.handleGoalDescriptionButtonClick = () => {\n      this.setFocusIf('goalDescriptionDrawerIsOpen', null, 'GaolDescriptionDrawer');\n      this.setPersistentState({\n        nodeFormatDrawerIsOpen: false,\n        edgeFormatDrawerIsOpen: false,\n        goalDescriptionDrawerIsOpen: !this.state.goalDescriptionDrawerIsOpen\n      });\n    };\n\n    this.handleGoalDescriptionDrawerClose = () => {\n      this.setPersistentState({\n        goalDescriptionDrawerIsOpen: false\n      });\n      this.setFocus(null);\n    };\n\n    this.handleSettingsClick = () => {\n      this.setState({\n        settingsDialogIsOpen: true\n      });\n    };\n\n    this.handleSettingsClose = () => {\n      this.setState({\n        settingsDialogIsOpen: false\n      });\n    };\n\n    this.handleOpenFromBrowserClick = () => {\n      this.setState({\n        openFromBrowserDialogIsOpen: true\n      });\n    };\n\n    this.handleOpenFromBrowserClose = () => {\n      this.setState({\n        openFromBrowserDialogIsOpen: false\n      });\n    };\n\n    this.handleOpenFromBrowser = newCurrentName => {\n      const currentName = this.state.name;\n\n      if (newCurrentName !== currentName) {\n        this.setPersistentState(state => {\n          const projects = _objectSpread({}, state.projects);\n\n          if (currentName) {\n            const currentProject = {\n              dotSrc: state.dotSrc,\n              dotSrcLastChangeTime: state.dotSrcLastChangeTime,\n              svg: this.getSvgString()\n            };\n            projects[currentName] = currentProject;\n          }\n\n          const newCurrentProject = projects[newCurrentName];\n          delete projects[newCurrentName];\n          this.disableDotSrcLastChangeTimeUpdate = true;\n          return _objectSpread({\n            name: newCurrentName\n          }, newCurrentProject, {\n            projects: projects\n          });\n        });\n        this.resetUndoAtNextTextChange = true;\n      }\n\n      this.handleOpenFromBrowserClose();\n    };\n\n    this.createUntitledName = (projects, currentName) => {\n      const baseName = 'Untitled Graph';\n      let newName = baseName;\n\n      while (projects[newName] || newName === currentName) {\n        newName = baseName + ' ' + (+newName.replace(baseName, '') + 1);\n      }\n\n      return newName;\n    };\n\n    this.handleOpenFromBrowserDelete = nameToDelete => {\n      this.setPersistentState(state => {\n        const currentName = state.name;\n\n        if (nameToDelete === currentName) {\n          return {\n            name: '',\n            dotSrc: '',\n            dotSrcLastChangeTime: Date.now()\n          };\n        } else {\n          const projects = _objectSpread({}, state.projects);\n\n          delete projects[nameToDelete];\n          return {\n            projects: projects\n          };\n        }\n      });\n    };\n\n    this.handleSaveAsToBrowserClick = () => {\n      this.setState({\n        rename: false,\n        saveToBrowserAsDialogIsOpen: true\n      });\n    };\n\n    this.handleSaveAsToBrowserClose = () => {\n      this.setState({\n        saveToBrowserAsDialogIsOpen: false\n      });\n    };\n\n    this.handleSaveAsToBrowser = (newName, newDotSrc) => {\n      const currentName = this.state.name;\n\n      if (newName !== currentName) {\n        this.setPersistentState(state => {\n          const projects = _objectSpread({}, state.projects);\n\n          delete projects[newName];\n\n          if (currentName && !state.rename) {\n            const currentProject = {\n              dotSrc: this.state.dotSrc,\n              dotSrcLastChangeTime: state.dotSrcLastChangeTime,\n              svg: this.getSvgString()\n            };\n            projects[currentName] = currentProject;\n          }\n\n          return {\n            projects: _objectSpread({}, projects),\n            name: newName,\n            dotSrc: newDotSrc ? newDotSrc : newName ? state.dotSrc : '',\n            dotSrcLastChangeTime: newDotSrc ? Date.now() : state.dotSrcLastChangeTime\n          };\n        });\n      }\n\n      this.handleSaveAsToBrowserClose();\n    };\n\n    this.handleEngineSelectChange = engine => {\n      this.setPersistentState({\n        engine: engine\n      });\n    };\n\n    this.handleFitGraphSwitchChange = fitGraph => {\n      this.setPersistentState({\n        fitGraph: fitGraph\n      });\n    };\n\n    this.handleTransitionDurationChange = transitionDuration => {\n      this.setPersistentState({\n        transitionDuration: transitionDuration\n      });\n    };\n\n    this.handleTweenPathsSwitchChange = tweenPaths => {\n      this.setPersistentState({\n        tweenPaths: tweenPaths\n      });\n    };\n\n    this.handleTweenShapesSwitchChange = tweenShapes => {\n      this.setPersistentState({\n        tweenShapes: tweenShapes\n      });\n    };\n\n    this.handleTweenPrecisionChange = tweenPrecision => {\n      this.setPersistentState({\n        tweenPrecision: tweenPrecision\n      });\n    };\n\n    this.handleHoldOffChange = holdOff => {\n      this.setPersistentState({\n        holdOff: holdOff\n      });\n    };\n\n    this.handleFontSizeChange = fontSize => {\n      this.setPersistentState({\n        fontSize: fontSize\n      });\n    };\n\n    this.handleTabSizeChange = tabSize => {\n      this.setPersistentState({\n        tabSize: tabSize\n      });\n    };\n\n    this.handleNodeStyleChange = style => {\n      this.setPersistentState(state => ({\n        defaultNodeAttributes: _objectSpread({}, state.defaultNodeAttributes, {\n          style: style\n        })\n      }));\n    };\n\n    this.handleNodeColorChange = color => {\n      this.setPersistentState(state => ({\n        defaultNodeAttributes: _objectSpread({}, state.defaultNodeAttributes, {\n          color: color\n        })\n      }));\n    };\n\n    this.handleNodeFillColorChange = color => {\n      this.setPersistentState(state => ({\n        defaultNodeAttributes: _objectSpread({}, state.defaultNodeAttributes, {\n          fillcolor: color\n        })\n      }));\n    };\n\n    this.handleEdgeStyleChange = style => {\n      this.setPersistentState(state => ({\n        defaultEdgeAttributes: _objectSpread({}, state.defaultEdgeAttributes, {\n          style: style\n        })\n      }));\n    };\n\n    this.handleEdgeColorChange = color => {\n      this.setPersistentState(state => ({\n        defaultEdgeAttributes: _objectSpread({}, state.defaultEdgeAttributes, {\n          color: color\n        })\n      }));\n    };\n\n    this.handleEdgeFillColorChange = color => {\n      this.setPersistentState(state => ({\n        defaultEdgeAttributes: _objectSpread({}, state.defaultEdgeAttributes, {\n          fillcolor: color\n        })\n      }));\n    };\n\n    this.handleKeyboardShortcutsClick = () => {\n      this.setState({\n        keyboardShortcutsDialogIsOpen: true\n      });\n    };\n\n    this.handleKeyboardShortcutsDialogClose = () => {\n      this.setState({\n        keyboardShortcutsDialogIsOpen: false\n      });\n    };\n\n    this.handleMouseOperationsClick = () => {\n      this.setState({\n        mouseOperationsDialogIsOpen: true\n      });\n    };\n\n    this.handleMouseOperationsDialogClose = () => {\n      this.setState({\n        mouseOperationsDialogIsOpen: false\n      });\n    };\n\n    this.handleAboutClick = () => {\n      this.setState({\n        aboutDialogIsOpen: true\n      });\n    };\n\n    this.handleAboutDialogClose = () => {\n      this.setState({\n        aboutDialogIsOpen: false\n      });\n    };\n\n    this.handleLabelEditClick = node_title => {\n      console.log(node_title);\n      this.setState({\n        nodeTitle: node_title,\n        originalLabel: this.findNodeLabelFromDotSrc(node_title),\n        labelEditDialogIsOpen: true\n      });\n    };\n\n    this.handleLabelEditDialogClose = () => {\n      this.setState({\n        labelEditDialogIsOpen: false\n      });\n    };\n\n    this.handleLabelConfirmation = label => {\n      //Change Labels\n      console.log(label);\n      let new_label = label.replace(/\\n/g, '\\\\n');\n      let new_src = this.state.dotSrc;\n      let regexp = new RegExp(this.state.nodeTitle + ' \\\\[label=\".*?\"', 'g');\n      new_src = new_src.replace(regexp, this.state.nodeTitle + ' [label=\"' + new_label + '\"');\n      console.log(new_src);\n      this.handleTextChange(new_src);\n      this.handleLabelEditDialogClose(new_src);\n    };\n\n    this.findNodeLabelFromDotSrc = node_title => {\n      let regexp = new RegExp(node_title + ' \\\\[label=\".*?\"', 'g');\n      let label = this.state.dotSrc.match(regexp)[0];\n      label = label.replace(/g.*? \\[label=/g, '').replace(/\\\"/g, '').replace(/\\\\n/g, '\\n');\n      console.log(label);\n      return label;\n    };\n\n    this.registerNodeShapeClick = handleNodeShapeClick => {\n      this.handleNodeShapeClick = handleNodeShapeClick;\n    };\n\n    this.registerNodeShapeDragStart = handleNodeShapeDragStart => {\n      this.handleNodeShapeDragStart = handleNodeShapeDragStart;\n    };\n\n    this.registerNodeShapeDragEnd = handleNodeShapeDragEnd => {\n      this.handleNodeShapeDragEnd = handleNodeShapeDragEnd;\n    };\n\n    this.handleZoomInButtonClick = () => {};\n\n    this.handleZoomOutButtonClick = () => {};\n\n    this.handleZoomOutMapButtonClick = () => {};\n\n    this.handleZoomResetButtonClick = () => {};\n\n    this.registerZoomInButtonClick = handleZoomInButtonClick => {\n      this.handleZoomInButtonClick = handleZoomInButtonClick;\n    };\n\n    this.registerZoomOutButtonClick = handleZoomOutButtonClick => {\n      this.handleZoomOutButtonClick = handleZoomOutButtonClick;\n    };\n\n    this.registerZoomOutMapButtonClick = handleZoomOutMapButtonClick => {\n      this.handleZoomOutMapButtonClick = handleZoomOutMapButtonClick;\n    };\n\n    this.registerZoomResetButtonClick = handleZoomResetButtonClick => {\n      this.handleZoomResetButtonClick = handleZoomResetButtonClick;\n    };\n\n    this.registerGetSvg = getSvg => {\n      this.getSvg = getSvg;\n    };\n\n    this.handleGraphComponentSelect = components => {\n      this.setState({\n        selectedGraphComponents: components\n      });\n    };\n\n    this.handleGraphInitialized = () => {\n      this.setState({\n        graphInitialized: true\n      });\n      this.setPersistentState({\n        svg: this.getSvgString()\n      });\n    };\n\n    this.handleError = error => {\n      if (error) {\n        error.numLines = this.state.dotSrc.split('\\n').length;\n      }\n\n      if (JSON.stringify(error) !== JSON.stringify(this.state.error)) {\n        this.setState({\n          error: error\n        });\n      }\n    };\n\n    this.registerOverwriteText = overwriteText => {\n      this.overwriteText = overwriteText;\n      console.log(this.overwriteText);\n    };\n\n    this.registerUndo = undo => {\n      this.undo = undo;\n    };\n\n    this.registerRedo = redo => {\n      this.redo = redo;\n    };\n\n    this.registerUndoReset = resetUndoStack => {\n      this.resetUndoStack = resetUndoStack;\n    };\n\n    this.handleTextEditorFocus = () => {\n      this.setFocus('TextEditor');\n    };\n\n    this.handleTextEditorBlur = () => {\n      // Needed when the user clicks outside of a pane,\n      // e.g. the app bar or the background\n      this.setFocusIfFocusIs('TextEditor', null);\n    };\n\n    this.handleGraphFocus = () => {\n      this.setFocus('Graph');\n    };\n\n    this.handleInsertPanelsClick = () => {\n      this.setFocus('InsertPanels');\n    };\n\n    this.handleNodeFormatDrawerClick = () => {\n      this.setFocus('NodeFormatDrawer');\n      this.setFocusIf('nodeFormatDrawerIsOpen', 'NodeFormatDrawer', null);\n    };\n\n    this.handleEdgeFormatDrawerClick = () => {\n      this.setFocus('EdgeFormatDrawer');\n      this.setFocusIf('edgeFormatDrawerIsOpen', 'EdgeFormatDrawer', null);\n    };\n\n    this.handleGoalDescriptionDrawerClick = () => {\n      this.setFocus('GoalDescriptionDrawer');\n      this.setFocusIf('GoalDescriptionDrawerIsOpen', 'GoalDescriptionDrawer', null);\n    };\n\n    this.handleUpdatedSnackbarClose = () => {\n      this.setState({\n        \"updatedSnackbarIsOpen\": false\n      });\n      this.setPersistentState({\n        \"version\": packageJSON.version,\n        \"graphvizVersion\": this.state.graphvizVersion\n      });\n    };\n\n    this.setFocus = focusedPane => {\n      this.setState(state => state.focusedPane !== focusedPane && {\n        focusedPane: focusedPane\n      } || null);\n    };\n\n    this.setFocusIfFocusIs = (currentlyFocusedPane, newFocusedPane) => {\n      this.setState(state => state.focusedPane === currentlyFocusedPane && {\n        focusedPane: newFocusedPane\n      } || null);\n    };\n\n    this.setFocusIf = (stateProperty, focusedPaneIf, focusedPaneElse) => {\n      this.setState(state => {\n        const focusedPane = state[stateProperty] ? focusedPaneIf : focusedPaneElse;\n        return state.focusedPane !== focusedPane && {\n          focusedPane: focusedPane\n        } || null;\n      });\n    };\n\n    let dotSrc = localStorage.getItem('dotSrc');\n\n    if (dotSrc == null) {\n      dotSrc = \"strict digraph {\\n      \\ta [shape=\\\"ellipse\\\" style=\\\"filled\\\" fillcolor=\\\"\" + d3_schemeCategory10[0] + \"\\\"]\\n   \\tb [shape=\\\"polygon\\\" style=\\\"filled\\\" fillcolor=\\\"\" + d3_schemeCategory10[1] + \"\\\"]\\n    \\ta -> b [fillcolor=\\\"\" + d3_schemePaired[0] + \"\\\" color=\\\"\" + d3_schemePaired[1] + \"\\\"]\\n\\t  }\";\n    }\n\n    let goalDescription = localStorage.getItem('goalDescription');\n\n    if (goalDescription == null) {\n      goalDescription = '';\n    }\n\n    this.state = {\n      projects: JSON.parse(localStorage.getItem('projects')) || {},\n      initialized: false,\n      name: localStorage.getItem('name') || '',\n      dotSrc: dotSrc,\n      dotSrcLastChangeTime: +localStorage.getItem('dotSrcLastChangeTime') || Date.now(),\n      goalDescription: goalDescription,\n      svg: localStorage.getItem('svg') || '',\n      hasUndo: false,\n      hasRedo: false,\n      mainMenuIsOpen: false,\n      helpMenuIsOpen: false,\n      settingsDialogIsOpen: false,\n      openFromBrowserDialogIsOpen: false,\n      saveToBrowserAsDialogIsOpen: false,\n      replaceName: '',\n      exportAsUrlDialogIsOpen: false,\n      exportAsSvgDialogIsOpen: false,\n      insertPanelsAreOpen: (localStorage.getItem('insertPanelsAreOpen') || 'false') === 'true',\n      nodeFormatDrawerIsOpen: (localStorage.getItem('nodeFormatDrawerIsOpen') || 'false') === 'true',\n      edgeFormatDrawerIsOpen: (localStorage.getItem('edgeFormatDrawerIsOpen') || 'false') === 'true',\n      goalDescriptionDrawerIsOpen: (localStorage.getItem('goalDescriptionDrawerIsOpen') || 'false') === 'true',\n      keyboardShortcutsDialogIsOpen: false,\n      mouseOperationsDialogIsOpen: false,\n      aboutDialogIsOpen: false,\n      labelEditDialogIsOpen: false,\n      nodeTitle: '',\n      originalLabel: '',\n      fitGraph: localStorage.getItem('fitGraph') === 'true',\n      transitionDuration: localStorage.getItem('transitionDuration') || 1,\n      tweenPaths: localStorage.getItem('tweenPaths') !== 'false',\n      tweenShapes: localStorage.getItem('tweenShapes') !== 'false',\n      tweenPrecision: localStorage.getItem('tweenPrecision') || '1%',\n      engine: localStorage.getItem('engine') || 'dot',\n      defaultNodeAttributes: JSON.parse(localStorage.getItem('defaultNodeAttributes')) || {},\n      defaultEdgeAttributes: JSON.parse(localStorage.getItem('defaultEdgeAttributes')) || {},\n      error: null,\n      holdOff: localStorage.getItem('holdOff') || 0.2,\n      fontSize: localStorage.getItem('fontSize') || 12,\n      tabSize: +localStorage.getItem('tabSize') || 4,\n      selectedGraphComponents: [],\n      test: JSON.parse(localStorage.getItem('test')) || {},\n      graphvizVersion: graphvizVersion,\n      newGraphvizVersion: graphvizVersion !== localStorage.getItem('graphvizVersion'),\n      updatedSnackbarIsOpen: packageJSON.version !== localStorage.getItem('version'),\n      selectedGraphComponents: [],\n      logName: localStorage.getItem('logName') || \"log-\" + new Date().getTime(),\n      howOftenLabelsAreCloned: localStorage.getItem('howOftenLabelsAreCloned') || 0,\n      howOftenLabelsAreEdited: localStorage.getItem('howOftenLabelsAreEdited') || 0,\n      howOftenEdgesAreEdited: localStorage.getItem('howOftenEdgesAreEdited') || 0\n    };\n  }\n\n  componentDidMount() {\n    const urlParams = qs_parse(window.location.search.slice(1));\n\n    if (urlParams.dot) {\n      const currentDotSrc = this.state.dotSrc;\n      const newDotSrc = urlParams.dot;\n\n      if (newDotSrc !== currentDotSrc) {\n        const names = Object.keys(this.state.projects).filter(name => {\n          const project = this.state.projects[name];\n          return newDotSrc === project.dotSrc;\n        });\n\n        if (names.length > 0) {\n          this.handleOpenFromBrowser(names[0]);\n        } else {\n          const newName = this.createUntitledName(this.state.projects, this.state.name);\n          this.handleSaveAsToBrowser(newName, newDotSrc);\n        }\n      }\n\n      window.history.replaceState(null, null, window.location.pathname);\n    }\n\n    document.onblur = () => {\n      // Needed when the user clicks outside the document,\n      // e.g. the browser address bar\n      this.setFocus(null);\n    };\n  }\n\n  getSvgString() {\n    const svg = this.getSvg();\n    const serializer = new XMLSerializer();\n    return svg ? serializer.serializeToString(svg) : this.state.svg;\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const editorIsOpen = !this.state.nodeFormatDrawerIsOpen && !this.state.edgeFormatDrawerIsOpen && !this.state.goalDescriptionDrawerIsOpen;\n    const textEditorHasFocus = this.state.focusedPane === 'TextEditor';\n    const nodeFormatDrawerHasFocus = this.state.focusedPane === 'NodeFormatDrawer';\n    const edgeFormatDrawerHasFocus = this.state.focusedPane === 'EdgeFormatDrawer';\n    const goalDescriptionDrawerHasFocus = this.state.focusedPane === 'GoalDescriptionDrawer';\n    const insertPanelsHaveFocus = this.state.focusedPane === 'InsertPanels';\n    const graphHasFocus = this.state.focusedPane === 'Graph';\n    const leftPaneElevation = textEditorHasFocus || nodeFormatDrawerHasFocus || edgeFormatDrawerHasFocus || goalDescriptionDrawerHasFocus ? focusedElevation : defaultElevation;\n    const rightPaneElevation = graphHasFocus ? focusedElevation : defaultElevation;\n    const midPaneElevation = insertPanelsHaveFocus ? focusedElevation : defaultElevation;\n    var columns;\n\n    if (this.state.insertPanelsAreOpen && this.state.graphInitialized) {\n      columns = {\n        textEditor: 3,\n        insertPanels: 3,\n        graph: 6\n      };\n    } else {\n      /* browse */\n      columns = {\n        textEditor: 6,\n        insertPanels: false,\n        graph: 6\n      };\n    }\n\n    const paperClass = this.state.updatedSnackbarIsOpen ? classes.paperWhenUpdatedSnackbarIsOpen : classes.paper;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: process.env.PUBLIC_URL.replace(/\\.$/, '') + \"@hpcc-js/wasm/dist/index.min.js\",\n      type: \"javascript/worker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }), React.createElement(ButtonAppBar, {\n      hasUndo: this.state.hasUndo,\n      hasRedo: this.state.hasRedo,\n      onMenuButtonClick: this.handleMainMenuButtonClick,\n      onNewButtonClick: this.handleNewClick,\n      onUndoButtonClick: this.handleUndoButtonClick,\n      onRedoButtonClick: this.handleRedoButtonClick,\n      onInsertClick: this.handleInsertButtonClick,\n      onNodeFormatClick: this.handleNodeFormatButtonClick,\n      onEdgeFormatClick: this.handleEdgeFormatButtonClick,\n      onGoalDescriptionClick: this.handleGoalDescriptionButtonClick,\n      onZoomInButtonClick: this.handleZoomInButtonClick,\n      onZoomOutButtonClick: this.handleZoomOutButtonClick,\n      onZoomOutMapButtonClick: this.handleZoomOutMapButtonClick,\n      onZoomResetButtonClick: this.handleZoomResetButtonClick,\n      onSettingsButtonClick: this.handleSettingsClick,\n      onOpenInBrowserButtonClick: this.handleOpenFromBrowserClick,\n      onSaveAltButtonClick: this.handleSaveAsToBrowserClick,\n      onHelpButtonClick: this.handleHelpButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }), this.state.mainMenuIsOpen && React.createElement(MainMenu, {\n      anchorEl: this.state.mainMenuAnchorEl,\n      onMenuClose: this.handleMainMenuClose,\n      onSettingsClick: this.handleSettingsClick,\n      onOpenFromBrowserClick: this.handleOpenFromBrowserClick,\n      onSaveAsToBrowserClick: this.handleSaveAsToBrowserClick,\n      onNewClick: this.handleNewClick,\n      onRenameClick: this.handleRenameClick,\n      onExportAsUrlClick: this.handleExportAsUrlClick,\n      onExportAsSvgClick: this.handleExportAsSvgClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }), this.state.settingsDialogIsOpen && React.createElement(SettingsDialog, {\n      engine: this.state.engine,\n      fitGraph: this.state.fitGraph,\n      transitionDuration: this.state.transitionDuration,\n      tweenPaths: this.state.tweenPaths,\n      tweenShapes: this.state.tweenShapes,\n      tweenPrecision: this.state.tweenPrecision,\n      onEngineSelectChange: this.handleEngineSelectChange,\n      onFitGraphSwitchChange: this.handleFitGraphSwitchChange,\n      onTransitionDurationChange: this.handleTransitionDurationChange,\n      onTweenPathsSwitchChange: this.handleTweenPathsSwitchChange,\n      onTweenShapesSwitchChange: this.handleTweenShapesSwitchChange,\n      onTweenPrecisionChange: this.handleTweenPrecisionChange,\n      holdOff: this.state.holdOff,\n      onHoldOffChange: this.handleHoldOffChange,\n      fontSize: this.state.fontSize,\n      onFontSizeChange: this.handleFontSizeChange,\n      tabSize: this.state.tabSize,\n      onTabSizeChange: this.handleTabSizeChange,\n      onSettingsClose: this.handleSettingsClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }), this.state.openFromBrowserDialogIsOpen && React.createElement(OpenFromBrowserDialog, {\n      projects: this.state.projects,\n      dotSrc: this.state.dotSrc,\n      dotSrcLastChangeTime: this.state.dotSrcLastChangeTime,\n      svg: this.getSvgString(),\n      name: this.state.name,\n      onOpen: this.handleOpenFromBrowser,\n      onClose: this.handleOpenFromBrowserClose,\n      onDelete: this.handleOpenFromBrowserDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }), this.state.saveToBrowserAsDialogIsOpen && React.createElement(SaveAsToBrowserDialog, {\n      name: this.state.name,\n      rename: this.state.rename,\n      defaultNewName: this.state.name || this.createUntitledName(this.state.projects),\n      projects: this.state.projects,\n      onSave: this.handleSaveAsToBrowser,\n      onClose: this.handleSaveAsToBrowserClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917\n      },\n      __self: this\n    }), this.state.exportAsUrlDialogIsOpen && React.createElement(ExportAsUrlDialog, {\n      URL: window.location.href + '?' + qs_stringify({\n        dot: this.state.dotSrc\n      }),\n      onClose: this.handleExportAsUrlClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 927\n      },\n      __self: this\n    }), this.state.exportAsSvgDialogIsOpen && React.createElement(ExportAsSvgDialog, {\n      defaultFilename: (this.state.name || this.createUntitledName(this.state.projects)) + '.svg',\n      getSvgString: this.getSvgString.bind(this),\n      onClose: this.handleExportAsSvgClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    }), this.state.updatedSnackbarIsOpen && React.createElement(UpdatedSnackbar, {\n      newGraphvizVersion: this.state.newGraphvizVersion,\n      graphvizVersion: this.state.graphvizVersion,\n      onUpdatedSnackbarClose: this.handleUpdatedSnackbarClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 940\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      style: {\n        margin: 0,\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: columns.textEditor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      elevation: leftPaneElevation,\n      className: paperClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }, this.state.nodeFormatDrawerIsOpen && React.createElement(FormatDrawer, {\n      type: \"node\",\n      defaultAttributes: this.state.defaultNodeAttributes,\n      onClick: this.handleNodeFormatDrawerClick,\n      onFormatDrawerClose: this.handleNodeFormatDrawerClose,\n      onStyleChange: this.handleNodeStyleChange,\n      onColorChange: this.handleNodeColorChange,\n      onFillColorChange: this.handleNodeFillColorChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956\n      },\n      __self: this\n    }), this.state.edgeFormatDrawerIsOpen && React.createElement(FormatDrawer, {\n      type: \"edge\",\n      defaultAttributes: this.state.defaultEdgeAttributes,\n      onClick: this.handleEdgeFormatDrawerClick,\n      onFormatDrawerClose: this.handleEdgeFormatDrawerClose,\n      onStyleChange: this.handleEdgeStyleChange,\n      onColorChange: this.handleEdgeColorChange,\n      onFillColorChange: this.handleEdgeFillColorChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }), this.state.goalDescriptionDrawerIsOpen && React.createElement(DescriptionDrawer, {\n      goalDescription: this.state.goalDescription,\n      onClick: this.handleGoalDescriptionDrawerClick,\n      onDescriptionDrawerClose: this.handleGoalDescriptionDrawerClose,\n      onTextChange: this.handleGoalDescriptionChange,\n      onStartParsing: this.handleGoalDescriptionParsing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: editorIsOpen ? 'block' : 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }, React.createElement(TextEditor // allocated viewport width - 2 * padding\n    , {\n      width: \"calc(\".concat(columns.textEditor * 100 / 12, \"vw - 2 * 12px)\"),\n      height: \"calc(100vh - 64px - 2 * 12px - \".concat(this.updatedSnackbarIsOpen ? \"64px\" : \"0px\", \")\"),\n      dotSrc: this.state.dotSrc,\n      onTextChange: this.handleTextChange,\n      onFocus: this.handleTextEditorFocus,\n      onBlur: this.handleTextEditorBlur,\n      error: this.state.error,\n      selectedGraphComponents: this.state.selectedGraphComponents,\n      holdOff: this.state.holdOff,\n      fontSize: this.state.fontSize,\n      tabSize: this.state.tabSize,\n      registerOverwriteText: this.registerOverwriteText,\n      registerUndo: this.registerUndo,\n      registerRedo: this.registerRedo,\n      registerUndoReset: this.registerUndoReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 987\n      },\n      __self: this\n    })))), this.state.insertPanelsAreOpen && this.state.graphInitialized && React.createElement(Grid, {\n      item: true,\n      xs: columns.insertPanels,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      elevation: midPaneElevation,\n      className: paperClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, React.createElement(InsertPanels, {\n      onClick: this.handleInsertPanelsClick,\n      onNodeShapeClick: this.handleNodeShapeClick,\n      onNodeShapeDragStart: this.handleNodeShapeDragStart,\n      onNodeShapeDragEnd: this.handleNodeShapeDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      xs: columns.graph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      elevation: rightPaneElevation,\n      className: paperClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021\n      },\n      __self: this\n    }, React.createElement(Graph, {\n      hasFocus: graphHasFocus,\n      dotSrc: this.state.dotSrc,\n      engine: this.state.engine,\n      fit: this.state.fitGraph,\n      transitionDuration: this.state.transitionDuration,\n      tweenPaths: this.state.tweenPaths,\n      tweenShapes: this.state.tweenShapes,\n      tweenPrecision: this.state.tweenPrecision,\n      defaultNodeAttributes: this.state.defaultNodeAttributes,\n      defaultEdgeAttributes: this.state.defaultEdgeAttributes,\n      onFocus: this.handleGraphFocus,\n      onTextChange: this.handleTextChange,\n      onHelp: this.handleKeyboardShortcutsClick,\n      onSelect: this.handleGraphComponentSelect,\n      onUndo: this.undo,\n      onRedo: this.redo,\n      registerNodeShapeClick: this.registerNodeShapeClick,\n      registerNodeShapeDragStart: this.registerNodeShapeDragStart,\n      registerNodeShapeDragEnd: this.registerNodeShapeDragEnd,\n      registerZoomInButtonClick: this.registerZoomInButtonClick,\n      registerZoomOutButtonClick: this.registerZoomOutButtonClick,\n      registerZoomOutMapButtonClick: this.registerZoomOutMapButtonClick,\n      registerZoomResetButtonClick: this.registerZoomResetButtonClick,\n      registerGetSvg: this.registerGetSvg,\n      onLabelEditClick: this.handleLabelEditClick,\n      onInitialized: this.handleGraphInitialized,\n      onError: this.handleError,\n      onLabelCloning: this.handleLabelCloning,\n      onEdgeEditing: this.handleEdgeEditing,\n      test: this.state.test,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022\n      },\n      __self: this\n    })))), this.state.helpMenuIsOpen && React.createElement(HelpMenu, {\n      anchorEl: this.state.helpMenuAnchorEl,\n      onMenuClose: this.handleHelpMenuClose,\n      onKeyboardShortcutsClick: this.handleKeyboardShortcutsClick,\n      onMouseOperationsClick: this.handleMouseOperationsClick,\n      onAboutClick: this.handleAboutClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    }), this.state.keyboardShortcutsDialogIsOpen && React.createElement(KeyboardShortcutsDialog, {\n      onKeyboardShortcutsDialogClose: this.handleKeyboardShortcutsDialogClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067\n      },\n      __self: this\n    }), this.state.mouseOperationsDialogIsOpen && React.createElement(MouseOperationsDialog, {\n      onMouseOperationsDialogClose: this.handleMouseOperationsDialogClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072\n      },\n      __self: this\n    }), this.state.aboutDialogIsOpen && React.createElement(AboutDialog, {\n      graphvizVersion: this.state.graphvizVersion,\n      onAboutDialogClose: this.handleAboutDialogClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077\n      },\n      __self: this\n    }), this.state.labelEditDialogIsOpen && React.createElement(LabelEditDialog, {\n      originalLabel: this.state.originalLabel,\n      onLabelEditDialogClose: this.handleLabelEditDialogClose,\n      onLabelConfirmation: this.handleLabelConfirmation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    }));\n  }\n\n}\n\nIndex.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withRoot(withStyles(styles)(Index));","map":{"version":3,"sources":["C:/Users/user/KAOS-modeling-editor/src/pages/index.js"],"names":["React","PropTypes","Paper","Grid","withStyles","withRoot","ButtonAppBar","Graph","TextEditor","MainMenu","HelpMenu","SettingsDialog","OpenFromBrowserDialog","SaveAsToBrowserDialog","InsertPanels","FormatDrawer","DescriptionDrawer","schemeCategory10","d3_schemeCategory10","schemePaired","d3_schemePaired","KeyboardShortcutsDialog","MouseOperationsDialog","AboutDialog","LabelEditDialog","parse","qs_parse","stringify","qs_stringify","ExportAsUrlDialog","ExportAsSvgDialog","graphvizVersion","UpdatedSnackbar","packageJSON","Axios","styles","theme","root","textAlign","paper","height","paperWhenUpdatedSnackbarIsOpen","defaultElevation","focusedElevation","Index","Component","constructor","props","setPersistentState","updater","setState","state","obj","Object","keys","forEach","key","value","toString","JSON","localStorage","setItem","handleTextChange","text","undoRedoState","newState","name","createUntitledName","projects","dotSrc","disableDotSrcLastChangeTimeUpdate","dotSrcLastChangeTime","Date","now","resetUndoAtNextTextChange","resetUndoStack","hasUndo","hasRedo","handleGoalDescriptionChange","description","goalDescription","handleGoalDescriptionParsing","post","post_text","headers","then","res","result","data","replace","replaceAll","console","log","logName","getTime","howOftenLabelsAreCloned","howOftenLabelsAreEdited","howOftenEdgesAreEdited","handleMainMenuButtonClick","anchorEl","mainMenuIsOpen","mainMenuAnchorEl","handleNewClick","handleSaveAsToBrowser","handleRenameClick","rename","saveToBrowserAsDialogIsOpen","handleLabelCloning","handleEdgeEditing","handleExportAsUrlClick","exportAsUrlDialogIsOpen","handleExportAsSvgClick","exportAsSvgDialogIsOpen","handleExportAsUrlClose","handleExportAsSvgClose","handleUndoButtonClick","undo","handleRedoButtonClick","redo","handleMainMenuClose","handleHelpButtonClick","helpMenuIsOpen","helpMenuAnchorEl","handleHelpMenuClose","handleInsertButtonClick","setFocusIf","insertPanelsAreOpen","handleNodeFormatButtonClick","nodeFormatDrawerIsOpen","edgeFormatDrawerIsOpen","goalDescriptionDrawerIsOpen","handleNodeFormatDrawerClose","setFocus","handleEdgeFormatButtonClick","handleEdgeFormatDrawerClose","handleGoalDescriptionButtonClick","handleGoalDescriptionDrawerClose","handleSettingsClick","settingsDialogIsOpen","handleSettingsClose","handleOpenFromBrowserClick","openFromBrowserDialogIsOpen","handleOpenFromBrowserClose","handleOpenFromBrowser","newCurrentName","currentName","currentProject","svg","getSvgString","newCurrentProject","baseName","newName","handleOpenFromBrowserDelete","nameToDelete","handleSaveAsToBrowserClick","handleSaveAsToBrowserClose","newDotSrc","handleEngineSelectChange","engine","handleFitGraphSwitchChange","fitGraph","handleTransitionDurationChange","transitionDuration","handleTweenPathsSwitchChange","tweenPaths","handleTweenShapesSwitchChange","tweenShapes","handleTweenPrecisionChange","tweenPrecision","handleHoldOffChange","holdOff","handleFontSizeChange","fontSize","handleTabSizeChange","tabSize","handleNodeStyleChange","style","defaultNodeAttributes","handleNodeColorChange","color","handleNodeFillColorChange","fillcolor","handleEdgeStyleChange","defaultEdgeAttributes","handleEdgeColorChange","handleEdgeFillColorChange","handleKeyboardShortcutsClick","keyboardShortcutsDialogIsOpen","handleKeyboardShortcutsDialogClose","handleMouseOperationsClick","mouseOperationsDialogIsOpen","handleMouseOperationsDialogClose","handleAboutClick","aboutDialogIsOpen","handleAboutDialogClose","handleLabelEditClick","node_title","nodeTitle","originalLabel","findNodeLabelFromDotSrc","labelEditDialogIsOpen","handleLabelEditDialogClose","handleLabelConfirmation","label","new_label","new_src","regexp","RegExp","match","registerNodeShapeClick","handleNodeShapeClick","registerNodeShapeDragStart","handleNodeShapeDragStart","registerNodeShapeDragEnd","handleNodeShapeDragEnd","handleZoomInButtonClick","handleZoomOutButtonClick","handleZoomOutMapButtonClick","handleZoomResetButtonClick","registerZoomInButtonClick","registerZoomOutButtonClick","registerZoomOutMapButtonClick","registerZoomResetButtonClick","registerGetSvg","getSvg","handleGraphComponentSelect","components","selectedGraphComponents","handleGraphInitialized","graphInitialized","handleError","error","numLines","split","length","registerOverwriteText","overwriteText","registerUndo","registerRedo","registerUndoReset","handleTextEditorFocus","handleTextEditorBlur","setFocusIfFocusIs","handleGraphFocus","handleInsertPanelsClick","handleNodeFormatDrawerClick","handleEdgeFormatDrawerClick","handleGoalDescriptionDrawerClick","handleUpdatedSnackbarClose","version","focusedPane","currentlyFocusedPane","newFocusedPane","stateProperty","focusedPaneIf","focusedPaneElse","getItem","initialized","replaceName","test","newGraphvizVersion","updatedSnackbarIsOpen","componentDidMount","urlParams","window","location","search","slice","dot","currentDotSrc","names","filter","project","history","replaceState","pathname","document","onblur","serializer","XMLSerializer","serializeToString","render","classes","editorIsOpen","textEditorHasFocus","nodeFormatDrawerHasFocus","edgeFormatDrawerHasFocus","goalDescriptionDrawerHasFocus","insertPanelsHaveFocus","graphHasFocus","leftPaneElevation","rightPaneElevation","midPaneElevation","columns","textEditor","insertPanels","graph","paperClass","process","env","PUBLIC_URL","href","bind","margin","width","display","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'typeface-roboto';\r\nimport PropTypes from 'prop-types';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withRoot from '../withRoot';\r\nimport ButtonAppBar from '../ButtonAppBar';\r\nimport Graph from '../Graph';\r\nimport TextEditor from '../TextEditor';\r\nimport MainMenu from '../MainMenu';\r\nimport HelpMenu from '../HelpMenu';\r\nimport SettingsDialog from '../SettingsDialog';\r\nimport OpenFromBrowserDialog from '../OpenFromBrowserDialog';\r\nimport SaveAsToBrowserDialog from '../SaveAsToBrowserDialog';\r\nimport InsertPanels from '../InsertPanels';\r\nimport FormatDrawer from '../FormatDrawer';\r\nimport DescriptionDrawer from '../DescriptionDrawer';\r\nimport { schemeCategory10 as d3_schemeCategory10} from 'd3-scale-chromatic';\r\nimport { schemePaired as d3_schemePaired} from 'd3-scale-chromatic';\r\nimport KeyboardShortcutsDialog from '../KeyboardShortcutsDialog';\r\nimport MouseOperationsDialog from '../MouseOperationsDialog';\r\nimport AboutDialog from '../AboutDialog';\r\nimport LabelEditDialog from '../LabelEditDialog';\r\nimport { parse as qs_parse } from 'qs';\r\nimport { stringify as qs_stringify } from 'qs';\r\nimport ExportAsUrlDialog from '../ExportAsUrlDialog';\r\nimport ExportAsSvgDialog from '../ExportAsSvgDialog'\r\nimport { graphvizVersion } from '../graphvizVersion';\r\nimport UpdatedSnackbar from '../UpdatedSnackbar';\r\nimport packageJSON from '../../package.json';\r\nimport Axios from 'axios';\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    textAlign: 'center',\r\n  },\r\n  paper: {\r\n    // viewport height - app bar - 2 * padding\r\n    height: \"calc(100vh - 64px - 2 * 12px)\",\r\n  },\r\n  paperWhenUpdatedSnackbarIsOpen: {\r\n    \"margin-top\": \"64px\",\r\n    height: \"calc(100vh - 64px - 64px - 2 * 12px)\",\r\n  }\r\n});\r\n\r\nconst defaultElevation = 2;\r\nconst focusedElevation = 8;\r\n\r\nclass Index extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    let dotSrc = localStorage.getItem('dotSrc');\r\n    if (dotSrc == null) {\r\n      dotSrc = `strict digraph {\r\n      \ta [shape=\"ellipse\" style=\"filled\" fillcolor=\"` + d3_schemeCategory10[0] + `\"]\r\n   \tb [shape=\"polygon\" style=\"filled\" fillcolor=\"` + d3_schemeCategory10[1] + `\"]\r\n    \ta -> b [fillcolor=\"` + d3_schemePaired[0] + `\" color=\"` + d3_schemePaired[1] + `\"]\r\n\t  }`;\r\n    }\r\n\r\n    let goalDescription = localStorage.getItem('goalDescription');\r\n    if (goalDescription == null) {\r\n      goalDescription = '';\r\n    }\r\n\r\n    this.state = {\r\n      projects: JSON.parse(localStorage.getItem('projects')) || {},\r\n      initialized: false,\r\n      name: localStorage.getItem('name') || '',\r\n      dotSrc: dotSrc,\r\n      dotSrcLastChangeTime: +localStorage.getItem('dotSrcLastChangeTime') || Date.now(),\r\n      goalDescription: goalDescription,\r\n      svg: localStorage.getItem('svg') || '',\r\n      hasUndo: false,\r\n      hasRedo: false,\r\n      mainMenuIsOpen: false,\r\n      helpMenuIsOpen: false,\r\n      settingsDialogIsOpen: false,\r\n      openFromBrowserDialogIsOpen: false,\r\n      saveToBrowserAsDialogIsOpen: false,\r\n      replaceName: '',\r\n      exportAsUrlDialogIsOpen: false,\r\n      exportAsSvgDialogIsOpen: false,\r\n      insertPanelsAreOpen: (localStorage.getItem('insertPanelsAreOpen') || 'false') === 'true',\r\n      nodeFormatDrawerIsOpen: (localStorage.getItem('nodeFormatDrawerIsOpen') || 'false') === 'true',\r\n      edgeFormatDrawerIsOpen: (localStorage.getItem('edgeFormatDrawerIsOpen') || 'false') === 'true',\r\n      goalDescriptionDrawerIsOpen: (localStorage.getItem('goalDescriptionDrawerIsOpen') || 'false') === 'true',\r\n      keyboardShortcutsDialogIsOpen: false,\r\n      mouseOperationsDialogIsOpen: false,\r\n      aboutDialogIsOpen: false,\r\n      labelEditDialogIsOpen: false,\r\n      nodeTitle: '',\r\n      originalLabel: '',\r\n      fitGraph : localStorage.getItem('fitGraph') === 'true',\r\n      transitionDuration: localStorage.getItem('transitionDuration') || 1,\r\n      tweenPaths : localStorage.getItem('tweenPaths') !== 'false',\r\n      tweenShapes : localStorage.getItem('tweenShapes') !== 'false',\r\n      tweenPrecision : localStorage.getItem('tweenPrecision') || '1%',\r\n      engine : localStorage.getItem('engine') || 'dot',\r\n      defaultNodeAttributes: JSON.parse(localStorage.getItem('defaultNodeAttributes')) || {},\r\n      defaultEdgeAttributes: JSON.parse(localStorage.getItem('defaultEdgeAttributes')) || {},\r\n      error: null,\r\n      holdOff: localStorage.getItem('holdOff') || 0.2,\r\n      fontSize: localStorage.getItem('fontSize') || 12,\r\n      tabSize: +localStorage.getItem('tabSize') || 4,\r\n      selectedGraphComponents: [],\r\n      test: JSON.parse(localStorage.getItem('test')) || {},\r\n      graphvizVersion: graphvizVersion,\r\n      newGraphvizVersion: graphvizVersion !== localStorage.getItem('graphvizVersion'),\r\n      updatedSnackbarIsOpen: packageJSON.version !== localStorage.getItem('version'),\r\n      selectedGraphComponents: [],\r\n      logName: localStorage.getItem('logName') || \"log-\"+(new Date().getTime()),\r\n      howOftenLabelsAreCloned: localStorage.getItem('howOftenLabelsAreCloned') || 0,\r\n      howOftenLabelsAreEdited: localStorage.getItem('howOftenLabelsAreEdited') || 0,\r\n      howOftenEdgesAreEdited: localStorage.getItem('howOftenEdgesAreEdited') || 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const urlParams = qs_parse(window.location.search.slice(1));\r\n    if (urlParams.dot) {\r\n      const currentDotSrc = this.state.dotSrc;\r\n      const newDotSrc = urlParams.dot;\r\n      if (newDotSrc !== currentDotSrc) {\r\n        const names = Object.keys(this.state.projects).filter((name) => {\r\n          const project = this.state.projects[name];\r\n          return newDotSrc === project.dotSrc;\r\n        });\r\n        if (names.length > 0) {\r\n          this.handleOpenFromBrowser(names[0]);\r\n        } else {\r\n          const newName = this.createUntitledName(this.state.projects, this.state.name);\r\n          this.handleSaveAsToBrowser(newName, newDotSrc);\r\n        }\r\n      }\r\n      window.history.replaceState(null, null, window.location.pathname);\r\n    }\r\n    document.onblur = () => {\r\n      // Needed when the user clicks outside the document,\r\n      // e.g. the browser address bar\r\n      this.setFocus(null);\r\n    }\r\n  }\r\n\r\n  setPersistentState = (updater) => {\r\n    this.setState((state) => {\r\n      if (typeof updater === 'function') {\r\n        var obj = updater(state);\r\n      } else {\r\n        obj = updater;\r\n      }\r\n      if (obj != null) {\r\n        Object.keys(obj).forEach((key) => {\r\n          let value = obj[key];\r\n          if (typeof value === 'boolean') {\r\n            value = value.toString();\r\n          }\r\n          else if (typeof value === 'object') {\r\n            value = JSON.stringify(value);\r\n          }\r\n          localStorage.setItem(key, value);\r\n        });\r\n      }\r\n      return obj;\r\n    });\r\n  }\r\n\r\n  handleTextChange = (text, undoRedoState) => {\r\n    this.setPersistentState((state) => {\r\n      const newState = {\r\n        name: state.name || (text ? this.createUntitledName(state.projects) : ''),\r\n        dotSrc: text,\r\n      };\r\n      if (!this.disableDotSrcLastChangeTimeUpdate) {\r\n        newState.dotSrcLastChangeTime = Date.now();\r\n      }\r\n      return newState;\r\n    });\r\n    this.disableDotSrcLastChangeTimeUpdate = false;\r\n    if (this.resetUndoAtNextTextChange) {\r\n      this.resetUndoStack();\r\n      undoRedoState = {\r\n        hasUndo: false,\r\n        hasRedo: false,\r\n      };\r\n      this.resetUndoAtNextTextChange = false;\r\n    }\r\n    this.setState(undoRedoState);\r\n  }\r\n\r\n  handleGoalDescriptionChange = (description) => {\r\n     this.setPersistentState((state) => {\r\n     const newState = {\r\n        name: state.name || (description ? this.createUntitledName(state.projects) : ''),\r\n        goalDescription: description,\r\n      };\r\n      return newState;\r\n    });\r\n  }\r\n\r\n  handleGoalDescriptionParsing = () => {\r\n   let handleTextChange = this.handleTextChange;\r\n    Axios.post('http://127.0.0.1:5000/parse', {\r\n      post_text: this.state.goalDescription\r\n    }, {\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*'\r\n    }}).then(function(res) {\r\n      let result = res.data.result;\r\n      result = result.replace(/\\n(?!\t)/g, \" \\\\n\");\r\n      result = result.replace(/\\\\n fill/g, \"fill\");\r\n      result = result.replaceAll(\"\\\\n}\", \"}\");\r\n      result = result.replace(/\\\\n$/, \"\");\r\n      console.log(result);\r\n      handleTextChange(result);\r\n    })\r\n\r\n    this.setState({\r\n      logName: \"log-\"+(new Date().getTime()),\r\n      howOftenLabelsAreCloned: 0,\r\n      howOftenLabelsAreEdited: 0,\r\n      howOftenEdgesAreEdited: 0,\r\n    });\r\n  }\r\n\r\n  handleMainMenuButtonClick = (anchorEl) => {\r\n    this.setState({\r\n      mainMenuIsOpen: true,\r\n      mainMenuAnchorEl: anchorEl,\r\n    });\r\n  }\r\n\r\n  handleNewClick = () => {\r\n    this.handleSaveAsToBrowser('');\r\n    this.resetUndoAtNextTextChange = true;\r\n  }\r\n\r\n  handleRenameClick = () => {\r\n    this.setState({\r\n      rename: true,\r\n      saveToBrowserAsDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleLabelCloning = () => {\r\n  \tthis.setState({\r\n      howOftenLabelsAreCloned: this.state.howOftenLabelsAreCloned+1,\r\n    });\r\n  }\r\n\r\n  handleEdgeEditing = () => {\r\n  \tthis.setState({\r\n      howOftenEdgesAreEdited: this.state.howOftenEdgesAreEdited+1,\r\n    });\r\n  }\r\n\r\n  handleExportAsUrlClick = () => {\r\n    this.setState({\r\n      exportAsUrlDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleExportAsSvgClick = () => {\r\n    this.setState({\r\n      exportAsSvgDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleExportAsUrlClose = () => {\r\n    this.setState({\r\n      exportAsUrlDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleExportAsSvgClose = () => {\r\n    this.setState({\r\n      exportAsSvgDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleUndoButtonClick = () => {\r\n    this.undo();\r\n  }\r\n\r\n  handleRedoButtonClick = () => {\r\n    this.redo();\r\n  }\r\n\r\n  handleMainMenuClose = () => {\r\n    this.setState({\r\n      mainMenuIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleHelpButtonClick = (anchorEl) => {\r\n    this.setState({\r\n      helpMenuIsOpen: true,\r\n      helpMenuAnchorEl: anchorEl,\r\n    });\r\n  }\r\n\r\n  handleHelpMenuClose = () => {\r\n    this.setState({\r\n      helpMenuIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleInsertButtonClick = () => {\r\n    this.setFocusIf('insertPanelsAreOpen', null, 'InsertPanels')\r\n    this.setPersistentState({\r\n      insertPanelsAreOpen: !this.state.insertPanelsAreOpen,\r\n    });\r\n  }\r\n\r\n  handleNodeFormatButtonClick = () => {\r\n    this.setFocusIf('nodeFormatDrawerIsOpen', null, 'NodeFormatDrawer')\r\n    this.setPersistentState({\r\n      nodeFormatDrawerIsOpen: !this.state.nodeFormatDrawerIsOpen,\r\n      edgeFormatDrawerIsOpen: false,\r\n      goalDescriptionDrawerIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleNodeFormatDrawerClose = () => {\r\n    this.setPersistentState({\r\n      nodeFormatDrawerIsOpen: false,\r\n    });\r\n    this.setFocus(null);\r\n  }\r\n\r\n  handleEdgeFormatButtonClick = () => {\r\n    this.setFocusIf('edgeFormatDrawerIsOpen', null, 'EdgeFormatDrawer')\r\n    this.setPersistentState({\r\n      nodeFormatDrawerIsOpen: false,\r\n      edgeFormatDrawerIsOpen: !this.state.edgeFormatDrawerIsOpen,\r\n      goalDescriptionDrawerIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleEdgeFormatDrawerClose = () => {\r\n    this.setPersistentState({\r\n      edgeFormatDrawerIsOpen: false,\r\n    });\r\n    this.setFocus(null);\r\n  }\r\n\r\n  handleGoalDescriptionButtonClick = () => {\r\n    this.setFocusIf('goalDescriptionDrawerIsOpen', null, 'GaolDescriptionDrawer');\r\n    this.setPersistentState({\r\n      nodeFormatDrawerIsOpen: false,\r\n      edgeFormatDrawerIsOpen: false,\r\n      goalDescriptionDrawerIsOpen: !this.state.goalDescriptionDrawerIsOpen,\r\n    });\r\n  }\r\n\r\n  handleGoalDescriptionDrawerClose = () => {\r\n    this.setPersistentState({\r\n     goalDescriptionDrawerIsOpen: false,\r\n    });\r\n    this.setFocus(null);\r\n  }\r\n\r\n  handleSettingsClick = () => {\r\n    this.setState({\r\n      settingsDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleSettingsClose = () => {\r\n    this.setState({\r\n      settingsDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleOpenFromBrowserClick = () => {\r\n    this.setState({\r\n      openFromBrowserDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleOpenFromBrowserClose = () => {\r\n    this.setState({\r\n      openFromBrowserDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleOpenFromBrowser = (newCurrentName) => {\r\n    const currentName = this.state.name;\r\n    if (newCurrentName !== currentName) {\r\n      this.setPersistentState(state => {\r\n        const projects = {...state.projects};\r\n        if (currentName) {\r\n          const currentProject = {\r\n            dotSrc: state.dotSrc,\r\n            dotSrcLastChangeTime: state.dotSrcLastChangeTime,\r\n            svg: this.getSvgString(),\r\n          };\r\n          projects[currentName] = currentProject;\r\n        }\r\n        const newCurrentProject = projects[newCurrentName];\r\n        delete projects[newCurrentName];\r\n        this.disableDotSrcLastChangeTimeUpdate = true;\r\n        return {\r\n          name: newCurrentName,\r\n          ...newCurrentProject,\r\n          projects: projects,\r\n        }\r\n      });\r\n      this.resetUndoAtNextTextChange = true;\r\n    }\r\n    this.handleOpenFromBrowserClose();\r\n  }\r\n\r\n  createUntitledName = (projects, currentName) => {\r\n    const baseName = 'Untitled Graph';\r\n    let newName = baseName;\r\n    while (projects[newName] || newName === currentName) {\r\n      newName = baseName + ' ' + (+newName.replace(baseName, '') + 1);\r\n    }\r\n    return newName;\r\n  }\r\n\r\n  handleOpenFromBrowserDelete = (nameToDelete) => {\r\n    this.setPersistentState((state) => {\r\n      const currentName = state.name;\r\n      if (nameToDelete === currentName) {\r\n        return {\r\n          name: '',\r\n          dotSrc: '',\r\n          dotSrcLastChangeTime: Date.now(),\r\n        }\r\n      } else {\r\n        const projects = {...state.projects};\r\n        delete projects[nameToDelete];\r\n        return {\r\n          projects: projects,\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSaveAsToBrowserClick = () => {\r\n    this.setState({\r\n      rename: false,\r\n      saveToBrowserAsDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleSaveAsToBrowserClose = () => {\r\n    this.setState({\r\n      saveToBrowserAsDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleSaveAsToBrowser = (newName, newDotSrc) => {\r\n    const currentName = this.state.name;\r\n    if (newName !== currentName) {\r\n      this.setPersistentState((state) => {\r\n        const projects = {...state.projects};\r\n        delete projects[newName];\r\n        if (currentName && !state.rename) {\r\n          const currentProject = {\r\n            dotSrc: this.state.dotSrc,\r\n            dotSrcLastChangeTime: state.dotSrcLastChangeTime,\r\n            svg: this.getSvgString(),\r\n          };\r\n          projects[currentName] = currentProject;\r\n        }\r\n        return {\r\n          projects: {\r\n            ...projects,\r\n          },\r\n          name: newName,\r\n          dotSrc: newDotSrc ? newDotSrc : (newName ? state.dotSrc : ''),\r\n          dotSrcLastChangeTime: newDotSrc ? Date.now() : state.dotSrcLastChangeTime,\r\n        };\r\n      });\r\n    }\r\n    this.handleSaveAsToBrowserClose();\r\n  }\r\n\r\n  handleEngineSelectChange = (engine) => {\r\n    this.setPersistentState({\r\n      engine: engine,\r\n    });\r\n  }\r\n\r\n  handleFitGraphSwitchChange = (fitGraph) => {\r\n    this.setPersistentState({\r\n      fitGraph: fitGraph,\r\n    });\r\n  }\r\n\r\n  handleTransitionDurationChange = (transitionDuration) => {\r\n    this.setPersistentState({\r\n      transitionDuration: transitionDuration,\r\n    });\r\n  }\r\n\r\n  handleTweenPathsSwitchChange = (tweenPaths) => {\r\n    this.setPersistentState({\r\n      tweenPaths: tweenPaths,\r\n    });\r\n  }\r\n\r\n  handleTweenShapesSwitchChange = (tweenShapes) => {\r\n    this.setPersistentState({\r\n      tweenShapes: tweenShapes,\r\n    });\r\n  }\r\n\r\n  handleTweenPrecisionChange = (tweenPrecision) => {\r\n    this.setPersistentState({\r\n      tweenPrecision: tweenPrecision,\r\n    });\r\n  }\r\n\r\n  handleHoldOffChange = (holdOff) => {\r\n    this.setPersistentState({\r\n      holdOff: holdOff,\r\n    });\r\n  }\r\n\r\n  handleFontSizeChange = (fontSize) => {\r\n    this.setPersistentState({\r\n      fontSize: fontSize,\r\n    });\r\n  }\r\n\r\n  handleTabSizeChange = (tabSize) => {\r\n    this.setPersistentState({\r\n      tabSize: tabSize,\r\n    });\r\n  }\r\n\r\n  handleNodeStyleChange = (style) => {\r\n    this.setPersistentState(state => ({\r\n      defaultNodeAttributes: {\r\n          ...state.defaultNodeAttributes,\r\n        style: style,\r\n      },\r\n    }));\r\n  }\r\n\r\n  handleNodeColorChange = (color) => {\r\n    this.setPersistentState(state => ({\r\n      defaultNodeAttributes: {\r\n          ...state.defaultNodeAttributes,\r\n        color: color,\r\n      },\r\n    }));\r\n  }\r\n\r\n  handleNodeFillColorChange = (color) => {\r\n    this.setPersistentState(state => ({\r\n      defaultNodeAttributes: {\r\n          ...state.defaultNodeAttributes,\r\n        fillcolor: color,\r\n      },\r\n    }));\r\n  }\r\n\r\n  handleEdgeStyleChange = (style) => {\r\n    this.setPersistentState(state => ({\r\n      defaultEdgeAttributes: {\r\n          ...state.defaultEdgeAttributes,\r\n        style: style,\r\n      },\r\n    }));\r\n  }\r\n\r\n  handleEdgeColorChange = (color) => {\r\n    this.setPersistentState(state => ({\r\n      defaultEdgeAttributes: {\r\n          ...state.defaultEdgeAttributes,\r\n        color: color,\r\n      },\r\n    }));\r\n  }\r\n\r\n  handleEdgeFillColorChange = (color) => {\r\n    this.setPersistentState(state => ({\r\n      defaultEdgeAttributes: {\r\n          ...state.defaultEdgeAttributes,\r\n        fillcolor: color,\r\n      },\r\n    }));\r\n  }\r\n\r\n  handleKeyboardShortcutsClick = () => {\r\n    this.setState({\r\n      keyboardShortcutsDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleKeyboardShortcutsDialogClose = () => {\r\n    this.setState({\r\n      keyboardShortcutsDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleMouseOperationsClick = () => {\r\n    this.setState({\r\n      mouseOperationsDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleMouseOperationsDialogClose = () => {\r\n    this.setState({\r\n      mouseOperationsDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleAboutClick = () => {\r\n    this.setState({\r\n      aboutDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleAboutDialogClose = () => {\r\n    this.setState({\r\n      aboutDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleLabelEditClick = (node_title) => {\r\n    console.log(node_title);\r\n    this.setState({\r\n      nodeTitle: node_title,\r\n      originalLabel: this.findNodeLabelFromDotSrc(node_title),\r\n      labelEditDialogIsOpen: true,\r\n    });\r\n  }\r\n\r\n  handleLabelEditDialogClose = () => {\r\n    this.setState({\r\n      labelEditDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  handleLabelConfirmation = (label) => {\r\n    //Change Labels\r\n    console.log(label);\r\n    let new_label = label.replace(/\\n/g, '\\\\n');\r\n    let new_src = this.state.dotSrc;\r\n    let regexp = new RegExp(this.state.nodeTitle + ' \\\\[label=\".*?\"', 'g');\r\n    new_src = new_src.replace(regexp, this.state.nodeTitle + ' [label=\"' + new_label + '\"');\r\n\tconsole.log(new_src);\r\n\r\n\tthis.handleTextChange(new_src);\r\n\tthis.handleLabelEditDialogClose(new_src);\r\n\r\n\r\n   }\r\n\r\n  findNodeLabelFromDotSrc = (node_title) => {\r\n    let regexp = new RegExp(node_title + ' \\\\[label=\".*?\"', 'g');\r\n    let label = this.state.dotSrc.match(regexp)[0];\r\n    label = label.replace(/g.*? \\[label=/g, '').replace(/\\\"/g, '').replace(/\\\\n/g, '\\n');\r\n    console.log(label);\r\n    return label;\r\n  }\r\n\r\n  registerNodeShapeClick = (handleNodeShapeClick) => {\r\n    this.handleNodeShapeClick = handleNodeShapeClick;\r\n  }\r\n\r\n  registerNodeShapeDragStart = (handleNodeShapeDragStart) => {\r\n    this.handleNodeShapeDragStart = handleNodeShapeDragStart;\r\n  }\r\n\r\n  registerNodeShapeDragEnd = (handleNodeShapeDragEnd) => {\r\n    this.handleNodeShapeDragEnd = handleNodeShapeDragEnd;\r\n  }\r\n\r\n  handleZoomInButtonClick = () => {}\r\n  handleZoomOutButtonClick = () => {}\r\n  handleZoomOutMapButtonClick = () => {}\r\n  handleZoomResetButtonClick = () => {}\r\n\r\n  registerZoomInButtonClick = (handleZoomInButtonClick) => {\r\n    this.handleZoomInButtonClick = handleZoomInButtonClick;\r\n  }\r\n\r\n  registerZoomOutButtonClick = (handleZoomOutButtonClick) => {\r\n    this.handleZoomOutButtonClick = handleZoomOutButtonClick;\r\n  }\r\n\r\n  registerZoomOutMapButtonClick = (handleZoomOutMapButtonClick) => {\r\n    this.handleZoomOutMapButtonClick = handleZoomOutMapButtonClick;\r\n  }\r\n\r\n  registerZoomResetButtonClick = (handleZoomResetButtonClick) => {\r\n    this.handleZoomResetButtonClick = handleZoomResetButtonClick;\r\n  }\r\n\r\n  registerGetSvg = (getSvg) => {\r\n    this.getSvg = getSvg;\r\n  }\r\n\r\n  getSvgString() {\r\n    const svg = this.getSvg();\r\n    const serializer = new XMLSerializer();\r\n    return svg ? serializer.serializeToString(svg) : this.state.svg;\r\n  }\r\n\r\n  handleGraphComponentSelect = (components) => {\r\n    this.setState({\r\n      selectedGraphComponents: components,\r\n    });\r\n  }\r\n\r\n  handleGraphInitialized = () => {\r\n    this.setState({\r\n      graphInitialized: true,\r\n    });\r\n    this.setPersistentState({\r\n      svg: this.getSvgString(),\r\n    });\r\n  }\r\n\r\n  handleError = (error) => {\r\n    if (error) {\r\n      error.numLines = this.state.dotSrc.split('\\n').length;\r\n    }\r\n    if (JSON.stringify(error) !== JSON.stringify(this.state.error)) {\r\n      this.setState({\r\n        error: error,\r\n      });\r\n    }\r\n  }\r\n\r\n  registerOverwriteText = (overwriteText) => {\r\n    this.overwriteText = overwriteText;\r\n    console.log(this.overwriteText);\r\n  }\r\n\r\n  registerUndo = (undo) => {\r\n    this.undo = undo;\r\n  }\r\n\r\n  registerRedo = (redo) => {\r\n    this.redo = redo;\r\n  }\r\n\r\n  registerUndoReset = (resetUndoStack) => {\r\n    this.resetUndoStack = resetUndoStack;\r\n  }\r\n\r\n  handleTextEditorFocus = () => {\r\n    this.setFocus('TextEditor');\r\n  }\r\n\r\n  handleTextEditorBlur = () => {\r\n    // Needed when the user clicks outside of a pane,\r\n    // e.g. the app bar or the background\r\n    this.setFocusIfFocusIs('TextEditor', null);\r\n  }\r\n\r\n  handleGraphFocus = () => {\r\n    this.setFocus('Graph');\r\n  }\r\n\r\n  handleInsertPanelsClick = () => {\r\n    this.setFocus('InsertPanels');\r\n  }\r\n\r\n  handleNodeFormatDrawerClick = () => {\r\n    this.setFocus('NodeFormatDrawer');\r\n    this.setFocusIf('nodeFormatDrawerIsOpen', 'NodeFormatDrawer', null)\r\n  }\r\n\r\n  handleEdgeFormatDrawerClick = () => {\r\n    this.setFocus('EdgeFormatDrawer');\r\n    this.setFocusIf('edgeFormatDrawerIsOpen', 'EdgeFormatDrawer', null)\r\n  }\r\n\r\n  handleGoalDescriptionDrawerClick = () => {\r\n    this.setFocus('GoalDescriptionDrawer');\r\n    this.setFocusIf('GoalDescriptionDrawerIsOpen', 'GoalDescriptionDrawer', null)\r\n  }\r\n\r\n  handleUpdatedSnackbarClose = () => {\r\n    this.setState({ \"updatedSnackbarIsOpen\": false });\r\n    this.setPersistentState({\r\n      \"version\": packageJSON.version,\r\n      \"graphvizVersion\": this.state.graphvizVersion,\r\n    })\r\n  }\r\n\r\n  setFocus = (focusedPane) => {\r\n    this.setState((state) => (state.focusedPane !== focusedPane && {\r\n      focusedPane: focusedPane,\r\n    }) || null);\r\n  }\r\n\r\n  setFocusIfFocusIs = (currentlyFocusedPane, newFocusedPane) => {\r\n    this.setState((state) => (state.focusedPane === currentlyFocusedPane && {\r\n      focusedPane: newFocusedPane,\r\n    }) || null);\r\n  }\r\n\r\n  setFocusIf = (stateProperty, focusedPaneIf, focusedPaneElse) => {\r\n    this.setState((state) => {\r\n      const focusedPane = state[stateProperty] ? focusedPaneIf: focusedPaneElse;\r\n      return (state.focusedPane !== focusedPane && {\r\n        focusedPane: focusedPane,\r\n      }) || null;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const editorIsOpen = !this.state.nodeFormatDrawerIsOpen && !this.state.edgeFormatDrawerIsOpen && !this.state.goalDescriptionDrawerIsOpen;\r\n    const textEditorHasFocus = this.state.focusedPane === 'TextEditor';\r\n    const nodeFormatDrawerHasFocus = this.state.focusedPane === 'NodeFormatDrawer';\r\n    const edgeFormatDrawerHasFocus = this.state.focusedPane === 'EdgeFormatDrawer';\r\n    const goalDescriptionDrawerHasFocus = this.state.focusedPane === 'GoalDescriptionDrawer';\r\n    const insertPanelsHaveFocus = this.state.focusedPane === 'InsertPanels';\r\n    const graphHasFocus = this.state.focusedPane === 'Graph';\r\n    const leftPaneElevation = textEditorHasFocus || nodeFormatDrawerHasFocus || edgeFormatDrawerHasFocus || goalDescriptionDrawerHasFocus ? focusedElevation : defaultElevation;\r\n    const rightPaneElevation = graphHasFocus ? focusedElevation : defaultElevation;\r\n    const midPaneElevation = insertPanelsHaveFocus ? focusedElevation : defaultElevation;\r\n\r\n    var columns;\r\n    if (this.state.insertPanelsAreOpen && this.state.graphInitialized) {\r\n      columns = {\r\n        textEditor: 3,\r\n        insertPanels: 3,\r\n        graph: 6,\r\n      }\r\n    } else { /* browse */\r\n      columns = {\r\n        textEditor: 6,\r\n        insertPanels: false,\r\n        graph: 6,\r\n      }\r\n    }\r\n    const paperClass = this.state.updatedSnackbarIsOpen ? classes.paperWhenUpdatedSnackbarIsOpen : classes.paper;\r\n    return (\r\n      <div className={classes.root}>\r\n            <script src={process.env.PUBLIC_URL.replace(/\\.$/, '') + \"@hpcc-js/wasm/dist/index.min.js\"} type=\"javascript/worker\"></script>\r\n        <ButtonAppBar\r\n          hasUndo={this.state.hasUndo}\r\n          hasRedo={this.state.hasRedo}\r\n          onMenuButtonClick={this.handleMainMenuButtonClick}\r\n          onNewButtonClick={this.handleNewClick}\r\n          onUndoButtonClick={this.handleUndoButtonClick}\r\n          onRedoButtonClick={this.handleRedoButtonClick}\r\n          onInsertClick={this.handleInsertButtonClick}\r\n          onNodeFormatClick={this.handleNodeFormatButtonClick}\r\n          onEdgeFormatClick={this.handleEdgeFormatButtonClick}\r\n          onGoalDescriptionClick={this.handleGoalDescriptionButtonClick}\r\n          onZoomInButtonClick={this.handleZoomInButtonClick}\r\n          onZoomOutButtonClick={this.handleZoomOutButtonClick}\r\n          onZoomOutMapButtonClick={this.handleZoomOutMapButtonClick}\r\n          onZoomResetButtonClick={this.handleZoomResetButtonClick}\r\n          onSettingsButtonClick={this.handleSettingsClick}\r\n          onOpenInBrowserButtonClick={this.handleOpenFromBrowserClick}\r\n          onSaveAltButtonClick={this.handleSaveAsToBrowserClick}\r\n          onHelpButtonClick={this.handleHelpButtonClick}\r\n        >\r\n        </ButtonAppBar>\r\n        {this.state.mainMenuIsOpen &&\r\n          <MainMenu\r\n            anchorEl={this.state.mainMenuAnchorEl}\r\n            onMenuClose={this.handleMainMenuClose}\r\n            onSettingsClick={this.handleSettingsClick}\r\n            onOpenFromBrowserClick={this.handleOpenFromBrowserClick}\r\n            onSaveAsToBrowserClick={this.handleSaveAsToBrowserClick}\r\n            onNewClick={this.handleNewClick}\r\n            onRenameClick={this.handleRenameClick}\r\n            onExportAsUrlClick={this.handleExportAsUrlClick}\r\n            onExportAsSvgClick={this.handleExportAsSvgClick}\r\n          />\r\n        }\r\n        {this.state.settingsDialogIsOpen &&\r\n          <SettingsDialog\r\n            engine={this.state.engine}\r\n            fitGraph={this.state.fitGraph}\r\n            transitionDuration={this.state.transitionDuration}\r\n            tweenPaths={this.state.tweenPaths}\r\n            tweenShapes={this.state.tweenShapes}\r\n            tweenPrecision={this.state.tweenPrecision}\r\n            onEngineSelectChange={this.handleEngineSelectChange}\r\n            onFitGraphSwitchChange={this.handleFitGraphSwitchChange}\r\n            onTransitionDurationChange={this.handleTransitionDurationChange}\r\n            onTweenPathsSwitchChange={this.handleTweenPathsSwitchChange}\r\n            onTweenShapesSwitchChange={this.handleTweenShapesSwitchChange}\r\n            onTweenPrecisionChange={this.handleTweenPrecisionChange}\r\n            holdOff={this.state.holdOff}\r\n            onHoldOffChange={this.handleHoldOffChange}\r\n            fontSize={this.state.fontSize}\r\n            onFontSizeChange={this.handleFontSizeChange}\r\n            tabSize={this.state.tabSize}\r\n            onTabSizeChange={this.handleTabSizeChange}\r\n            onSettingsClose={this.handleSettingsClose}\r\n          />\r\n        }\r\n        {this.state.openFromBrowserDialogIsOpen &&\r\n          <OpenFromBrowserDialog\r\n            projects={this.state.projects}\r\n            dotSrc={this.state.dotSrc}\r\n            dotSrcLastChangeTime={this.state.dotSrcLastChangeTime}\r\n            svg={this.getSvgString()}\r\n            name={this.state.name}\r\n            onOpen={this.handleOpenFromBrowser}\r\n            onClose={this.handleOpenFromBrowserClose}\r\n            onDelete={this.handleOpenFromBrowserDelete}\r\n          />\r\n        }\r\n        {this.state.saveToBrowserAsDialogIsOpen &&\r\n          <SaveAsToBrowserDialog\r\n            name={this.state.name}\r\n            rename={this.state.rename}\r\n            defaultNewName={this.state.name || this.createUntitledName(this.state.projects)}\r\n            projects={this.state.projects}\r\n            onSave={this.handleSaveAsToBrowser}\r\n            onClose={this.handleSaveAsToBrowserClose}\r\n          />\r\n        }\r\n        {this.state.exportAsUrlDialogIsOpen &&\r\n          <ExportAsUrlDialog\r\n            URL={window.location.href + '?' + qs_stringify({dot: this.state.dotSrc})}\r\n            onClose={this.handleExportAsUrlClose}\r\n          />\r\n        }\r\n        {this.state.exportAsSvgDialogIsOpen &&\r\n          <ExportAsSvgDialog\r\n            defaultFilename={(this.state.name || this.createUntitledName(this.state.projects)) + '.svg'}\r\n            getSvgString={this.getSvgString.bind(this)}\r\n            onClose={this.handleExportAsSvgClose}\r\n          />\r\n        }\r\n        {this.state.updatedSnackbarIsOpen &&\r\n          <UpdatedSnackbar\r\n            newGraphvizVersion={this.state.newGraphvizVersion}\r\n            graphvizVersion={this.state.graphvizVersion}\r\n            onUpdatedSnackbarClose={this.handleUpdatedSnackbarClose}\r\n          />\r\n        }\r\n        <Grid container\r\n          spacing={3}\r\n          style={{\r\n            margin: 0,\r\n            width: '100%',\r\n          }}\r\n        >\r\n          <Grid item xs={columns.textEditor}>\r\n            <Paper elevation={leftPaneElevation} className={paperClass}>\r\n              {this.state.nodeFormatDrawerIsOpen &&\r\n                <FormatDrawer\r\n                  type='node'\r\n                  defaultAttributes={this.state.defaultNodeAttributes}\r\n                  onClick={this.handleNodeFormatDrawerClick}\r\n                  onFormatDrawerClose={this.handleNodeFormatDrawerClose}\r\n                  onStyleChange={this.handleNodeStyleChange}\r\n                  onColorChange={this.handleNodeColorChange}\r\n                  onFillColorChange={this.handleNodeFillColorChange}\r\n                />\r\n              }\r\n              {this.state.edgeFormatDrawerIsOpen &&\r\n                <FormatDrawer\r\n                  type='edge'\r\n                  defaultAttributes={this.state.defaultEdgeAttributes}\r\n                  onClick={this.handleEdgeFormatDrawerClick}\r\n                  onFormatDrawerClose={this.handleEdgeFormatDrawerClose}\r\n                  onStyleChange={this.handleEdgeStyleChange}\r\n                  onColorChange={this.handleEdgeColorChange}\r\n                  onFillColorChange={this.handleEdgeFillColorChange}\r\n                />\r\n              }\r\n              {this.state.goalDescriptionDrawerIsOpen &&\r\n                <DescriptionDrawer\r\n                  goalDescription={this.state.goalDescription}\r\n                  onClick={this.handleGoalDescriptionDrawerClick}\r\n                  onDescriptionDrawerClose={this.handleGoalDescriptionDrawerClose}\r\n                  onTextChange={this.handleGoalDescriptionChange}\r\n                  onStartParsing={this.handleGoalDescriptionParsing}\r\n                />\r\n              }\r\n              <div style={{display: editorIsOpen ? 'block' : 'none'}}>\r\n                <TextEditor\r\n                  // allocated viewport width - 2 * padding\r\n                  width={`calc(${columns.textEditor * 100 / 12}vw - 2 * 12px)`}\r\n                  height={`calc(100vh - 64px - 2 * 12px - ${this.updatedSnackbarIsOpen ? \"64px\" : \"0px\"})`}\r\n                  dotSrc={this.state.dotSrc}\r\n                  onTextChange={this.handleTextChange}\r\n                  onFocus={this.handleTextEditorFocus}\r\n                  onBlur={this.handleTextEditorBlur}\r\n                  error={this.state.error}\r\n                  selectedGraphComponents={this.state.selectedGraphComponents}\r\n                  holdOff={this.state.holdOff}\r\n                  fontSize={this.state.fontSize}\r\n                  tabSize={this.state.tabSize}\r\n                  registerOverwriteText={this.registerOverwriteText}\r\n                  registerUndo={this.registerUndo}\r\n                  registerRedo={this.registerRedo}\r\n                  registerUndoReset={this.registerUndoReset}\r\n                />\r\n              </div>\r\n            </Paper>\r\n          </Grid>\r\n          {this.state.insertPanelsAreOpen && this.state.graphInitialized && (\r\n            <Grid item xs={columns.insertPanels}>\r\n              <Paper elevation={midPaneElevation} className={paperClass}>\r\n                <InsertPanels\r\n                    onClick={this.handleInsertPanelsClick}\r\n                    onNodeShapeClick={this.handleNodeShapeClick}\r\n                    onNodeShapeDragStart={this.handleNodeShapeDragStart}\r\n                    onNodeShapeDragEnd={this.handleNodeShapeDragEnd}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          )}\r\n          <Grid item xs={columns.graph}>\r\n            <Paper elevation={rightPaneElevation} className={paperClass}>\r\n              <Graph\r\n                hasFocus={graphHasFocus}\r\n                dotSrc={this.state.dotSrc}\r\n                engine={this.state.engine}\r\n                fit={this.state.fitGraph}\r\n                transitionDuration={this.state.transitionDuration}\r\n                tweenPaths={this.state.tweenPaths}\r\n                tweenShapes={this.state.tweenShapes}\r\n                tweenPrecision={this.state.tweenPrecision}\r\n                defaultNodeAttributes={this.state.defaultNodeAttributes}\r\n                defaultEdgeAttributes={this.state.defaultEdgeAttributes}\r\n                onFocus={this.handleGraphFocus}\r\n                onTextChange={this.handleTextChange}\r\n                onHelp={this.handleKeyboardShortcutsClick}\r\n                onSelect={this.handleGraphComponentSelect}\r\n                onUndo={this.undo}\r\n                onRedo={this.redo}\r\n                registerNodeShapeClick={this.registerNodeShapeClick}\r\n                registerNodeShapeDragStart={this.registerNodeShapeDragStart}\r\n                registerNodeShapeDragEnd={this.registerNodeShapeDragEnd}\r\n                registerZoomInButtonClick={this.registerZoomInButtonClick}\r\n                registerZoomOutButtonClick={this.registerZoomOutButtonClick}\r\n                registerZoomOutMapButtonClick={this.registerZoomOutMapButtonClick}\r\n                registerZoomResetButtonClick={this.registerZoomResetButtonClick}\r\n                registerGetSvg={this.registerGetSvg}\r\n                onLabelEditClick={this.handleLabelEditClick}\r\n                onInitialized={this.handleGraphInitialized}\r\n                onError={this.handleError}\r\n                onLabelCloning={this.handleLabelCloning}\r\n                onEdgeEditing={this.handleEdgeEditing}\r\n                test={this.state.test}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        {this.state.helpMenuIsOpen &&\r\n          <HelpMenu\r\n            anchorEl={this.state.helpMenuAnchorEl}\r\n            onMenuClose={this.handleHelpMenuClose}\r\n            onKeyboardShortcutsClick={this.handleKeyboardShortcutsClick}\r\n            onMouseOperationsClick={this.handleMouseOperationsClick}\r\n            onAboutClick={this.handleAboutClick}\r\n          />\r\n        }\r\n        {this.state.keyboardShortcutsDialogIsOpen &&\r\n          <KeyboardShortcutsDialog\r\n            onKeyboardShortcutsDialogClose={this.handleKeyboardShortcutsDialogClose}\r\n          />\r\n        }\r\n        {this.state.mouseOperationsDialogIsOpen &&\r\n          <MouseOperationsDialog\r\n            onMouseOperationsDialogClose={this.handleMouseOperationsDialogClose}\r\n          />\r\n        }\r\n        {this.state.aboutDialogIsOpen &&\r\n          <AboutDialog\r\n            graphvizVersion={this.state.graphvizVersion}\r\n            onAboutDialogClose={this.handleAboutDialogClose}\r\n          />\r\n        }\r\n        {this.state.labelEditDialogIsOpen &&\r\n          <LabelEditDialog\r\n            originalLabel={this.state.originalLabel}\r\n            onLabelEditDialogClose={this.handleLabelEditDialogClose}\r\n            onLabelConfirmation={this.handleLabelConfirmation}\r\n          />\r\n       }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIndex.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withRoot(withStyles(styles)(Index));"]},"metadata":{},"sourceType":"module"}