{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\assisted-KAOS-editor\\\\src\\\\SaveAsToBrowserDialog.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport withRoot from './withRoot';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport TextField from '@material-ui/core/TextField';\nimport DoYouWantToReplaceItDialog from './DoYouWantToReplaceItDialog';\n\nconst styles = theme => ({\n  title: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  content: {\n    overflowY: 'visible'\n  }\n});\n\nclass SaveAsToBrowserDialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClose = () => {\n      this.props.onClose();\n    };\n\n    this.handleChange = event => {\n      this.name = event.target.value;\n    };\n\n    this.handleKeyPress = event => {\n      if (event.key === 'Enter') {\n        this.handleSave();\n      }\n    };\n\n    this.handleSave = () => {\n      const newName = this.name;\n      const currentName = this.props.name;\n\n      if (this.props.projects[newName] == null || newName === currentName) {\n        this.handleConfirmedSave();\n      } else {\n        this.setState({\n          doYouWantToReplaceItDialogIsOpen: true,\n          replaceName: newName\n        });\n      }\n    };\n\n    this.handleConfirmedSave = () => {\n      this.setState({\n        doYouWantToReplaceItDialogIsOpen: false\n      });\n      this.props.onSave(this.name);\n    };\n\n    this.handleDoYouWantToReplaceItClose = () => {\n      this.setState({\n        doYouWantToReplaceItDialogIsOpen: false\n      });\n    };\n\n    this.state = {\n      doYouWantToReplaceItDialogIsOpen: false\n    };\n    this.name = this.props.defaultNewName;\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      id: \"save-to-browser-dialog\",\n      className: classes.root,\n      open: true,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.props.rename ? 'Rename graph' : 'Save graph to browser'), React.createElement(IconButton, {\n      \"aria-label\": \"Close\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }))), React.createElement(DialogContent, {\n      classes: {\n        root: classes.content\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.props.rename ? \"Give the current graph a new name in the browser's local storage.\" : \"Save a the current graph to the browser's local storage under a new name.\"), React.createElement(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"name\",\n      label: \"New name\",\n      type: \"text\",\n      placeholder: this.props.defaultNewName,\n      fullWidth: true,\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.props.onClose,\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleSave,\n      color: \"secondary\",\n      id: \"save\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.props.rename ? 'Rename' : 'Save'))), this.state.doYouWantToReplaceItDialogIsOpen && React.createElement(DoYouWantToReplaceItDialog, {\n      name: this.state.replaceName,\n      onReplace: this.handleConfirmedSave,\n      onClose: this.handleDoYouWantToReplaceItClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSaveAsToBrowserDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onSave: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  defaultNewName: PropTypes.string.isRequired,\n  projects: PropTypes.object.isRequired\n};\nexport default withRoot(withStyles(styles)(SaveAsToBrowserDialog));","map":{"version":3,"sources":["C:/Users/user/assisted-KAOS-editor/src/SaveAsToBrowserDialog.js"],"names":["React","PropTypes","withStyles","withRoot","CloseIcon","IconButton","Button","Dialog","DialogContent","DialogContentText","DialogTitle","DialogActions","TextField","DoYouWantToReplaceItDialog","styles","theme","title","display","justifyContent","content","overflowY","SaveAsToBrowserDialog","Component","constructor","props","handleClose","onClose","handleChange","event","name","target","value","handleKeyPress","key","handleSave","newName","currentName","projects","handleConfirmedSave","setState","doYouWantToReplaceItDialogIsOpen","replaceName","onSave","handleDoYouWantToReplaceItClose","state","defaultNewName","render","classes","root","rename","propTypes","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withRoot from './withRoot';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DoYouWantToReplaceItDialog from './DoYouWantToReplaceItDialog';\r\n\r\nconst styles = theme => ({\r\n  title: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  content: {\r\n    overflowY: 'visible',\r\n  },\r\n});\r\n\r\nclass SaveAsToBrowserDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      doYouWantToReplaceItDialogIsOpen: false,\r\n    };\r\n    this.name = this.props.defaultNewName;\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.props.onClose();\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.name = event.target.value;\r\n  };\r\n\r\n  handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      this.handleSave();\r\n    }\r\n  };\r\n\r\n  handleSave = () => {\r\n    const newName = this.name;\r\n    const currentName = this.props.name;\r\n    if (this.props.projects[newName] == null || newName === currentName) {\r\n      this.handleConfirmedSave();\r\n    } else {\r\n      this.setState({\r\n        doYouWantToReplaceItDialogIsOpen: true,\r\n        replaceName: newName,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleConfirmedSave = () => {\r\n    this.setState({\r\n      doYouWantToReplaceItDialogIsOpen: false,\r\n    });\r\n    this.props.onSave(this.name);\r\n  };\r\n\r\n  handleDoYouWantToReplaceItClose = () => {\r\n    this.setState({\r\n      doYouWantToReplaceItDialogIsOpen: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n           id=\"save-to-browser-dialog\"\r\n          className={classes.root}\r\n          open\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <div className={classes.title}>\r\n            <DialogTitle id=\"form-dialog-title\">\r\n              {this.props.rename ? 'Rename graph' : 'Save graph to browser'}\r\n            </DialogTitle>\r\n            <IconButton\r\n              aria-label=\"Close\"\r\n              onClick={this.handleClose}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </div>\r\n          <DialogContent classes={{root: classes.content}}>\r\n            <DialogContentText>\r\n              {this.props.rename ?\r\n                \"Give the current graph a new name in the browser's local storage.\" :\r\n                \"Save a the current graph to the browser's local storage under a new name.\"\r\n              }\r\n            </DialogContentText>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"New name\"\r\n              type=\"text\"\r\n              placeholder={this.props.defaultNewName}\r\n              fullWidth\r\n              onChange={this.handleChange}\r\n              onKeyPress={this.handleKeyPress}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.props.onClose} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={this.handleSave} color=\"secondary\" id=\"save\">\r\n              {this.props.rename ? 'Rename' : 'Save'}\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        {this.state.doYouWantToReplaceItDialogIsOpen &&\r\n          <DoYouWantToReplaceItDialog\r\n            name={this.state.replaceName}\r\n            onReplace={this.handleConfirmedSave}\r\n            onClose={this.handleDoYouWantToReplaceItClose}\r\n          />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSaveAsToBrowserDialog.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onSave: PropTypes.func.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  defaultNewName: PropTypes.string.isRequired,\r\n  projects: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withRoot(withStyles(styles)(SaveAsToBrowserDialog));\r\n"]},"metadata":{},"sourceType":"module"}