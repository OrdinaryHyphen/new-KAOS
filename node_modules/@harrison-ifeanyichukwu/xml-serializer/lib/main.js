'use strict';

var Serializer = require('./modules/Serializer.js');

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var XMLSerializer = function () {
    /**
     *@param {boolean} [preserveWhiteSpace=true] - boolean value indicating if white spaces
     * should be preserved as it is in the source
    */
    function XMLSerializer(preserveWhiteSpace) {
        classCallCheck(this, XMLSerializer);

        this.serializer = new Serializer(preserveWhiteSpace);
    }

    /**
     * return XMLSerializer as modules name
    */


    createClass(XMLSerializer, [{
        key: 'serializeToString',


        /**
         * produces an XML serialization of root passing a value of false for the
         * require well-formed parameter, and return the result.
         *@param {Node} root - the root node
         *@param {boolean} [requireWellFormed=false] - boolean value indicating if it should require xml
         * well formedness
         *@returns {string}
        */
        value: function serializeToString(root, requireWellFormed) {
            return this.serializer.serializeToString(root, requireWellFormed);
        }
    }, {
        key: Symbol.toStringTag,
        get: function get$$1() {
            return 'XMLSerializer';
        }
    }]);
    return XMLSerializer;
}();

module.exports = XMLSerializer;
